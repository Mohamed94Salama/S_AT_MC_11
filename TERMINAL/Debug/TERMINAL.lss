
TERMINAL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000414a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000362  00800060  0000414a  000041de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000431  008003c2  008003c2  00004540  2**0
                  ALLOC
  3 .stab         000058bc  00000000  00000000  00004540  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003975  00000000  00000000  00009dfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000d771  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f6  00000000  00000000  0000d911  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002393  00000000  00000000  0000db07  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001374  00000000  00000000  0000fe9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001238  00000000  00000000  0001120e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  00012448  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002ff  00000000  00000000  00012608  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009de  00000000  00000000  00012907  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000132e5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 00 0a 	jmp	0x1400	; 0x1400 <__vector_13>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__vector_15>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 07 0e 	jmp	0x1c0e	; 0x1c0e <__vector_19>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

00000054 <pstr_inf>:
      54:	49 4e 46                                            INF

00000057 <pstr_inity>:
      57:	49 4e 49 54 59                                      INITY

0000005c <pstr_nan>:
      5c:	4e 41 4e                                            NAN

0000005f <pwr_m10>:
      5f:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      6f:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000077 <pwr_p10>:
      77:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
      87:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

00000090 <__ctors_end>:
      90:	11 24       	eor	r1, r1
      92:	1f be       	out	0x3f, r1	; 63
      94:	cf e5       	ldi	r28, 0x5F	; 95
      96:	d8 e0       	ldi	r29, 0x08	; 8
      98:	de bf       	out	0x3e, r29	; 62
      9a:	cd bf       	out	0x3d, r28	; 61

0000009c <__do_copy_data>:
      9c:	13 e0       	ldi	r17, 0x03	; 3
      9e:	a0 e6       	ldi	r26, 0x60	; 96
      a0:	b0 e0       	ldi	r27, 0x00	; 0
      a2:	ea e4       	ldi	r30, 0x4A	; 74
      a4:	f1 e4       	ldi	r31, 0x41	; 65
      a6:	02 c0       	rjmp	.+4      	; 0xac <.do_copy_data_start>

000000a8 <.do_copy_data_loop>:
      a8:	05 90       	lpm	r0, Z+
      aa:	0d 92       	st	X+, r0

000000ac <.do_copy_data_start>:
      ac:	a2 3c       	cpi	r26, 0xC2	; 194
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <.do_copy_data_loop>

000000b2 <__do_clear_bss>:
      b2:	17 e0       	ldi	r17, 0x07	; 7
      b4:	a2 ec       	ldi	r26, 0xC2	; 194
      b6:	b3 e0       	ldi	r27, 0x03	; 3
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a3 3f       	cpi	r26, 0xF3	; 243
      be:	b1 07       	cpc	r27, r17
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <main>
      c6:	0c 94 a3 20 	jmp	0x4146	; 0x4146 <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <__fixunssfsi>:
      ce:	ef 92       	push	r14
      d0:	ff 92       	push	r15
      d2:	0f 93       	push	r16
      d4:	1f 93       	push	r17
      d6:	7b 01       	movw	r14, r22
      d8:	8c 01       	movw	r16, r24
      da:	20 e0       	ldi	r18, 0x00	; 0
      dc:	30 e0       	ldi	r19, 0x00	; 0
      de:	40 e0       	ldi	r20, 0x00	; 0
      e0:	5f e4       	ldi	r21, 0x4F	; 79
      e2:	0e 94 13 04 	call	0x826	; 0x826 <__gesf2>
      e6:	88 23       	and	r24, r24
      e8:	8c f0       	brlt	.+34     	; 0x10c <__fixunssfsi+0x3e>
      ea:	c8 01       	movw	r24, r16
      ec:	b7 01       	movw	r22, r14
      ee:	20 e0       	ldi	r18, 0x00	; 0
      f0:	30 e0       	ldi	r19, 0x00	; 0
      f2:	40 e0       	ldi	r20, 0x00	; 0
      f4:	5f e4       	ldi	r21, 0x4F	; 79
      f6:	0e 94 df 01 	call	0x3be	; 0x3be <__subsf3>
      fa:	0e 94 a1 04 	call	0x942	; 0x942 <__fixsfsi>
      fe:	9b 01       	movw	r18, r22
     100:	ac 01       	movw	r20, r24
     102:	20 50       	subi	r18, 0x00	; 0
     104:	30 40       	sbci	r19, 0x00	; 0
     106:	40 40       	sbci	r20, 0x00	; 0
     108:	50 48       	sbci	r21, 0x80	; 128
     10a:	06 c0       	rjmp	.+12     	; 0x118 <__fixunssfsi+0x4a>
     10c:	c8 01       	movw	r24, r16
     10e:	b7 01       	movw	r22, r14
     110:	0e 94 a1 04 	call	0x942	; 0x942 <__fixsfsi>
     114:	9b 01       	movw	r18, r22
     116:	ac 01       	movw	r20, r24
     118:	b9 01       	movw	r22, r18
     11a:	ca 01       	movw	r24, r20
     11c:	1f 91       	pop	r17
     11e:	0f 91       	pop	r16
     120:	ff 90       	pop	r15
     122:	ef 90       	pop	r14
     124:	08 95       	ret

00000126 <_fpadd_parts>:
     126:	a0 e0       	ldi	r26, 0x00	; 0
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	e9 e9       	ldi	r30, 0x99	; 153
     12c:	f0 e0       	ldi	r31, 0x00	; 0
     12e:	0c 94 8c 1e 	jmp	0x3d18	; 0x3d18 <__prologue_saves__>
     132:	dc 01       	movw	r26, r24
     134:	2b 01       	movw	r4, r22
     136:	fa 01       	movw	r30, r20
     138:	9c 91       	ld	r25, X
     13a:	92 30       	cpi	r25, 0x02	; 2
     13c:	08 f4       	brcc	.+2      	; 0x140 <_fpadd_parts+0x1a>
     13e:	39 c1       	rjmp	.+626    	; 0x3b2 <_fpadd_parts+0x28c>
     140:	eb 01       	movw	r28, r22
     142:	88 81       	ld	r24, Y
     144:	82 30       	cpi	r24, 0x02	; 2
     146:	08 f4       	brcc	.+2      	; 0x14a <_fpadd_parts+0x24>
     148:	33 c1       	rjmp	.+614    	; 0x3b0 <_fpadd_parts+0x28a>
     14a:	94 30       	cpi	r25, 0x04	; 4
     14c:	69 f4       	brne	.+26     	; 0x168 <_fpadd_parts+0x42>
     14e:	84 30       	cpi	r24, 0x04	; 4
     150:	09 f0       	breq	.+2      	; 0x154 <_fpadd_parts+0x2e>
     152:	2f c1       	rjmp	.+606    	; 0x3b2 <_fpadd_parts+0x28c>
     154:	11 96       	adiw	r26, 0x01	; 1
     156:	9c 91       	ld	r25, X
     158:	11 97       	sbiw	r26, 0x01	; 1
     15a:	89 81       	ldd	r24, Y+1	; 0x01
     15c:	98 17       	cp	r25, r24
     15e:	09 f4       	brne	.+2      	; 0x162 <_fpadd_parts+0x3c>
     160:	28 c1       	rjmp	.+592    	; 0x3b2 <_fpadd_parts+0x28c>
     162:	a2 ea       	ldi	r26, 0xA2	; 162
     164:	b2 e0       	ldi	r27, 0x02	; 2
     166:	25 c1       	rjmp	.+586    	; 0x3b2 <_fpadd_parts+0x28c>
     168:	84 30       	cpi	r24, 0x04	; 4
     16a:	09 f4       	brne	.+2      	; 0x16e <_fpadd_parts+0x48>
     16c:	21 c1       	rjmp	.+578    	; 0x3b0 <_fpadd_parts+0x28a>
     16e:	82 30       	cpi	r24, 0x02	; 2
     170:	a9 f4       	brne	.+42     	; 0x19c <_fpadd_parts+0x76>
     172:	92 30       	cpi	r25, 0x02	; 2
     174:	09 f0       	breq	.+2      	; 0x178 <_fpadd_parts+0x52>
     176:	1d c1       	rjmp	.+570    	; 0x3b2 <_fpadd_parts+0x28c>
     178:	9a 01       	movw	r18, r20
     17a:	ad 01       	movw	r20, r26
     17c:	88 e0       	ldi	r24, 0x08	; 8
     17e:	ea 01       	movw	r28, r20
     180:	09 90       	ld	r0, Y+
     182:	ae 01       	movw	r20, r28
     184:	e9 01       	movw	r28, r18
     186:	09 92       	st	Y+, r0
     188:	9e 01       	movw	r18, r28
     18a:	81 50       	subi	r24, 0x01	; 1
     18c:	c1 f7       	brne	.-16     	; 0x17e <_fpadd_parts+0x58>
     18e:	e2 01       	movw	r28, r4
     190:	89 81       	ldd	r24, Y+1	; 0x01
     192:	11 96       	adiw	r26, 0x01	; 1
     194:	9c 91       	ld	r25, X
     196:	89 23       	and	r24, r25
     198:	81 83       	std	Z+1, r24	; 0x01
     19a:	08 c1       	rjmp	.+528    	; 0x3ac <_fpadd_parts+0x286>
     19c:	92 30       	cpi	r25, 0x02	; 2
     19e:	09 f4       	brne	.+2      	; 0x1a2 <_fpadd_parts+0x7c>
     1a0:	07 c1       	rjmp	.+526    	; 0x3b0 <_fpadd_parts+0x28a>
     1a2:	12 96       	adiw	r26, 0x02	; 2
     1a4:	2d 90       	ld	r2, X+
     1a6:	3c 90       	ld	r3, X
     1a8:	13 97       	sbiw	r26, 0x03	; 3
     1aa:	eb 01       	movw	r28, r22
     1ac:	8a 81       	ldd	r24, Y+2	; 0x02
     1ae:	9b 81       	ldd	r25, Y+3	; 0x03
     1b0:	14 96       	adiw	r26, 0x04	; 4
     1b2:	ad 90       	ld	r10, X+
     1b4:	bd 90       	ld	r11, X+
     1b6:	cd 90       	ld	r12, X+
     1b8:	dc 90       	ld	r13, X
     1ba:	17 97       	sbiw	r26, 0x07	; 7
     1bc:	ec 80       	ldd	r14, Y+4	; 0x04
     1be:	fd 80       	ldd	r15, Y+5	; 0x05
     1c0:	0e 81       	ldd	r16, Y+6	; 0x06
     1c2:	1f 81       	ldd	r17, Y+7	; 0x07
     1c4:	91 01       	movw	r18, r2
     1c6:	28 1b       	sub	r18, r24
     1c8:	39 0b       	sbc	r19, r25
     1ca:	b9 01       	movw	r22, r18
     1cc:	37 ff       	sbrs	r19, 7
     1ce:	04 c0       	rjmp	.+8      	; 0x1d8 <_fpadd_parts+0xb2>
     1d0:	66 27       	eor	r22, r22
     1d2:	77 27       	eor	r23, r23
     1d4:	62 1b       	sub	r22, r18
     1d6:	73 0b       	sbc	r23, r19
     1d8:	60 32       	cpi	r22, 0x20	; 32
     1da:	71 05       	cpc	r23, r1
     1dc:	0c f0       	brlt	.+2      	; 0x1e0 <_fpadd_parts+0xba>
     1de:	61 c0       	rjmp	.+194    	; 0x2a2 <_fpadd_parts+0x17c>
     1e0:	12 16       	cp	r1, r18
     1e2:	13 06       	cpc	r1, r19
     1e4:	6c f5       	brge	.+90     	; 0x240 <_fpadd_parts+0x11a>
     1e6:	37 01       	movw	r6, r14
     1e8:	48 01       	movw	r8, r16
     1ea:	06 2e       	mov	r0, r22
     1ec:	04 c0       	rjmp	.+8      	; 0x1f6 <_fpadd_parts+0xd0>
     1ee:	96 94       	lsr	r9
     1f0:	87 94       	ror	r8
     1f2:	77 94       	ror	r7
     1f4:	67 94       	ror	r6
     1f6:	0a 94       	dec	r0
     1f8:	d2 f7       	brpl	.-12     	; 0x1ee <_fpadd_parts+0xc8>
     1fa:	21 e0       	ldi	r18, 0x01	; 1
     1fc:	30 e0       	ldi	r19, 0x00	; 0
     1fe:	40 e0       	ldi	r20, 0x00	; 0
     200:	50 e0       	ldi	r21, 0x00	; 0
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0xe6>
     204:	22 0f       	add	r18, r18
     206:	33 1f       	adc	r19, r19
     208:	44 1f       	adc	r20, r20
     20a:	55 1f       	adc	r21, r21
     20c:	6a 95       	dec	r22
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0xde>
     210:	21 50       	subi	r18, 0x01	; 1
     212:	30 40       	sbci	r19, 0x00	; 0
     214:	40 40       	sbci	r20, 0x00	; 0
     216:	50 40       	sbci	r21, 0x00	; 0
     218:	2e 21       	and	r18, r14
     21a:	3f 21       	and	r19, r15
     21c:	40 23       	and	r20, r16
     21e:	51 23       	and	r21, r17
     220:	21 15       	cp	r18, r1
     222:	31 05       	cpc	r19, r1
     224:	41 05       	cpc	r20, r1
     226:	51 05       	cpc	r21, r1
     228:	21 f0       	breq	.+8      	; 0x232 <_fpadd_parts+0x10c>
     22a:	21 e0       	ldi	r18, 0x01	; 1
     22c:	30 e0       	ldi	r19, 0x00	; 0
     22e:	40 e0       	ldi	r20, 0x00	; 0
     230:	50 e0       	ldi	r21, 0x00	; 0
     232:	79 01       	movw	r14, r18
     234:	8a 01       	movw	r16, r20
     236:	e6 28       	or	r14, r6
     238:	f7 28       	or	r15, r7
     23a:	08 29       	or	r16, r8
     23c:	19 29       	or	r17, r9
     23e:	3c c0       	rjmp	.+120    	; 0x2b8 <_fpadd_parts+0x192>
     240:	23 2b       	or	r18, r19
     242:	d1 f1       	breq	.+116    	; 0x2b8 <_fpadd_parts+0x192>
     244:	26 0e       	add	r2, r22
     246:	37 1e       	adc	r3, r23
     248:	35 01       	movw	r6, r10
     24a:	46 01       	movw	r8, r12
     24c:	06 2e       	mov	r0, r22
     24e:	04 c0       	rjmp	.+8      	; 0x258 <_fpadd_parts+0x132>
     250:	96 94       	lsr	r9
     252:	87 94       	ror	r8
     254:	77 94       	ror	r7
     256:	67 94       	ror	r6
     258:	0a 94       	dec	r0
     25a:	d2 f7       	brpl	.-12     	; 0x250 <_fpadd_parts+0x12a>
     25c:	21 e0       	ldi	r18, 0x01	; 1
     25e:	30 e0       	ldi	r19, 0x00	; 0
     260:	40 e0       	ldi	r20, 0x00	; 0
     262:	50 e0       	ldi	r21, 0x00	; 0
     264:	04 c0       	rjmp	.+8      	; 0x26e <_fpadd_parts+0x148>
     266:	22 0f       	add	r18, r18
     268:	33 1f       	adc	r19, r19
     26a:	44 1f       	adc	r20, r20
     26c:	55 1f       	adc	r21, r21
     26e:	6a 95       	dec	r22
     270:	d2 f7       	brpl	.-12     	; 0x266 <_fpadd_parts+0x140>
     272:	21 50       	subi	r18, 0x01	; 1
     274:	30 40       	sbci	r19, 0x00	; 0
     276:	40 40       	sbci	r20, 0x00	; 0
     278:	50 40       	sbci	r21, 0x00	; 0
     27a:	2a 21       	and	r18, r10
     27c:	3b 21       	and	r19, r11
     27e:	4c 21       	and	r20, r12
     280:	5d 21       	and	r21, r13
     282:	21 15       	cp	r18, r1
     284:	31 05       	cpc	r19, r1
     286:	41 05       	cpc	r20, r1
     288:	51 05       	cpc	r21, r1
     28a:	21 f0       	breq	.+8      	; 0x294 <_fpadd_parts+0x16e>
     28c:	21 e0       	ldi	r18, 0x01	; 1
     28e:	30 e0       	ldi	r19, 0x00	; 0
     290:	40 e0       	ldi	r20, 0x00	; 0
     292:	50 e0       	ldi	r21, 0x00	; 0
     294:	59 01       	movw	r10, r18
     296:	6a 01       	movw	r12, r20
     298:	a6 28       	or	r10, r6
     29a:	b7 28       	or	r11, r7
     29c:	c8 28       	or	r12, r8
     29e:	d9 28       	or	r13, r9
     2a0:	0b c0       	rjmp	.+22     	; 0x2b8 <_fpadd_parts+0x192>
     2a2:	82 15       	cp	r24, r2
     2a4:	93 05       	cpc	r25, r3
     2a6:	2c f0       	brlt	.+10     	; 0x2b2 <_fpadd_parts+0x18c>
     2a8:	1c 01       	movw	r2, r24
     2aa:	aa 24       	eor	r10, r10
     2ac:	bb 24       	eor	r11, r11
     2ae:	65 01       	movw	r12, r10
     2b0:	03 c0       	rjmp	.+6      	; 0x2b8 <_fpadd_parts+0x192>
     2b2:	ee 24       	eor	r14, r14
     2b4:	ff 24       	eor	r15, r15
     2b6:	87 01       	movw	r16, r14
     2b8:	11 96       	adiw	r26, 0x01	; 1
     2ba:	9c 91       	ld	r25, X
     2bc:	d2 01       	movw	r26, r4
     2be:	11 96       	adiw	r26, 0x01	; 1
     2c0:	8c 91       	ld	r24, X
     2c2:	98 17       	cp	r25, r24
     2c4:	09 f4       	brne	.+2      	; 0x2c8 <_fpadd_parts+0x1a2>
     2c6:	45 c0       	rjmp	.+138    	; 0x352 <_fpadd_parts+0x22c>
     2c8:	99 23       	and	r25, r25
     2ca:	39 f0       	breq	.+14     	; 0x2da <_fpadd_parts+0x1b4>
     2cc:	a8 01       	movw	r20, r16
     2ce:	97 01       	movw	r18, r14
     2d0:	2a 19       	sub	r18, r10
     2d2:	3b 09       	sbc	r19, r11
     2d4:	4c 09       	sbc	r20, r12
     2d6:	5d 09       	sbc	r21, r13
     2d8:	06 c0       	rjmp	.+12     	; 0x2e6 <_fpadd_parts+0x1c0>
     2da:	a6 01       	movw	r20, r12
     2dc:	95 01       	movw	r18, r10
     2de:	2e 19       	sub	r18, r14
     2e0:	3f 09       	sbc	r19, r15
     2e2:	40 0b       	sbc	r20, r16
     2e4:	51 0b       	sbc	r21, r17
     2e6:	57 fd       	sbrc	r21, 7
     2e8:	08 c0       	rjmp	.+16     	; 0x2fa <_fpadd_parts+0x1d4>
     2ea:	11 82       	std	Z+1, r1	; 0x01
     2ec:	33 82       	std	Z+3, r3	; 0x03
     2ee:	22 82       	std	Z+2, r2	; 0x02
     2f0:	24 83       	std	Z+4, r18	; 0x04
     2f2:	35 83       	std	Z+5, r19	; 0x05
     2f4:	46 83       	std	Z+6, r20	; 0x06
     2f6:	57 83       	std	Z+7, r21	; 0x07
     2f8:	1d c0       	rjmp	.+58     	; 0x334 <_fpadd_parts+0x20e>
     2fa:	81 e0       	ldi	r24, 0x01	; 1
     2fc:	81 83       	std	Z+1, r24	; 0x01
     2fe:	33 82       	std	Z+3, r3	; 0x03
     300:	22 82       	std	Z+2, r2	; 0x02
     302:	88 27       	eor	r24, r24
     304:	99 27       	eor	r25, r25
     306:	dc 01       	movw	r26, r24
     308:	82 1b       	sub	r24, r18
     30a:	93 0b       	sbc	r25, r19
     30c:	a4 0b       	sbc	r26, r20
     30e:	b5 0b       	sbc	r27, r21
     310:	84 83       	std	Z+4, r24	; 0x04
     312:	95 83       	std	Z+5, r25	; 0x05
     314:	a6 83       	std	Z+6, r26	; 0x06
     316:	b7 83       	std	Z+7, r27	; 0x07
     318:	0d c0       	rjmp	.+26     	; 0x334 <_fpadd_parts+0x20e>
     31a:	22 0f       	add	r18, r18
     31c:	33 1f       	adc	r19, r19
     31e:	44 1f       	adc	r20, r20
     320:	55 1f       	adc	r21, r21
     322:	24 83       	std	Z+4, r18	; 0x04
     324:	35 83       	std	Z+5, r19	; 0x05
     326:	46 83       	std	Z+6, r20	; 0x06
     328:	57 83       	std	Z+7, r21	; 0x07
     32a:	82 81       	ldd	r24, Z+2	; 0x02
     32c:	93 81       	ldd	r25, Z+3	; 0x03
     32e:	01 97       	sbiw	r24, 0x01	; 1
     330:	93 83       	std	Z+3, r25	; 0x03
     332:	82 83       	std	Z+2, r24	; 0x02
     334:	24 81       	ldd	r18, Z+4	; 0x04
     336:	35 81       	ldd	r19, Z+5	; 0x05
     338:	46 81       	ldd	r20, Z+6	; 0x06
     33a:	57 81       	ldd	r21, Z+7	; 0x07
     33c:	da 01       	movw	r26, r20
     33e:	c9 01       	movw	r24, r18
     340:	01 97       	sbiw	r24, 0x01	; 1
     342:	a1 09       	sbc	r26, r1
     344:	b1 09       	sbc	r27, r1
     346:	8f 5f       	subi	r24, 0xFF	; 255
     348:	9f 4f       	sbci	r25, 0xFF	; 255
     34a:	af 4f       	sbci	r26, 0xFF	; 255
     34c:	bf 43       	sbci	r27, 0x3F	; 63
     34e:	28 f3       	brcs	.-54     	; 0x31a <_fpadd_parts+0x1f4>
     350:	0b c0       	rjmp	.+22     	; 0x368 <_fpadd_parts+0x242>
     352:	91 83       	std	Z+1, r25	; 0x01
     354:	33 82       	std	Z+3, r3	; 0x03
     356:	22 82       	std	Z+2, r2	; 0x02
     358:	ea 0c       	add	r14, r10
     35a:	fb 1c       	adc	r15, r11
     35c:	0c 1d       	adc	r16, r12
     35e:	1d 1d       	adc	r17, r13
     360:	e4 82       	std	Z+4, r14	; 0x04
     362:	f5 82       	std	Z+5, r15	; 0x05
     364:	06 83       	std	Z+6, r16	; 0x06
     366:	17 83       	std	Z+7, r17	; 0x07
     368:	83 e0       	ldi	r24, 0x03	; 3
     36a:	80 83       	st	Z, r24
     36c:	24 81       	ldd	r18, Z+4	; 0x04
     36e:	35 81       	ldd	r19, Z+5	; 0x05
     370:	46 81       	ldd	r20, Z+6	; 0x06
     372:	57 81       	ldd	r21, Z+7	; 0x07
     374:	57 ff       	sbrs	r21, 7
     376:	1a c0       	rjmp	.+52     	; 0x3ac <_fpadd_parts+0x286>
     378:	c9 01       	movw	r24, r18
     37a:	aa 27       	eor	r26, r26
     37c:	97 fd       	sbrc	r25, 7
     37e:	a0 95       	com	r26
     380:	ba 2f       	mov	r27, r26
     382:	81 70       	andi	r24, 0x01	; 1
     384:	90 70       	andi	r25, 0x00	; 0
     386:	a0 70       	andi	r26, 0x00	; 0
     388:	b0 70       	andi	r27, 0x00	; 0
     38a:	56 95       	lsr	r21
     38c:	47 95       	ror	r20
     38e:	37 95       	ror	r19
     390:	27 95       	ror	r18
     392:	82 2b       	or	r24, r18
     394:	93 2b       	or	r25, r19
     396:	a4 2b       	or	r26, r20
     398:	b5 2b       	or	r27, r21
     39a:	84 83       	std	Z+4, r24	; 0x04
     39c:	95 83       	std	Z+5, r25	; 0x05
     39e:	a6 83       	std	Z+6, r26	; 0x06
     3a0:	b7 83       	std	Z+7, r27	; 0x07
     3a2:	82 81       	ldd	r24, Z+2	; 0x02
     3a4:	93 81       	ldd	r25, Z+3	; 0x03
     3a6:	01 96       	adiw	r24, 0x01	; 1
     3a8:	93 83       	std	Z+3, r25	; 0x03
     3aa:	82 83       	std	Z+2, r24	; 0x02
     3ac:	df 01       	movw	r26, r30
     3ae:	01 c0       	rjmp	.+2      	; 0x3b2 <_fpadd_parts+0x28c>
     3b0:	d2 01       	movw	r26, r4
     3b2:	cd 01       	movw	r24, r26
     3b4:	cd b7       	in	r28, 0x3d	; 61
     3b6:	de b7       	in	r29, 0x3e	; 62
     3b8:	e2 e1       	ldi	r30, 0x12	; 18
     3ba:	0c 94 a8 1e 	jmp	0x3d50	; 0x3d50 <__epilogue_restores__>

000003be <__subsf3>:
     3be:	a0 e2       	ldi	r26, 0x20	; 32
     3c0:	b0 e0       	ldi	r27, 0x00	; 0
     3c2:	e5 ee       	ldi	r30, 0xE5	; 229
     3c4:	f1 e0       	ldi	r31, 0x01	; 1
     3c6:	0c 94 98 1e 	jmp	0x3d30	; 0x3d30 <__prologue_saves__+0x18>
     3ca:	69 83       	std	Y+1, r22	; 0x01
     3cc:	7a 83       	std	Y+2, r23	; 0x02
     3ce:	8b 83       	std	Y+3, r24	; 0x03
     3d0:	9c 83       	std	Y+4, r25	; 0x04
     3d2:	2d 83       	std	Y+5, r18	; 0x05
     3d4:	3e 83       	std	Y+6, r19	; 0x06
     3d6:	4f 83       	std	Y+7, r20	; 0x07
     3d8:	58 87       	std	Y+8, r21	; 0x08
     3da:	e9 e0       	ldi	r30, 0x09	; 9
     3dc:	ee 2e       	mov	r14, r30
     3de:	f1 2c       	mov	r15, r1
     3e0:	ec 0e       	add	r14, r28
     3e2:	fd 1e       	adc	r15, r29
     3e4:	ce 01       	movw	r24, r28
     3e6:	01 96       	adiw	r24, 0x01	; 1
     3e8:	b7 01       	movw	r22, r14
     3ea:	0e 94 92 06 	call	0xd24	; 0xd24 <__unpack_f>
     3ee:	8e 01       	movw	r16, r28
     3f0:	0f 5e       	subi	r16, 0xEF	; 239
     3f2:	1f 4f       	sbci	r17, 0xFF	; 255
     3f4:	ce 01       	movw	r24, r28
     3f6:	05 96       	adiw	r24, 0x05	; 5
     3f8:	b8 01       	movw	r22, r16
     3fa:	0e 94 92 06 	call	0xd24	; 0xd24 <__unpack_f>
     3fe:	8a 89       	ldd	r24, Y+18	; 0x12
     400:	91 e0       	ldi	r25, 0x01	; 1
     402:	89 27       	eor	r24, r25
     404:	8a 8b       	std	Y+18, r24	; 0x12
     406:	c7 01       	movw	r24, r14
     408:	b8 01       	movw	r22, r16
     40a:	ae 01       	movw	r20, r28
     40c:	47 5e       	subi	r20, 0xE7	; 231
     40e:	5f 4f       	sbci	r21, 0xFF	; 255
     410:	0e 94 93 00 	call	0x126	; 0x126 <_fpadd_parts>
     414:	0e 94 bd 05 	call	0xb7a	; 0xb7a <__pack_f>
     418:	a0 96       	adiw	r28, 0x20	; 32
     41a:	e6 e0       	ldi	r30, 0x06	; 6
     41c:	0c 94 b4 1e 	jmp	0x3d68	; 0x3d68 <__epilogue_restores__+0x18>

00000420 <__addsf3>:
     420:	a0 e2       	ldi	r26, 0x20	; 32
     422:	b0 e0       	ldi	r27, 0x00	; 0
     424:	e6 e1       	ldi	r30, 0x16	; 22
     426:	f2 e0       	ldi	r31, 0x02	; 2
     428:	0c 94 98 1e 	jmp	0x3d30	; 0x3d30 <__prologue_saves__+0x18>
     42c:	69 83       	std	Y+1, r22	; 0x01
     42e:	7a 83       	std	Y+2, r23	; 0x02
     430:	8b 83       	std	Y+3, r24	; 0x03
     432:	9c 83       	std	Y+4, r25	; 0x04
     434:	2d 83       	std	Y+5, r18	; 0x05
     436:	3e 83       	std	Y+6, r19	; 0x06
     438:	4f 83       	std	Y+7, r20	; 0x07
     43a:	58 87       	std	Y+8, r21	; 0x08
     43c:	f9 e0       	ldi	r31, 0x09	; 9
     43e:	ef 2e       	mov	r14, r31
     440:	f1 2c       	mov	r15, r1
     442:	ec 0e       	add	r14, r28
     444:	fd 1e       	adc	r15, r29
     446:	ce 01       	movw	r24, r28
     448:	01 96       	adiw	r24, 0x01	; 1
     44a:	b7 01       	movw	r22, r14
     44c:	0e 94 92 06 	call	0xd24	; 0xd24 <__unpack_f>
     450:	8e 01       	movw	r16, r28
     452:	0f 5e       	subi	r16, 0xEF	; 239
     454:	1f 4f       	sbci	r17, 0xFF	; 255
     456:	ce 01       	movw	r24, r28
     458:	05 96       	adiw	r24, 0x05	; 5
     45a:	b8 01       	movw	r22, r16
     45c:	0e 94 92 06 	call	0xd24	; 0xd24 <__unpack_f>
     460:	c7 01       	movw	r24, r14
     462:	b8 01       	movw	r22, r16
     464:	ae 01       	movw	r20, r28
     466:	47 5e       	subi	r20, 0xE7	; 231
     468:	5f 4f       	sbci	r21, 0xFF	; 255
     46a:	0e 94 93 00 	call	0x126	; 0x126 <_fpadd_parts>
     46e:	0e 94 bd 05 	call	0xb7a	; 0xb7a <__pack_f>
     472:	a0 96       	adiw	r28, 0x20	; 32
     474:	e6 e0       	ldi	r30, 0x06	; 6
     476:	0c 94 b4 1e 	jmp	0x3d68	; 0x3d68 <__epilogue_restores__+0x18>

0000047a <__mulsf3>:
     47a:	a0 e2       	ldi	r26, 0x20	; 32
     47c:	b0 e0       	ldi	r27, 0x00	; 0
     47e:	e3 e4       	ldi	r30, 0x43	; 67
     480:	f2 e0       	ldi	r31, 0x02	; 2
     482:	0c 94 8c 1e 	jmp	0x3d18	; 0x3d18 <__prologue_saves__>
     486:	69 83       	std	Y+1, r22	; 0x01
     488:	7a 83       	std	Y+2, r23	; 0x02
     48a:	8b 83       	std	Y+3, r24	; 0x03
     48c:	9c 83       	std	Y+4, r25	; 0x04
     48e:	2d 83       	std	Y+5, r18	; 0x05
     490:	3e 83       	std	Y+6, r19	; 0x06
     492:	4f 83       	std	Y+7, r20	; 0x07
     494:	58 87       	std	Y+8, r21	; 0x08
     496:	ce 01       	movw	r24, r28
     498:	01 96       	adiw	r24, 0x01	; 1
     49a:	be 01       	movw	r22, r28
     49c:	67 5f       	subi	r22, 0xF7	; 247
     49e:	7f 4f       	sbci	r23, 0xFF	; 255
     4a0:	0e 94 92 06 	call	0xd24	; 0xd24 <__unpack_f>
     4a4:	ce 01       	movw	r24, r28
     4a6:	05 96       	adiw	r24, 0x05	; 5
     4a8:	be 01       	movw	r22, r28
     4aa:	6f 5e       	subi	r22, 0xEF	; 239
     4ac:	7f 4f       	sbci	r23, 0xFF	; 255
     4ae:	0e 94 92 06 	call	0xd24	; 0xd24 <__unpack_f>
     4b2:	99 85       	ldd	r25, Y+9	; 0x09
     4b4:	92 30       	cpi	r25, 0x02	; 2
     4b6:	88 f0       	brcs	.+34     	; 0x4da <__mulsf3+0x60>
     4b8:	89 89       	ldd	r24, Y+17	; 0x11
     4ba:	82 30       	cpi	r24, 0x02	; 2
     4bc:	c8 f0       	brcs	.+50     	; 0x4f0 <__mulsf3+0x76>
     4be:	94 30       	cpi	r25, 0x04	; 4
     4c0:	19 f4       	brne	.+6      	; 0x4c8 <__mulsf3+0x4e>
     4c2:	82 30       	cpi	r24, 0x02	; 2
     4c4:	51 f4       	brne	.+20     	; 0x4da <__mulsf3+0x60>
     4c6:	04 c0       	rjmp	.+8      	; 0x4d0 <__mulsf3+0x56>
     4c8:	84 30       	cpi	r24, 0x04	; 4
     4ca:	29 f4       	brne	.+10     	; 0x4d6 <__mulsf3+0x5c>
     4cc:	92 30       	cpi	r25, 0x02	; 2
     4ce:	81 f4       	brne	.+32     	; 0x4f0 <__mulsf3+0x76>
     4d0:	82 ea       	ldi	r24, 0xA2	; 162
     4d2:	92 e0       	ldi	r25, 0x02	; 2
     4d4:	c6 c0       	rjmp	.+396    	; 0x662 <__mulsf3+0x1e8>
     4d6:	92 30       	cpi	r25, 0x02	; 2
     4d8:	49 f4       	brne	.+18     	; 0x4ec <__mulsf3+0x72>
     4da:	20 e0       	ldi	r18, 0x00	; 0
     4dc:	9a 85       	ldd	r25, Y+10	; 0x0a
     4de:	8a 89       	ldd	r24, Y+18	; 0x12
     4e0:	98 13       	cpse	r25, r24
     4e2:	21 e0       	ldi	r18, 0x01	; 1
     4e4:	2a 87       	std	Y+10, r18	; 0x0a
     4e6:	ce 01       	movw	r24, r28
     4e8:	09 96       	adiw	r24, 0x09	; 9
     4ea:	bb c0       	rjmp	.+374    	; 0x662 <__mulsf3+0x1e8>
     4ec:	82 30       	cpi	r24, 0x02	; 2
     4ee:	49 f4       	brne	.+18     	; 0x502 <__mulsf3+0x88>
     4f0:	20 e0       	ldi	r18, 0x00	; 0
     4f2:	9a 85       	ldd	r25, Y+10	; 0x0a
     4f4:	8a 89       	ldd	r24, Y+18	; 0x12
     4f6:	98 13       	cpse	r25, r24
     4f8:	21 e0       	ldi	r18, 0x01	; 1
     4fa:	2a 8b       	std	Y+18, r18	; 0x12
     4fc:	ce 01       	movw	r24, r28
     4fe:	41 96       	adiw	r24, 0x11	; 17
     500:	b0 c0       	rjmp	.+352    	; 0x662 <__mulsf3+0x1e8>
     502:	2d 84       	ldd	r2, Y+13	; 0x0d
     504:	3e 84       	ldd	r3, Y+14	; 0x0e
     506:	4f 84       	ldd	r4, Y+15	; 0x0f
     508:	58 88       	ldd	r5, Y+16	; 0x10
     50a:	6d 88       	ldd	r6, Y+21	; 0x15
     50c:	7e 88       	ldd	r7, Y+22	; 0x16
     50e:	8f 88       	ldd	r8, Y+23	; 0x17
     510:	98 8c       	ldd	r9, Y+24	; 0x18
     512:	ee 24       	eor	r14, r14
     514:	ff 24       	eor	r15, r15
     516:	87 01       	movw	r16, r14
     518:	aa 24       	eor	r10, r10
     51a:	bb 24       	eor	r11, r11
     51c:	65 01       	movw	r12, r10
     51e:	40 e0       	ldi	r20, 0x00	; 0
     520:	50 e0       	ldi	r21, 0x00	; 0
     522:	60 e0       	ldi	r22, 0x00	; 0
     524:	70 e0       	ldi	r23, 0x00	; 0
     526:	e0 e0       	ldi	r30, 0x00	; 0
     528:	f0 e0       	ldi	r31, 0x00	; 0
     52a:	c1 01       	movw	r24, r2
     52c:	81 70       	andi	r24, 0x01	; 1
     52e:	90 70       	andi	r25, 0x00	; 0
     530:	89 2b       	or	r24, r25
     532:	e9 f0       	breq	.+58     	; 0x56e <__mulsf3+0xf4>
     534:	e6 0c       	add	r14, r6
     536:	f7 1c       	adc	r15, r7
     538:	08 1d       	adc	r16, r8
     53a:	19 1d       	adc	r17, r9
     53c:	9a 01       	movw	r18, r20
     53e:	ab 01       	movw	r20, r22
     540:	2a 0d       	add	r18, r10
     542:	3b 1d       	adc	r19, r11
     544:	4c 1d       	adc	r20, r12
     546:	5d 1d       	adc	r21, r13
     548:	80 e0       	ldi	r24, 0x00	; 0
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	a0 e0       	ldi	r26, 0x00	; 0
     54e:	b0 e0       	ldi	r27, 0x00	; 0
     550:	e6 14       	cp	r14, r6
     552:	f7 04       	cpc	r15, r7
     554:	08 05       	cpc	r16, r8
     556:	19 05       	cpc	r17, r9
     558:	20 f4       	brcc	.+8      	; 0x562 <__mulsf3+0xe8>
     55a:	81 e0       	ldi	r24, 0x01	; 1
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	a0 e0       	ldi	r26, 0x00	; 0
     560:	b0 e0       	ldi	r27, 0x00	; 0
     562:	ba 01       	movw	r22, r20
     564:	a9 01       	movw	r20, r18
     566:	48 0f       	add	r20, r24
     568:	59 1f       	adc	r21, r25
     56a:	6a 1f       	adc	r22, r26
     56c:	7b 1f       	adc	r23, r27
     56e:	aa 0c       	add	r10, r10
     570:	bb 1c       	adc	r11, r11
     572:	cc 1c       	adc	r12, r12
     574:	dd 1c       	adc	r13, r13
     576:	97 fe       	sbrs	r9, 7
     578:	08 c0       	rjmp	.+16     	; 0x58a <__mulsf3+0x110>
     57a:	81 e0       	ldi	r24, 0x01	; 1
     57c:	90 e0       	ldi	r25, 0x00	; 0
     57e:	a0 e0       	ldi	r26, 0x00	; 0
     580:	b0 e0       	ldi	r27, 0x00	; 0
     582:	a8 2a       	or	r10, r24
     584:	b9 2a       	or	r11, r25
     586:	ca 2a       	or	r12, r26
     588:	db 2a       	or	r13, r27
     58a:	31 96       	adiw	r30, 0x01	; 1
     58c:	e0 32       	cpi	r30, 0x20	; 32
     58e:	f1 05       	cpc	r31, r1
     590:	49 f0       	breq	.+18     	; 0x5a4 <__mulsf3+0x12a>
     592:	66 0c       	add	r6, r6
     594:	77 1c       	adc	r7, r7
     596:	88 1c       	adc	r8, r8
     598:	99 1c       	adc	r9, r9
     59a:	56 94       	lsr	r5
     59c:	47 94       	ror	r4
     59e:	37 94       	ror	r3
     5a0:	27 94       	ror	r2
     5a2:	c3 cf       	rjmp	.-122    	; 0x52a <__mulsf3+0xb0>
     5a4:	fa 85       	ldd	r31, Y+10	; 0x0a
     5a6:	ea 89       	ldd	r30, Y+18	; 0x12
     5a8:	2b 89       	ldd	r18, Y+19	; 0x13
     5aa:	3c 89       	ldd	r19, Y+20	; 0x14
     5ac:	8b 85       	ldd	r24, Y+11	; 0x0b
     5ae:	9c 85       	ldd	r25, Y+12	; 0x0c
     5b0:	28 0f       	add	r18, r24
     5b2:	39 1f       	adc	r19, r25
     5b4:	2e 5f       	subi	r18, 0xFE	; 254
     5b6:	3f 4f       	sbci	r19, 0xFF	; 255
     5b8:	17 c0       	rjmp	.+46     	; 0x5e8 <__mulsf3+0x16e>
     5ba:	ca 01       	movw	r24, r20
     5bc:	81 70       	andi	r24, 0x01	; 1
     5be:	90 70       	andi	r25, 0x00	; 0
     5c0:	89 2b       	or	r24, r25
     5c2:	61 f0       	breq	.+24     	; 0x5dc <__mulsf3+0x162>
     5c4:	16 95       	lsr	r17
     5c6:	07 95       	ror	r16
     5c8:	f7 94       	ror	r15
     5ca:	e7 94       	ror	r14
     5cc:	80 e0       	ldi	r24, 0x00	; 0
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	a0 e0       	ldi	r26, 0x00	; 0
     5d2:	b0 e8       	ldi	r27, 0x80	; 128
     5d4:	e8 2a       	or	r14, r24
     5d6:	f9 2a       	or	r15, r25
     5d8:	0a 2b       	or	r16, r26
     5da:	1b 2b       	or	r17, r27
     5dc:	76 95       	lsr	r23
     5de:	67 95       	ror	r22
     5e0:	57 95       	ror	r21
     5e2:	47 95       	ror	r20
     5e4:	2f 5f       	subi	r18, 0xFF	; 255
     5e6:	3f 4f       	sbci	r19, 0xFF	; 255
     5e8:	77 fd       	sbrc	r23, 7
     5ea:	e7 cf       	rjmp	.-50     	; 0x5ba <__mulsf3+0x140>
     5ec:	0c c0       	rjmp	.+24     	; 0x606 <__mulsf3+0x18c>
     5ee:	44 0f       	add	r20, r20
     5f0:	55 1f       	adc	r21, r21
     5f2:	66 1f       	adc	r22, r22
     5f4:	77 1f       	adc	r23, r23
     5f6:	17 fd       	sbrc	r17, 7
     5f8:	41 60       	ori	r20, 0x01	; 1
     5fa:	ee 0c       	add	r14, r14
     5fc:	ff 1c       	adc	r15, r15
     5fe:	00 1f       	adc	r16, r16
     600:	11 1f       	adc	r17, r17
     602:	21 50       	subi	r18, 0x01	; 1
     604:	30 40       	sbci	r19, 0x00	; 0
     606:	40 30       	cpi	r20, 0x00	; 0
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	59 07       	cpc	r21, r25
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	69 07       	cpc	r22, r25
     610:	90 e4       	ldi	r25, 0x40	; 64
     612:	79 07       	cpc	r23, r25
     614:	60 f3       	brcs	.-40     	; 0x5ee <__mulsf3+0x174>
     616:	2b 8f       	std	Y+27, r18	; 0x1b
     618:	3c 8f       	std	Y+28, r19	; 0x1c
     61a:	db 01       	movw	r26, r22
     61c:	ca 01       	movw	r24, r20
     61e:	8f 77       	andi	r24, 0x7F	; 127
     620:	90 70       	andi	r25, 0x00	; 0
     622:	a0 70       	andi	r26, 0x00	; 0
     624:	b0 70       	andi	r27, 0x00	; 0
     626:	80 34       	cpi	r24, 0x40	; 64
     628:	91 05       	cpc	r25, r1
     62a:	a1 05       	cpc	r26, r1
     62c:	b1 05       	cpc	r27, r1
     62e:	61 f4       	brne	.+24     	; 0x648 <__mulsf3+0x1ce>
     630:	47 fd       	sbrc	r20, 7
     632:	0a c0       	rjmp	.+20     	; 0x648 <__mulsf3+0x1ce>
     634:	e1 14       	cp	r14, r1
     636:	f1 04       	cpc	r15, r1
     638:	01 05       	cpc	r16, r1
     63a:	11 05       	cpc	r17, r1
     63c:	29 f0       	breq	.+10     	; 0x648 <__mulsf3+0x1ce>
     63e:	40 5c       	subi	r20, 0xC0	; 192
     640:	5f 4f       	sbci	r21, 0xFF	; 255
     642:	6f 4f       	sbci	r22, 0xFF	; 255
     644:	7f 4f       	sbci	r23, 0xFF	; 255
     646:	40 78       	andi	r20, 0x80	; 128
     648:	1a 8e       	std	Y+26, r1	; 0x1a
     64a:	fe 17       	cp	r31, r30
     64c:	11 f0       	breq	.+4      	; 0x652 <__mulsf3+0x1d8>
     64e:	81 e0       	ldi	r24, 0x01	; 1
     650:	8a 8f       	std	Y+26, r24	; 0x1a
     652:	4d 8f       	std	Y+29, r20	; 0x1d
     654:	5e 8f       	std	Y+30, r21	; 0x1e
     656:	6f 8f       	std	Y+31, r22	; 0x1f
     658:	78 a3       	std	Y+32, r23	; 0x20
     65a:	83 e0       	ldi	r24, 0x03	; 3
     65c:	89 8f       	std	Y+25, r24	; 0x19
     65e:	ce 01       	movw	r24, r28
     660:	49 96       	adiw	r24, 0x19	; 25
     662:	0e 94 bd 05 	call	0xb7a	; 0xb7a <__pack_f>
     666:	a0 96       	adiw	r28, 0x20	; 32
     668:	e2 e1       	ldi	r30, 0x12	; 18
     66a:	0c 94 a8 1e 	jmp	0x3d50	; 0x3d50 <__epilogue_restores__>

0000066e <__divsf3>:
     66e:	a8 e1       	ldi	r26, 0x18	; 24
     670:	b0 e0       	ldi	r27, 0x00	; 0
     672:	ed e3       	ldi	r30, 0x3D	; 61
     674:	f3 e0       	ldi	r31, 0x03	; 3
     676:	0c 94 94 1e 	jmp	0x3d28	; 0x3d28 <__prologue_saves__+0x10>
     67a:	69 83       	std	Y+1, r22	; 0x01
     67c:	7a 83       	std	Y+2, r23	; 0x02
     67e:	8b 83       	std	Y+3, r24	; 0x03
     680:	9c 83       	std	Y+4, r25	; 0x04
     682:	2d 83       	std	Y+5, r18	; 0x05
     684:	3e 83       	std	Y+6, r19	; 0x06
     686:	4f 83       	std	Y+7, r20	; 0x07
     688:	58 87       	std	Y+8, r21	; 0x08
     68a:	b9 e0       	ldi	r27, 0x09	; 9
     68c:	eb 2e       	mov	r14, r27
     68e:	f1 2c       	mov	r15, r1
     690:	ec 0e       	add	r14, r28
     692:	fd 1e       	adc	r15, r29
     694:	ce 01       	movw	r24, r28
     696:	01 96       	adiw	r24, 0x01	; 1
     698:	b7 01       	movw	r22, r14
     69a:	0e 94 92 06 	call	0xd24	; 0xd24 <__unpack_f>
     69e:	8e 01       	movw	r16, r28
     6a0:	0f 5e       	subi	r16, 0xEF	; 239
     6a2:	1f 4f       	sbci	r17, 0xFF	; 255
     6a4:	ce 01       	movw	r24, r28
     6a6:	05 96       	adiw	r24, 0x05	; 5
     6a8:	b8 01       	movw	r22, r16
     6aa:	0e 94 92 06 	call	0xd24	; 0xd24 <__unpack_f>
     6ae:	29 85       	ldd	r18, Y+9	; 0x09
     6b0:	22 30       	cpi	r18, 0x02	; 2
     6b2:	08 f4       	brcc	.+2      	; 0x6b6 <__divsf3+0x48>
     6b4:	7e c0       	rjmp	.+252    	; 0x7b2 <__divsf3+0x144>
     6b6:	39 89       	ldd	r19, Y+17	; 0x11
     6b8:	32 30       	cpi	r19, 0x02	; 2
     6ba:	10 f4       	brcc	.+4      	; 0x6c0 <__divsf3+0x52>
     6bc:	b8 01       	movw	r22, r16
     6be:	7c c0       	rjmp	.+248    	; 0x7b8 <__divsf3+0x14a>
     6c0:	8a 85       	ldd	r24, Y+10	; 0x0a
     6c2:	9a 89       	ldd	r25, Y+18	; 0x12
     6c4:	89 27       	eor	r24, r25
     6c6:	8a 87       	std	Y+10, r24	; 0x0a
     6c8:	24 30       	cpi	r18, 0x04	; 4
     6ca:	11 f0       	breq	.+4      	; 0x6d0 <__divsf3+0x62>
     6cc:	22 30       	cpi	r18, 0x02	; 2
     6ce:	31 f4       	brne	.+12     	; 0x6dc <__divsf3+0x6e>
     6d0:	23 17       	cp	r18, r19
     6d2:	09 f0       	breq	.+2      	; 0x6d6 <__divsf3+0x68>
     6d4:	6e c0       	rjmp	.+220    	; 0x7b2 <__divsf3+0x144>
     6d6:	62 ea       	ldi	r22, 0xA2	; 162
     6d8:	72 e0       	ldi	r23, 0x02	; 2
     6da:	6e c0       	rjmp	.+220    	; 0x7b8 <__divsf3+0x14a>
     6dc:	34 30       	cpi	r19, 0x04	; 4
     6de:	39 f4       	brne	.+14     	; 0x6ee <__divsf3+0x80>
     6e0:	1d 86       	std	Y+13, r1	; 0x0d
     6e2:	1e 86       	std	Y+14, r1	; 0x0e
     6e4:	1f 86       	std	Y+15, r1	; 0x0f
     6e6:	18 8a       	std	Y+16, r1	; 0x10
     6e8:	1c 86       	std	Y+12, r1	; 0x0c
     6ea:	1b 86       	std	Y+11, r1	; 0x0b
     6ec:	04 c0       	rjmp	.+8      	; 0x6f6 <__divsf3+0x88>
     6ee:	32 30       	cpi	r19, 0x02	; 2
     6f0:	21 f4       	brne	.+8      	; 0x6fa <__divsf3+0x8c>
     6f2:	84 e0       	ldi	r24, 0x04	; 4
     6f4:	89 87       	std	Y+9, r24	; 0x09
     6f6:	b7 01       	movw	r22, r14
     6f8:	5f c0       	rjmp	.+190    	; 0x7b8 <__divsf3+0x14a>
     6fa:	2b 85       	ldd	r18, Y+11	; 0x0b
     6fc:	3c 85       	ldd	r19, Y+12	; 0x0c
     6fe:	8b 89       	ldd	r24, Y+19	; 0x13
     700:	9c 89       	ldd	r25, Y+20	; 0x14
     702:	28 1b       	sub	r18, r24
     704:	39 0b       	sbc	r19, r25
     706:	3c 87       	std	Y+12, r19	; 0x0c
     708:	2b 87       	std	Y+11, r18	; 0x0b
     70a:	ed 84       	ldd	r14, Y+13	; 0x0d
     70c:	fe 84       	ldd	r15, Y+14	; 0x0e
     70e:	0f 85       	ldd	r16, Y+15	; 0x0f
     710:	18 89       	ldd	r17, Y+16	; 0x10
     712:	ad 88       	ldd	r10, Y+21	; 0x15
     714:	be 88       	ldd	r11, Y+22	; 0x16
     716:	cf 88       	ldd	r12, Y+23	; 0x17
     718:	d8 8c       	ldd	r13, Y+24	; 0x18
     71a:	ea 14       	cp	r14, r10
     71c:	fb 04       	cpc	r15, r11
     71e:	0c 05       	cpc	r16, r12
     720:	1d 05       	cpc	r17, r13
     722:	40 f4       	brcc	.+16     	; 0x734 <__divsf3+0xc6>
     724:	ee 0c       	add	r14, r14
     726:	ff 1c       	adc	r15, r15
     728:	00 1f       	adc	r16, r16
     72a:	11 1f       	adc	r17, r17
     72c:	21 50       	subi	r18, 0x01	; 1
     72e:	30 40       	sbci	r19, 0x00	; 0
     730:	3c 87       	std	Y+12, r19	; 0x0c
     732:	2b 87       	std	Y+11, r18	; 0x0b
     734:	20 e0       	ldi	r18, 0x00	; 0
     736:	30 e0       	ldi	r19, 0x00	; 0
     738:	40 e0       	ldi	r20, 0x00	; 0
     73a:	50 e0       	ldi	r21, 0x00	; 0
     73c:	80 e0       	ldi	r24, 0x00	; 0
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	a0 e0       	ldi	r26, 0x00	; 0
     742:	b0 e4       	ldi	r27, 0x40	; 64
     744:	60 e0       	ldi	r22, 0x00	; 0
     746:	70 e0       	ldi	r23, 0x00	; 0
     748:	ea 14       	cp	r14, r10
     74a:	fb 04       	cpc	r15, r11
     74c:	0c 05       	cpc	r16, r12
     74e:	1d 05       	cpc	r17, r13
     750:	40 f0       	brcs	.+16     	; 0x762 <__divsf3+0xf4>
     752:	28 2b       	or	r18, r24
     754:	39 2b       	or	r19, r25
     756:	4a 2b       	or	r20, r26
     758:	5b 2b       	or	r21, r27
     75a:	ea 18       	sub	r14, r10
     75c:	fb 08       	sbc	r15, r11
     75e:	0c 09       	sbc	r16, r12
     760:	1d 09       	sbc	r17, r13
     762:	b6 95       	lsr	r27
     764:	a7 95       	ror	r26
     766:	97 95       	ror	r25
     768:	87 95       	ror	r24
     76a:	ee 0c       	add	r14, r14
     76c:	ff 1c       	adc	r15, r15
     76e:	00 1f       	adc	r16, r16
     770:	11 1f       	adc	r17, r17
     772:	6f 5f       	subi	r22, 0xFF	; 255
     774:	7f 4f       	sbci	r23, 0xFF	; 255
     776:	6f 31       	cpi	r22, 0x1F	; 31
     778:	71 05       	cpc	r23, r1
     77a:	31 f7       	brne	.-52     	; 0x748 <__divsf3+0xda>
     77c:	da 01       	movw	r26, r20
     77e:	c9 01       	movw	r24, r18
     780:	8f 77       	andi	r24, 0x7F	; 127
     782:	90 70       	andi	r25, 0x00	; 0
     784:	a0 70       	andi	r26, 0x00	; 0
     786:	b0 70       	andi	r27, 0x00	; 0
     788:	80 34       	cpi	r24, 0x40	; 64
     78a:	91 05       	cpc	r25, r1
     78c:	a1 05       	cpc	r26, r1
     78e:	b1 05       	cpc	r27, r1
     790:	61 f4       	brne	.+24     	; 0x7aa <__divsf3+0x13c>
     792:	27 fd       	sbrc	r18, 7
     794:	0a c0       	rjmp	.+20     	; 0x7aa <__divsf3+0x13c>
     796:	e1 14       	cp	r14, r1
     798:	f1 04       	cpc	r15, r1
     79a:	01 05       	cpc	r16, r1
     79c:	11 05       	cpc	r17, r1
     79e:	29 f0       	breq	.+10     	; 0x7aa <__divsf3+0x13c>
     7a0:	20 5c       	subi	r18, 0xC0	; 192
     7a2:	3f 4f       	sbci	r19, 0xFF	; 255
     7a4:	4f 4f       	sbci	r20, 0xFF	; 255
     7a6:	5f 4f       	sbci	r21, 0xFF	; 255
     7a8:	20 78       	andi	r18, 0x80	; 128
     7aa:	2d 87       	std	Y+13, r18	; 0x0d
     7ac:	3e 87       	std	Y+14, r19	; 0x0e
     7ae:	4f 87       	std	Y+15, r20	; 0x0f
     7b0:	58 8b       	std	Y+16, r21	; 0x10
     7b2:	be 01       	movw	r22, r28
     7b4:	67 5f       	subi	r22, 0xF7	; 247
     7b6:	7f 4f       	sbci	r23, 0xFF	; 255
     7b8:	cb 01       	movw	r24, r22
     7ba:	0e 94 bd 05 	call	0xb7a	; 0xb7a <__pack_f>
     7be:	68 96       	adiw	r28, 0x18	; 24
     7c0:	ea e0       	ldi	r30, 0x0A	; 10
     7c2:	0c 94 b0 1e 	jmp	0x3d60	; 0x3d60 <__epilogue_restores__+0x10>

000007c6 <__gtsf2>:
     7c6:	a8 e1       	ldi	r26, 0x18	; 24
     7c8:	b0 e0       	ldi	r27, 0x00	; 0
     7ca:	e9 ee       	ldi	r30, 0xE9	; 233
     7cc:	f3 e0       	ldi	r31, 0x03	; 3
     7ce:	0c 94 98 1e 	jmp	0x3d30	; 0x3d30 <__prologue_saves__+0x18>
     7d2:	69 83       	std	Y+1, r22	; 0x01
     7d4:	7a 83       	std	Y+2, r23	; 0x02
     7d6:	8b 83       	std	Y+3, r24	; 0x03
     7d8:	9c 83       	std	Y+4, r25	; 0x04
     7da:	2d 83       	std	Y+5, r18	; 0x05
     7dc:	3e 83       	std	Y+6, r19	; 0x06
     7de:	4f 83       	std	Y+7, r20	; 0x07
     7e0:	58 87       	std	Y+8, r21	; 0x08
     7e2:	89 e0       	ldi	r24, 0x09	; 9
     7e4:	e8 2e       	mov	r14, r24
     7e6:	f1 2c       	mov	r15, r1
     7e8:	ec 0e       	add	r14, r28
     7ea:	fd 1e       	adc	r15, r29
     7ec:	ce 01       	movw	r24, r28
     7ee:	01 96       	adiw	r24, 0x01	; 1
     7f0:	b7 01       	movw	r22, r14
     7f2:	0e 94 92 06 	call	0xd24	; 0xd24 <__unpack_f>
     7f6:	8e 01       	movw	r16, r28
     7f8:	0f 5e       	subi	r16, 0xEF	; 239
     7fa:	1f 4f       	sbci	r17, 0xFF	; 255
     7fc:	ce 01       	movw	r24, r28
     7fe:	05 96       	adiw	r24, 0x05	; 5
     800:	b8 01       	movw	r22, r16
     802:	0e 94 92 06 	call	0xd24	; 0xd24 <__unpack_f>
     806:	89 85       	ldd	r24, Y+9	; 0x09
     808:	82 30       	cpi	r24, 0x02	; 2
     80a:	40 f0       	brcs	.+16     	; 0x81c <__gtsf2+0x56>
     80c:	89 89       	ldd	r24, Y+17	; 0x11
     80e:	82 30       	cpi	r24, 0x02	; 2
     810:	28 f0       	brcs	.+10     	; 0x81c <__gtsf2+0x56>
     812:	c7 01       	movw	r24, r14
     814:	b8 01       	movw	r22, r16
     816:	0e 94 0a 07 	call	0xe14	; 0xe14 <__fpcmp_parts_f>
     81a:	01 c0       	rjmp	.+2      	; 0x81e <__gtsf2+0x58>
     81c:	8f ef       	ldi	r24, 0xFF	; 255
     81e:	68 96       	adiw	r28, 0x18	; 24
     820:	e6 e0       	ldi	r30, 0x06	; 6
     822:	0c 94 b4 1e 	jmp	0x3d68	; 0x3d68 <__epilogue_restores__+0x18>

00000826 <__gesf2>:
     826:	a8 e1       	ldi	r26, 0x18	; 24
     828:	b0 e0       	ldi	r27, 0x00	; 0
     82a:	e9 e1       	ldi	r30, 0x19	; 25
     82c:	f4 e0       	ldi	r31, 0x04	; 4
     82e:	0c 94 98 1e 	jmp	0x3d30	; 0x3d30 <__prologue_saves__+0x18>
     832:	69 83       	std	Y+1, r22	; 0x01
     834:	7a 83       	std	Y+2, r23	; 0x02
     836:	8b 83       	std	Y+3, r24	; 0x03
     838:	9c 83       	std	Y+4, r25	; 0x04
     83a:	2d 83       	std	Y+5, r18	; 0x05
     83c:	3e 83       	std	Y+6, r19	; 0x06
     83e:	4f 83       	std	Y+7, r20	; 0x07
     840:	58 87       	std	Y+8, r21	; 0x08
     842:	89 e0       	ldi	r24, 0x09	; 9
     844:	e8 2e       	mov	r14, r24
     846:	f1 2c       	mov	r15, r1
     848:	ec 0e       	add	r14, r28
     84a:	fd 1e       	adc	r15, r29
     84c:	ce 01       	movw	r24, r28
     84e:	01 96       	adiw	r24, 0x01	; 1
     850:	b7 01       	movw	r22, r14
     852:	0e 94 92 06 	call	0xd24	; 0xd24 <__unpack_f>
     856:	8e 01       	movw	r16, r28
     858:	0f 5e       	subi	r16, 0xEF	; 239
     85a:	1f 4f       	sbci	r17, 0xFF	; 255
     85c:	ce 01       	movw	r24, r28
     85e:	05 96       	adiw	r24, 0x05	; 5
     860:	b8 01       	movw	r22, r16
     862:	0e 94 92 06 	call	0xd24	; 0xd24 <__unpack_f>
     866:	89 85       	ldd	r24, Y+9	; 0x09
     868:	82 30       	cpi	r24, 0x02	; 2
     86a:	40 f0       	brcs	.+16     	; 0x87c <__stack+0x1d>
     86c:	89 89       	ldd	r24, Y+17	; 0x11
     86e:	82 30       	cpi	r24, 0x02	; 2
     870:	28 f0       	brcs	.+10     	; 0x87c <__stack+0x1d>
     872:	c7 01       	movw	r24, r14
     874:	b8 01       	movw	r22, r16
     876:	0e 94 0a 07 	call	0xe14	; 0xe14 <__fpcmp_parts_f>
     87a:	01 c0       	rjmp	.+2      	; 0x87e <__stack+0x1f>
     87c:	8f ef       	ldi	r24, 0xFF	; 255
     87e:	68 96       	adiw	r28, 0x18	; 24
     880:	e6 e0       	ldi	r30, 0x06	; 6
     882:	0c 94 b4 1e 	jmp	0x3d68	; 0x3d68 <__epilogue_restores__+0x18>

00000886 <__floatsisf>:
     886:	a8 e0       	ldi	r26, 0x08	; 8
     888:	b0 e0       	ldi	r27, 0x00	; 0
     88a:	e9 e4       	ldi	r30, 0x49	; 73
     88c:	f4 e0       	ldi	r31, 0x04	; 4
     88e:	0c 94 95 1e 	jmp	0x3d2a	; 0x3d2a <__prologue_saves__+0x12>
     892:	9b 01       	movw	r18, r22
     894:	ac 01       	movw	r20, r24
     896:	83 e0       	ldi	r24, 0x03	; 3
     898:	89 83       	std	Y+1, r24	; 0x01
     89a:	da 01       	movw	r26, r20
     89c:	c9 01       	movw	r24, r18
     89e:	88 27       	eor	r24, r24
     8a0:	b7 fd       	sbrc	r27, 7
     8a2:	83 95       	inc	r24
     8a4:	99 27       	eor	r25, r25
     8a6:	aa 27       	eor	r26, r26
     8a8:	bb 27       	eor	r27, r27
     8aa:	b8 2e       	mov	r11, r24
     8ac:	21 15       	cp	r18, r1
     8ae:	31 05       	cpc	r19, r1
     8b0:	41 05       	cpc	r20, r1
     8b2:	51 05       	cpc	r21, r1
     8b4:	19 f4       	brne	.+6      	; 0x8bc <__floatsisf+0x36>
     8b6:	82 e0       	ldi	r24, 0x02	; 2
     8b8:	89 83       	std	Y+1, r24	; 0x01
     8ba:	3a c0       	rjmp	.+116    	; 0x930 <__floatsisf+0xaa>
     8bc:	88 23       	and	r24, r24
     8be:	a9 f0       	breq	.+42     	; 0x8ea <__floatsisf+0x64>
     8c0:	20 30       	cpi	r18, 0x00	; 0
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	38 07       	cpc	r19, r24
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	48 07       	cpc	r20, r24
     8ca:	80 e8       	ldi	r24, 0x80	; 128
     8cc:	58 07       	cpc	r21, r24
     8ce:	29 f4       	brne	.+10     	; 0x8da <__floatsisf+0x54>
     8d0:	60 e0       	ldi	r22, 0x00	; 0
     8d2:	70 e0       	ldi	r23, 0x00	; 0
     8d4:	80 e0       	ldi	r24, 0x00	; 0
     8d6:	9f ec       	ldi	r25, 0xCF	; 207
     8d8:	30 c0       	rjmp	.+96     	; 0x93a <__floatsisf+0xb4>
     8da:	ee 24       	eor	r14, r14
     8dc:	ff 24       	eor	r15, r15
     8de:	87 01       	movw	r16, r14
     8e0:	e2 1a       	sub	r14, r18
     8e2:	f3 0a       	sbc	r15, r19
     8e4:	04 0b       	sbc	r16, r20
     8e6:	15 0b       	sbc	r17, r21
     8e8:	02 c0       	rjmp	.+4      	; 0x8ee <__floatsisf+0x68>
     8ea:	79 01       	movw	r14, r18
     8ec:	8a 01       	movw	r16, r20
     8ee:	8e e1       	ldi	r24, 0x1E	; 30
     8f0:	c8 2e       	mov	r12, r24
     8f2:	d1 2c       	mov	r13, r1
     8f4:	dc 82       	std	Y+4, r13	; 0x04
     8f6:	cb 82       	std	Y+3, r12	; 0x03
     8f8:	ed 82       	std	Y+5, r14	; 0x05
     8fa:	fe 82       	std	Y+6, r15	; 0x06
     8fc:	0f 83       	std	Y+7, r16	; 0x07
     8fe:	18 87       	std	Y+8, r17	; 0x08
     900:	c8 01       	movw	r24, r16
     902:	b7 01       	movw	r22, r14
     904:	0e 94 6e 05 	call	0xadc	; 0xadc <__clzsi2>
     908:	01 97       	sbiw	r24, 0x01	; 1
     90a:	18 16       	cp	r1, r24
     90c:	19 06       	cpc	r1, r25
     90e:	84 f4       	brge	.+32     	; 0x930 <__floatsisf+0xaa>
     910:	08 2e       	mov	r0, r24
     912:	04 c0       	rjmp	.+8      	; 0x91c <__floatsisf+0x96>
     914:	ee 0c       	add	r14, r14
     916:	ff 1c       	adc	r15, r15
     918:	00 1f       	adc	r16, r16
     91a:	11 1f       	adc	r17, r17
     91c:	0a 94       	dec	r0
     91e:	d2 f7       	brpl	.-12     	; 0x914 <__floatsisf+0x8e>
     920:	ed 82       	std	Y+5, r14	; 0x05
     922:	fe 82       	std	Y+6, r15	; 0x06
     924:	0f 83       	std	Y+7, r16	; 0x07
     926:	18 87       	std	Y+8, r17	; 0x08
     928:	c8 1a       	sub	r12, r24
     92a:	d9 0a       	sbc	r13, r25
     92c:	dc 82       	std	Y+4, r13	; 0x04
     92e:	cb 82       	std	Y+3, r12	; 0x03
     930:	ba 82       	std	Y+2, r11	; 0x02
     932:	ce 01       	movw	r24, r28
     934:	01 96       	adiw	r24, 0x01	; 1
     936:	0e 94 bd 05 	call	0xb7a	; 0xb7a <__pack_f>
     93a:	28 96       	adiw	r28, 0x08	; 8
     93c:	e9 e0       	ldi	r30, 0x09	; 9
     93e:	0c 94 b1 1e 	jmp	0x3d62	; 0x3d62 <__epilogue_restores__+0x12>

00000942 <__fixsfsi>:
     942:	ac e0       	ldi	r26, 0x0C	; 12
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e7 ea       	ldi	r30, 0xA7	; 167
     948:	f4 e0       	ldi	r31, 0x04	; 4
     94a:	0c 94 9c 1e 	jmp	0x3d38	; 0x3d38 <__prologue_saves__+0x20>
     94e:	69 83       	std	Y+1, r22	; 0x01
     950:	7a 83       	std	Y+2, r23	; 0x02
     952:	8b 83       	std	Y+3, r24	; 0x03
     954:	9c 83       	std	Y+4, r25	; 0x04
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	be 01       	movw	r22, r28
     95c:	6b 5f       	subi	r22, 0xFB	; 251
     95e:	7f 4f       	sbci	r23, 0xFF	; 255
     960:	0e 94 92 06 	call	0xd24	; 0xd24 <__unpack_f>
     964:	8d 81       	ldd	r24, Y+5	; 0x05
     966:	82 30       	cpi	r24, 0x02	; 2
     968:	61 f1       	breq	.+88     	; 0x9c2 <__fixsfsi+0x80>
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	50 f1       	brcs	.+84     	; 0x9c2 <__fixsfsi+0x80>
     96e:	84 30       	cpi	r24, 0x04	; 4
     970:	21 f4       	brne	.+8      	; 0x97a <__fixsfsi+0x38>
     972:	8e 81       	ldd	r24, Y+6	; 0x06
     974:	88 23       	and	r24, r24
     976:	51 f1       	breq	.+84     	; 0x9cc <__fixsfsi+0x8a>
     978:	2e c0       	rjmp	.+92     	; 0x9d6 <__fixsfsi+0x94>
     97a:	2f 81       	ldd	r18, Y+7	; 0x07
     97c:	38 85       	ldd	r19, Y+8	; 0x08
     97e:	37 fd       	sbrc	r19, 7
     980:	20 c0       	rjmp	.+64     	; 0x9c2 <__fixsfsi+0x80>
     982:	6e 81       	ldd	r22, Y+6	; 0x06
     984:	2f 31       	cpi	r18, 0x1F	; 31
     986:	31 05       	cpc	r19, r1
     988:	1c f0       	brlt	.+6      	; 0x990 <__fixsfsi+0x4e>
     98a:	66 23       	and	r22, r22
     98c:	f9 f0       	breq	.+62     	; 0x9cc <__fixsfsi+0x8a>
     98e:	23 c0       	rjmp	.+70     	; 0x9d6 <__fixsfsi+0x94>
     990:	8e e1       	ldi	r24, 0x1E	; 30
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	82 1b       	sub	r24, r18
     996:	93 0b       	sbc	r25, r19
     998:	29 85       	ldd	r18, Y+9	; 0x09
     99a:	3a 85       	ldd	r19, Y+10	; 0x0a
     99c:	4b 85       	ldd	r20, Y+11	; 0x0b
     99e:	5c 85       	ldd	r21, Y+12	; 0x0c
     9a0:	04 c0       	rjmp	.+8      	; 0x9aa <__fixsfsi+0x68>
     9a2:	56 95       	lsr	r21
     9a4:	47 95       	ror	r20
     9a6:	37 95       	ror	r19
     9a8:	27 95       	ror	r18
     9aa:	8a 95       	dec	r24
     9ac:	d2 f7       	brpl	.-12     	; 0x9a2 <__fixsfsi+0x60>
     9ae:	66 23       	and	r22, r22
     9b0:	b1 f0       	breq	.+44     	; 0x9de <__fixsfsi+0x9c>
     9b2:	50 95       	com	r21
     9b4:	40 95       	com	r20
     9b6:	30 95       	com	r19
     9b8:	21 95       	neg	r18
     9ba:	3f 4f       	sbci	r19, 0xFF	; 255
     9bc:	4f 4f       	sbci	r20, 0xFF	; 255
     9be:	5f 4f       	sbci	r21, 0xFF	; 255
     9c0:	0e c0       	rjmp	.+28     	; 0x9de <__fixsfsi+0x9c>
     9c2:	20 e0       	ldi	r18, 0x00	; 0
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	40 e0       	ldi	r20, 0x00	; 0
     9c8:	50 e0       	ldi	r21, 0x00	; 0
     9ca:	09 c0       	rjmp	.+18     	; 0x9de <__fixsfsi+0x9c>
     9cc:	2f ef       	ldi	r18, 0xFF	; 255
     9ce:	3f ef       	ldi	r19, 0xFF	; 255
     9d0:	4f ef       	ldi	r20, 0xFF	; 255
     9d2:	5f e7       	ldi	r21, 0x7F	; 127
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <__fixsfsi+0x9c>
     9d6:	20 e0       	ldi	r18, 0x00	; 0
     9d8:	30 e0       	ldi	r19, 0x00	; 0
     9da:	40 e0       	ldi	r20, 0x00	; 0
     9dc:	50 e8       	ldi	r21, 0x80	; 128
     9de:	b9 01       	movw	r22, r18
     9e0:	ca 01       	movw	r24, r20
     9e2:	2c 96       	adiw	r28, 0x0c	; 12
     9e4:	e2 e0       	ldi	r30, 0x02	; 2
     9e6:	0c 94 b8 1e 	jmp	0x3d70	; 0x3d70 <__epilogue_restores__+0x20>

000009ea <__floatunsisf>:
     9ea:	a8 e0       	ldi	r26, 0x08	; 8
     9ec:	b0 e0       	ldi	r27, 0x00	; 0
     9ee:	eb ef       	ldi	r30, 0xFB	; 251
     9f0:	f4 e0       	ldi	r31, 0x04	; 4
     9f2:	0c 94 94 1e 	jmp	0x3d28	; 0x3d28 <__prologue_saves__+0x10>
     9f6:	7b 01       	movw	r14, r22
     9f8:	8c 01       	movw	r16, r24
     9fa:	61 15       	cp	r22, r1
     9fc:	71 05       	cpc	r23, r1
     9fe:	81 05       	cpc	r24, r1
     a00:	91 05       	cpc	r25, r1
     a02:	19 f4       	brne	.+6      	; 0xa0a <__floatunsisf+0x20>
     a04:	82 e0       	ldi	r24, 0x02	; 2
     a06:	89 83       	std	Y+1, r24	; 0x01
     a08:	60 c0       	rjmp	.+192    	; 0xaca <__floatunsisf+0xe0>
     a0a:	83 e0       	ldi	r24, 0x03	; 3
     a0c:	89 83       	std	Y+1, r24	; 0x01
     a0e:	8e e1       	ldi	r24, 0x1E	; 30
     a10:	c8 2e       	mov	r12, r24
     a12:	d1 2c       	mov	r13, r1
     a14:	dc 82       	std	Y+4, r13	; 0x04
     a16:	cb 82       	std	Y+3, r12	; 0x03
     a18:	ed 82       	std	Y+5, r14	; 0x05
     a1a:	fe 82       	std	Y+6, r15	; 0x06
     a1c:	0f 83       	std	Y+7, r16	; 0x07
     a1e:	18 87       	std	Y+8, r17	; 0x08
     a20:	c8 01       	movw	r24, r16
     a22:	b7 01       	movw	r22, r14
     a24:	0e 94 6e 05 	call	0xadc	; 0xadc <__clzsi2>
     a28:	fc 01       	movw	r30, r24
     a2a:	31 97       	sbiw	r30, 0x01	; 1
     a2c:	f7 ff       	sbrs	r31, 7
     a2e:	3b c0       	rjmp	.+118    	; 0xaa6 <__floatunsisf+0xbc>
     a30:	22 27       	eor	r18, r18
     a32:	33 27       	eor	r19, r19
     a34:	2e 1b       	sub	r18, r30
     a36:	3f 0b       	sbc	r19, r31
     a38:	57 01       	movw	r10, r14
     a3a:	68 01       	movw	r12, r16
     a3c:	02 2e       	mov	r0, r18
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__floatunsisf+0x5e>
     a40:	d6 94       	lsr	r13
     a42:	c7 94       	ror	r12
     a44:	b7 94       	ror	r11
     a46:	a7 94       	ror	r10
     a48:	0a 94       	dec	r0
     a4a:	d2 f7       	brpl	.-12     	; 0xa40 <__floatunsisf+0x56>
     a4c:	40 e0       	ldi	r20, 0x00	; 0
     a4e:	50 e0       	ldi	r21, 0x00	; 0
     a50:	60 e0       	ldi	r22, 0x00	; 0
     a52:	70 e0       	ldi	r23, 0x00	; 0
     a54:	81 e0       	ldi	r24, 0x01	; 1
     a56:	90 e0       	ldi	r25, 0x00	; 0
     a58:	a0 e0       	ldi	r26, 0x00	; 0
     a5a:	b0 e0       	ldi	r27, 0x00	; 0
     a5c:	04 c0       	rjmp	.+8      	; 0xa66 <__floatunsisf+0x7c>
     a5e:	88 0f       	add	r24, r24
     a60:	99 1f       	adc	r25, r25
     a62:	aa 1f       	adc	r26, r26
     a64:	bb 1f       	adc	r27, r27
     a66:	2a 95       	dec	r18
     a68:	d2 f7       	brpl	.-12     	; 0xa5e <__floatunsisf+0x74>
     a6a:	01 97       	sbiw	r24, 0x01	; 1
     a6c:	a1 09       	sbc	r26, r1
     a6e:	b1 09       	sbc	r27, r1
     a70:	8e 21       	and	r24, r14
     a72:	9f 21       	and	r25, r15
     a74:	a0 23       	and	r26, r16
     a76:	b1 23       	and	r27, r17
     a78:	00 97       	sbiw	r24, 0x00	; 0
     a7a:	a1 05       	cpc	r26, r1
     a7c:	b1 05       	cpc	r27, r1
     a7e:	21 f0       	breq	.+8      	; 0xa88 <__floatunsisf+0x9e>
     a80:	41 e0       	ldi	r20, 0x01	; 1
     a82:	50 e0       	ldi	r21, 0x00	; 0
     a84:	60 e0       	ldi	r22, 0x00	; 0
     a86:	70 e0       	ldi	r23, 0x00	; 0
     a88:	4a 29       	or	r20, r10
     a8a:	5b 29       	or	r21, r11
     a8c:	6c 29       	or	r22, r12
     a8e:	7d 29       	or	r23, r13
     a90:	4d 83       	std	Y+5, r20	; 0x05
     a92:	5e 83       	std	Y+6, r21	; 0x06
     a94:	6f 83       	std	Y+7, r22	; 0x07
     a96:	78 87       	std	Y+8, r23	; 0x08
     a98:	8e e1       	ldi	r24, 0x1E	; 30
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	8e 1b       	sub	r24, r30
     a9e:	9f 0b       	sbc	r25, r31
     aa0:	9c 83       	std	Y+4, r25	; 0x04
     aa2:	8b 83       	std	Y+3, r24	; 0x03
     aa4:	12 c0       	rjmp	.+36     	; 0xaca <__floatunsisf+0xe0>
     aa6:	30 97       	sbiw	r30, 0x00	; 0
     aa8:	81 f0       	breq	.+32     	; 0xaca <__floatunsisf+0xe0>
     aaa:	0e 2e       	mov	r0, r30
     aac:	04 c0       	rjmp	.+8      	; 0xab6 <__floatunsisf+0xcc>
     aae:	ee 0c       	add	r14, r14
     ab0:	ff 1c       	adc	r15, r15
     ab2:	00 1f       	adc	r16, r16
     ab4:	11 1f       	adc	r17, r17
     ab6:	0a 94       	dec	r0
     ab8:	d2 f7       	brpl	.-12     	; 0xaae <__floatunsisf+0xc4>
     aba:	ed 82       	std	Y+5, r14	; 0x05
     abc:	fe 82       	std	Y+6, r15	; 0x06
     abe:	0f 83       	std	Y+7, r16	; 0x07
     ac0:	18 87       	std	Y+8, r17	; 0x08
     ac2:	ce 1a       	sub	r12, r30
     ac4:	df 0a       	sbc	r13, r31
     ac6:	dc 82       	std	Y+4, r13	; 0x04
     ac8:	cb 82       	std	Y+3, r12	; 0x03
     aca:	1a 82       	std	Y+2, r1	; 0x02
     acc:	ce 01       	movw	r24, r28
     ace:	01 96       	adiw	r24, 0x01	; 1
     ad0:	0e 94 bd 05 	call	0xb7a	; 0xb7a <__pack_f>
     ad4:	28 96       	adiw	r28, 0x08	; 8
     ad6:	ea e0       	ldi	r30, 0x0A	; 10
     ad8:	0c 94 b0 1e 	jmp	0x3d60	; 0x3d60 <__epilogue_restores__+0x10>

00000adc <__clzsi2>:
     adc:	ef 92       	push	r14
     ade:	ff 92       	push	r15
     ae0:	0f 93       	push	r16
     ae2:	1f 93       	push	r17
     ae4:	7b 01       	movw	r14, r22
     ae6:	8c 01       	movw	r16, r24
     ae8:	80 e0       	ldi	r24, 0x00	; 0
     aea:	e8 16       	cp	r14, r24
     aec:	80 e0       	ldi	r24, 0x00	; 0
     aee:	f8 06       	cpc	r15, r24
     af0:	81 e0       	ldi	r24, 0x01	; 1
     af2:	08 07       	cpc	r16, r24
     af4:	80 e0       	ldi	r24, 0x00	; 0
     af6:	18 07       	cpc	r17, r24
     af8:	88 f4       	brcc	.+34     	; 0xb1c <__clzsi2+0x40>
     afa:	8f ef       	ldi	r24, 0xFF	; 255
     afc:	e8 16       	cp	r14, r24
     afe:	f1 04       	cpc	r15, r1
     b00:	01 05       	cpc	r16, r1
     b02:	11 05       	cpc	r17, r1
     b04:	31 f0       	breq	.+12     	; 0xb12 <__clzsi2+0x36>
     b06:	28 f0       	brcs	.+10     	; 0xb12 <__clzsi2+0x36>
     b08:	88 e0       	ldi	r24, 0x08	; 8
     b0a:	90 e0       	ldi	r25, 0x00	; 0
     b0c:	a0 e0       	ldi	r26, 0x00	; 0
     b0e:	b0 e0       	ldi	r27, 0x00	; 0
     b10:	17 c0       	rjmp	.+46     	; 0xb40 <__clzsi2+0x64>
     b12:	80 e0       	ldi	r24, 0x00	; 0
     b14:	90 e0       	ldi	r25, 0x00	; 0
     b16:	a0 e0       	ldi	r26, 0x00	; 0
     b18:	b0 e0       	ldi	r27, 0x00	; 0
     b1a:	12 c0       	rjmp	.+36     	; 0xb40 <__clzsi2+0x64>
     b1c:	80 e0       	ldi	r24, 0x00	; 0
     b1e:	e8 16       	cp	r14, r24
     b20:	80 e0       	ldi	r24, 0x00	; 0
     b22:	f8 06       	cpc	r15, r24
     b24:	80 e0       	ldi	r24, 0x00	; 0
     b26:	08 07       	cpc	r16, r24
     b28:	81 e0       	ldi	r24, 0x01	; 1
     b2a:	18 07       	cpc	r17, r24
     b2c:	28 f0       	brcs	.+10     	; 0xb38 <__clzsi2+0x5c>
     b2e:	88 e1       	ldi	r24, 0x18	; 24
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	a0 e0       	ldi	r26, 0x00	; 0
     b34:	b0 e0       	ldi	r27, 0x00	; 0
     b36:	04 c0       	rjmp	.+8      	; 0xb40 <__clzsi2+0x64>
     b38:	80 e1       	ldi	r24, 0x10	; 16
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	a0 e0       	ldi	r26, 0x00	; 0
     b3e:	b0 e0       	ldi	r27, 0x00	; 0
     b40:	20 e2       	ldi	r18, 0x20	; 32
     b42:	30 e0       	ldi	r19, 0x00	; 0
     b44:	40 e0       	ldi	r20, 0x00	; 0
     b46:	50 e0       	ldi	r21, 0x00	; 0
     b48:	28 1b       	sub	r18, r24
     b4a:	39 0b       	sbc	r19, r25
     b4c:	4a 0b       	sbc	r20, r26
     b4e:	5b 0b       	sbc	r21, r27
     b50:	04 c0       	rjmp	.+8      	; 0xb5a <__clzsi2+0x7e>
     b52:	16 95       	lsr	r17
     b54:	07 95       	ror	r16
     b56:	f7 94       	ror	r15
     b58:	e7 94       	ror	r14
     b5a:	8a 95       	dec	r24
     b5c:	d2 f7       	brpl	.-12     	; 0xb52 <__clzsi2+0x76>
     b5e:	f7 01       	movw	r30, r14
     b60:	e6 55       	subi	r30, 0x56	; 86
     b62:	fd 4f       	sbci	r31, 0xFD	; 253
     b64:	80 81       	ld	r24, Z
     b66:	28 1b       	sub	r18, r24
     b68:	31 09       	sbc	r19, r1
     b6a:	41 09       	sbc	r20, r1
     b6c:	51 09       	sbc	r21, r1
     b6e:	c9 01       	movw	r24, r18
     b70:	1f 91       	pop	r17
     b72:	0f 91       	pop	r16
     b74:	ff 90       	pop	r15
     b76:	ef 90       	pop	r14
     b78:	08 95       	ret

00000b7a <__pack_f>:
     b7a:	df 92       	push	r13
     b7c:	ef 92       	push	r14
     b7e:	ff 92       	push	r15
     b80:	0f 93       	push	r16
     b82:	1f 93       	push	r17
     b84:	fc 01       	movw	r30, r24
     b86:	e4 80       	ldd	r14, Z+4	; 0x04
     b88:	f5 80       	ldd	r15, Z+5	; 0x05
     b8a:	06 81       	ldd	r16, Z+6	; 0x06
     b8c:	17 81       	ldd	r17, Z+7	; 0x07
     b8e:	d1 80       	ldd	r13, Z+1	; 0x01
     b90:	80 81       	ld	r24, Z
     b92:	82 30       	cpi	r24, 0x02	; 2
     b94:	48 f4       	brcc	.+18     	; 0xba8 <__pack_f+0x2e>
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	a0 e1       	ldi	r26, 0x10	; 16
     b9c:	b0 e0       	ldi	r27, 0x00	; 0
     b9e:	e8 2a       	or	r14, r24
     ba0:	f9 2a       	or	r15, r25
     ba2:	0a 2b       	or	r16, r26
     ba4:	1b 2b       	or	r17, r27
     ba6:	a5 c0       	rjmp	.+330    	; 0xcf2 <__pack_f+0x178>
     ba8:	84 30       	cpi	r24, 0x04	; 4
     baa:	09 f4       	brne	.+2      	; 0xbae <__pack_f+0x34>
     bac:	9f c0       	rjmp	.+318    	; 0xcec <__pack_f+0x172>
     bae:	82 30       	cpi	r24, 0x02	; 2
     bb0:	21 f4       	brne	.+8      	; 0xbba <__pack_f+0x40>
     bb2:	ee 24       	eor	r14, r14
     bb4:	ff 24       	eor	r15, r15
     bb6:	87 01       	movw	r16, r14
     bb8:	05 c0       	rjmp	.+10     	; 0xbc4 <__pack_f+0x4a>
     bba:	e1 14       	cp	r14, r1
     bbc:	f1 04       	cpc	r15, r1
     bbe:	01 05       	cpc	r16, r1
     bc0:	11 05       	cpc	r17, r1
     bc2:	19 f4       	brne	.+6      	; 0xbca <__pack_f+0x50>
     bc4:	e0 e0       	ldi	r30, 0x00	; 0
     bc6:	f0 e0       	ldi	r31, 0x00	; 0
     bc8:	96 c0       	rjmp	.+300    	; 0xcf6 <__pack_f+0x17c>
     bca:	62 81       	ldd	r22, Z+2	; 0x02
     bcc:	73 81       	ldd	r23, Z+3	; 0x03
     bce:	9f ef       	ldi	r25, 0xFF	; 255
     bd0:	62 38       	cpi	r22, 0x82	; 130
     bd2:	79 07       	cpc	r23, r25
     bd4:	0c f0       	brlt	.+2      	; 0xbd8 <__pack_f+0x5e>
     bd6:	5b c0       	rjmp	.+182    	; 0xc8e <__pack_f+0x114>
     bd8:	22 e8       	ldi	r18, 0x82	; 130
     bda:	3f ef       	ldi	r19, 0xFF	; 255
     bdc:	26 1b       	sub	r18, r22
     bde:	37 0b       	sbc	r19, r23
     be0:	2a 31       	cpi	r18, 0x1A	; 26
     be2:	31 05       	cpc	r19, r1
     be4:	2c f0       	brlt	.+10     	; 0xbf0 <__pack_f+0x76>
     be6:	20 e0       	ldi	r18, 0x00	; 0
     be8:	30 e0       	ldi	r19, 0x00	; 0
     bea:	40 e0       	ldi	r20, 0x00	; 0
     bec:	50 e0       	ldi	r21, 0x00	; 0
     bee:	2a c0       	rjmp	.+84     	; 0xc44 <__pack_f+0xca>
     bf0:	b8 01       	movw	r22, r16
     bf2:	a7 01       	movw	r20, r14
     bf4:	02 2e       	mov	r0, r18
     bf6:	04 c0       	rjmp	.+8      	; 0xc00 <__pack_f+0x86>
     bf8:	76 95       	lsr	r23
     bfa:	67 95       	ror	r22
     bfc:	57 95       	ror	r21
     bfe:	47 95       	ror	r20
     c00:	0a 94       	dec	r0
     c02:	d2 f7       	brpl	.-12     	; 0xbf8 <__pack_f+0x7e>
     c04:	81 e0       	ldi	r24, 0x01	; 1
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	a0 e0       	ldi	r26, 0x00	; 0
     c0a:	b0 e0       	ldi	r27, 0x00	; 0
     c0c:	04 c0       	rjmp	.+8      	; 0xc16 <__pack_f+0x9c>
     c0e:	88 0f       	add	r24, r24
     c10:	99 1f       	adc	r25, r25
     c12:	aa 1f       	adc	r26, r26
     c14:	bb 1f       	adc	r27, r27
     c16:	2a 95       	dec	r18
     c18:	d2 f7       	brpl	.-12     	; 0xc0e <__pack_f+0x94>
     c1a:	01 97       	sbiw	r24, 0x01	; 1
     c1c:	a1 09       	sbc	r26, r1
     c1e:	b1 09       	sbc	r27, r1
     c20:	8e 21       	and	r24, r14
     c22:	9f 21       	and	r25, r15
     c24:	a0 23       	and	r26, r16
     c26:	b1 23       	and	r27, r17
     c28:	00 97       	sbiw	r24, 0x00	; 0
     c2a:	a1 05       	cpc	r26, r1
     c2c:	b1 05       	cpc	r27, r1
     c2e:	21 f0       	breq	.+8      	; 0xc38 <__pack_f+0xbe>
     c30:	81 e0       	ldi	r24, 0x01	; 1
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	a0 e0       	ldi	r26, 0x00	; 0
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	9a 01       	movw	r18, r20
     c3a:	ab 01       	movw	r20, r22
     c3c:	28 2b       	or	r18, r24
     c3e:	39 2b       	or	r19, r25
     c40:	4a 2b       	or	r20, r26
     c42:	5b 2b       	or	r21, r27
     c44:	da 01       	movw	r26, r20
     c46:	c9 01       	movw	r24, r18
     c48:	8f 77       	andi	r24, 0x7F	; 127
     c4a:	90 70       	andi	r25, 0x00	; 0
     c4c:	a0 70       	andi	r26, 0x00	; 0
     c4e:	b0 70       	andi	r27, 0x00	; 0
     c50:	80 34       	cpi	r24, 0x40	; 64
     c52:	91 05       	cpc	r25, r1
     c54:	a1 05       	cpc	r26, r1
     c56:	b1 05       	cpc	r27, r1
     c58:	39 f4       	brne	.+14     	; 0xc68 <__pack_f+0xee>
     c5a:	27 ff       	sbrs	r18, 7
     c5c:	09 c0       	rjmp	.+18     	; 0xc70 <__pack_f+0xf6>
     c5e:	20 5c       	subi	r18, 0xC0	; 192
     c60:	3f 4f       	sbci	r19, 0xFF	; 255
     c62:	4f 4f       	sbci	r20, 0xFF	; 255
     c64:	5f 4f       	sbci	r21, 0xFF	; 255
     c66:	04 c0       	rjmp	.+8      	; 0xc70 <__pack_f+0xf6>
     c68:	21 5c       	subi	r18, 0xC1	; 193
     c6a:	3f 4f       	sbci	r19, 0xFF	; 255
     c6c:	4f 4f       	sbci	r20, 0xFF	; 255
     c6e:	5f 4f       	sbci	r21, 0xFF	; 255
     c70:	e0 e0       	ldi	r30, 0x00	; 0
     c72:	f0 e0       	ldi	r31, 0x00	; 0
     c74:	20 30       	cpi	r18, 0x00	; 0
     c76:	a0 e0       	ldi	r26, 0x00	; 0
     c78:	3a 07       	cpc	r19, r26
     c7a:	a0 e0       	ldi	r26, 0x00	; 0
     c7c:	4a 07       	cpc	r20, r26
     c7e:	a0 e4       	ldi	r26, 0x40	; 64
     c80:	5a 07       	cpc	r21, r26
     c82:	10 f0       	brcs	.+4      	; 0xc88 <__pack_f+0x10e>
     c84:	e1 e0       	ldi	r30, 0x01	; 1
     c86:	f0 e0       	ldi	r31, 0x00	; 0
     c88:	79 01       	movw	r14, r18
     c8a:	8a 01       	movw	r16, r20
     c8c:	27 c0       	rjmp	.+78     	; 0xcdc <__pack_f+0x162>
     c8e:	60 38       	cpi	r22, 0x80	; 128
     c90:	71 05       	cpc	r23, r1
     c92:	64 f5       	brge	.+88     	; 0xcec <__pack_f+0x172>
     c94:	fb 01       	movw	r30, r22
     c96:	e1 58       	subi	r30, 0x81	; 129
     c98:	ff 4f       	sbci	r31, 0xFF	; 255
     c9a:	d8 01       	movw	r26, r16
     c9c:	c7 01       	movw	r24, r14
     c9e:	8f 77       	andi	r24, 0x7F	; 127
     ca0:	90 70       	andi	r25, 0x00	; 0
     ca2:	a0 70       	andi	r26, 0x00	; 0
     ca4:	b0 70       	andi	r27, 0x00	; 0
     ca6:	80 34       	cpi	r24, 0x40	; 64
     ca8:	91 05       	cpc	r25, r1
     caa:	a1 05       	cpc	r26, r1
     cac:	b1 05       	cpc	r27, r1
     cae:	39 f4       	brne	.+14     	; 0xcbe <__pack_f+0x144>
     cb0:	e7 fe       	sbrs	r14, 7
     cb2:	0d c0       	rjmp	.+26     	; 0xcce <__pack_f+0x154>
     cb4:	80 e4       	ldi	r24, 0x40	; 64
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	a0 e0       	ldi	r26, 0x00	; 0
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	04 c0       	rjmp	.+8      	; 0xcc6 <__pack_f+0x14c>
     cbe:	8f e3       	ldi	r24, 0x3F	; 63
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	a0 e0       	ldi	r26, 0x00	; 0
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	e8 0e       	add	r14, r24
     cc8:	f9 1e       	adc	r15, r25
     cca:	0a 1f       	adc	r16, r26
     ccc:	1b 1f       	adc	r17, r27
     cce:	17 ff       	sbrs	r17, 7
     cd0:	05 c0       	rjmp	.+10     	; 0xcdc <__pack_f+0x162>
     cd2:	16 95       	lsr	r17
     cd4:	07 95       	ror	r16
     cd6:	f7 94       	ror	r15
     cd8:	e7 94       	ror	r14
     cda:	31 96       	adiw	r30, 0x01	; 1
     cdc:	87 e0       	ldi	r24, 0x07	; 7
     cde:	16 95       	lsr	r17
     ce0:	07 95       	ror	r16
     ce2:	f7 94       	ror	r15
     ce4:	e7 94       	ror	r14
     ce6:	8a 95       	dec	r24
     ce8:	d1 f7       	brne	.-12     	; 0xcde <__pack_f+0x164>
     cea:	05 c0       	rjmp	.+10     	; 0xcf6 <__pack_f+0x17c>
     cec:	ee 24       	eor	r14, r14
     cee:	ff 24       	eor	r15, r15
     cf0:	87 01       	movw	r16, r14
     cf2:	ef ef       	ldi	r30, 0xFF	; 255
     cf4:	f0 e0       	ldi	r31, 0x00	; 0
     cf6:	6e 2f       	mov	r22, r30
     cf8:	67 95       	ror	r22
     cfa:	66 27       	eor	r22, r22
     cfc:	67 95       	ror	r22
     cfe:	90 2f       	mov	r25, r16
     d00:	9f 77       	andi	r25, 0x7F	; 127
     d02:	d7 94       	ror	r13
     d04:	dd 24       	eor	r13, r13
     d06:	d7 94       	ror	r13
     d08:	8e 2f       	mov	r24, r30
     d0a:	86 95       	lsr	r24
     d0c:	49 2f       	mov	r20, r25
     d0e:	46 2b       	or	r20, r22
     d10:	58 2f       	mov	r21, r24
     d12:	5d 29       	or	r21, r13
     d14:	b7 01       	movw	r22, r14
     d16:	ca 01       	movw	r24, r20
     d18:	1f 91       	pop	r17
     d1a:	0f 91       	pop	r16
     d1c:	ff 90       	pop	r15
     d1e:	ef 90       	pop	r14
     d20:	df 90       	pop	r13
     d22:	08 95       	ret

00000d24 <__unpack_f>:
     d24:	fc 01       	movw	r30, r24
     d26:	db 01       	movw	r26, r22
     d28:	40 81       	ld	r20, Z
     d2a:	51 81       	ldd	r21, Z+1	; 0x01
     d2c:	22 81       	ldd	r18, Z+2	; 0x02
     d2e:	62 2f       	mov	r22, r18
     d30:	6f 77       	andi	r22, 0x7F	; 127
     d32:	70 e0       	ldi	r23, 0x00	; 0
     d34:	22 1f       	adc	r18, r18
     d36:	22 27       	eor	r18, r18
     d38:	22 1f       	adc	r18, r18
     d3a:	93 81       	ldd	r25, Z+3	; 0x03
     d3c:	89 2f       	mov	r24, r25
     d3e:	88 0f       	add	r24, r24
     d40:	82 2b       	or	r24, r18
     d42:	28 2f       	mov	r18, r24
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	99 1f       	adc	r25, r25
     d48:	99 27       	eor	r25, r25
     d4a:	99 1f       	adc	r25, r25
     d4c:	11 96       	adiw	r26, 0x01	; 1
     d4e:	9c 93       	st	X, r25
     d50:	11 97       	sbiw	r26, 0x01	; 1
     d52:	21 15       	cp	r18, r1
     d54:	31 05       	cpc	r19, r1
     d56:	a9 f5       	brne	.+106    	; 0xdc2 <__unpack_f+0x9e>
     d58:	41 15       	cp	r20, r1
     d5a:	51 05       	cpc	r21, r1
     d5c:	61 05       	cpc	r22, r1
     d5e:	71 05       	cpc	r23, r1
     d60:	11 f4       	brne	.+4      	; 0xd66 <__unpack_f+0x42>
     d62:	82 e0       	ldi	r24, 0x02	; 2
     d64:	37 c0       	rjmp	.+110    	; 0xdd4 <__unpack_f+0xb0>
     d66:	82 e8       	ldi	r24, 0x82	; 130
     d68:	9f ef       	ldi	r25, 0xFF	; 255
     d6a:	13 96       	adiw	r26, 0x03	; 3
     d6c:	9c 93       	st	X, r25
     d6e:	8e 93       	st	-X, r24
     d70:	12 97       	sbiw	r26, 0x02	; 2
     d72:	9a 01       	movw	r18, r20
     d74:	ab 01       	movw	r20, r22
     d76:	67 e0       	ldi	r22, 0x07	; 7
     d78:	22 0f       	add	r18, r18
     d7a:	33 1f       	adc	r19, r19
     d7c:	44 1f       	adc	r20, r20
     d7e:	55 1f       	adc	r21, r21
     d80:	6a 95       	dec	r22
     d82:	d1 f7       	brne	.-12     	; 0xd78 <__unpack_f+0x54>
     d84:	83 e0       	ldi	r24, 0x03	; 3
     d86:	8c 93       	st	X, r24
     d88:	0d c0       	rjmp	.+26     	; 0xda4 <__unpack_f+0x80>
     d8a:	22 0f       	add	r18, r18
     d8c:	33 1f       	adc	r19, r19
     d8e:	44 1f       	adc	r20, r20
     d90:	55 1f       	adc	r21, r21
     d92:	12 96       	adiw	r26, 0x02	; 2
     d94:	8d 91       	ld	r24, X+
     d96:	9c 91       	ld	r25, X
     d98:	13 97       	sbiw	r26, 0x03	; 3
     d9a:	01 97       	sbiw	r24, 0x01	; 1
     d9c:	13 96       	adiw	r26, 0x03	; 3
     d9e:	9c 93       	st	X, r25
     da0:	8e 93       	st	-X, r24
     da2:	12 97       	sbiw	r26, 0x02	; 2
     da4:	20 30       	cpi	r18, 0x00	; 0
     da6:	80 e0       	ldi	r24, 0x00	; 0
     da8:	38 07       	cpc	r19, r24
     daa:	80 e0       	ldi	r24, 0x00	; 0
     dac:	48 07       	cpc	r20, r24
     dae:	80 e4       	ldi	r24, 0x40	; 64
     db0:	58 07       	cpc	r21, r24
     db2:	58 f3       	brcs	.-42     	; 0xd8a <__unpack_f+0x66>
     db4:	14 96       	adiw	r26, 0x04	; 4
     db6:	2d 93       	st	X+, r18
     db8:	3d 93       	st	X+, r19
     dba:	4d 93       	st	X+, r20
     dbc:	5c 93       	st	X, r21
     dbe:	17 97       	sbiw	r26, 0x07	; 7
     dc0:	08 95       	ret
     dc2:	2f 3f       	cpi	r18, 0xFF	; 255
     dc4:	31 05       	cpc	r19, r1
     dc6:	79 f4       	brne	.+30     	; 0xde6 <__unpack_f+0xc2>
     dc8:	41 15       	cp	r20, r1
     dca:	51 05       	cpc	r21, r1
     dcc:	61 05       	cpc	r22, r1
     dce:	71 05       	cpc	r23, r1
     dd0:	19 f4       	brne	.+6      	; 0xdd8 <__unpack_f+0xb4>
     dd2:	84 e0       	ldi	r24, 0x04	; 4
     dd4:	8c 93       	st	X, r24
     dd6:	08 95       	ret
     dd8:	64 ff       	sbrs	r22, 4
     dda:	03 c0       	rjmp	.+6      	; 0xde2 <__unpack_f+0xbe>
     ddc:	81 e0       	ldi	r24, 0x01	; 1
     dde:	8c 93       	st	X, r24
     de0:	12 c0       	rjmp	.+36     	; 0xe06 <__unpack_f+0xe2>
     de2:	1c 92       	st	X, r1
     de4:	10 c0       	rjmp	.+32     	; 0xe06 <__unpack_f+0xe2>
     de6:	2f 57       	subi	r18, 0x7F	; 127
     de8:	30 40       	sbci	r19, 0x00	; 0
     dea:	13 96       	adiw	r26, 0x03	; 3
     dec:	3c 93       	st	X, r19
     dee:	2e 93       	st	-X, r18
     df0:	12 97       	sbiw	r26, 0x02	; 2
     df2:	83 e0       	ldi	r24, 0x03	; 3
     df4:	8c 93       	st	X, r24
     df6:	87 e0       	ldi	r24, 0x07	; 7
     df8:	44 0f       	add	r20, r20
     dfa:	55 1f       	adc	r21, r21
     dfc:	66 1f       	adc	r22, r22
     dfe:	77 1f       	adc	r23, r23
     e00:	8a 95       	dec	r24
     e02:	d1 f7       	brne	.-12     	; 0xdf8 <__unpack_f+0xd4>
     e04:	70 64       	ori	r23, 0x40	; 64
     e06:	14 96       	adiw	r26, 0x04	; 4
     e08:	4d 93       	st	X+, r20
     e0a:	5d 93       	st	X+, r21
     e0c:	6d 93       	st	X+, r22
     e0e:	7c 93       	st	X, r23
     e10:	17 97       	sbiw	r26, 0x07	; 7
     e12:	08 95       	ret

00000e14 <__fpcmp_parts_f>:
     e14:	1f 93       	push	r17
     e16:	dc 01       	movw	r26, r24
     e18:	fb 01       	movw	r30, r22
     e1a:	9c 91       	ld	r25, X
     e1c:	92 30       	cpi	r25, 0x02	; 2
     e1e:	08 f4       	brcc	.+2      	; 0xe22 <__fpcmp_parts_f+0xe>
     e20:	47 c0       	rjmp	.+142    	; 0xeb0 <__fpcmp_parts_f+0x9c>
     e22:	80 81       	ld	r24, Z
     e24:	82 30       	cpi	r24, 0x02	; 2
     e26:	08 f4       	brcc	.+2      	; 0xe2a <__fpcmp_parts_f+0x16>
     e28:	43 c0       	rjmp	.+134    	; 0xeb0 <__fpcmp_parts_f+0x9c>
     e2a:	94 30       	cpi	r25, 0x04	; 4
     e2c:	51 f4       	brne	.+20     	; 0xe42 <__fpcmp_parts_f+0x2e>
     e2e:	11 96       	adiw	r26, 0x01	; 1
     e30:	1c 91       	ld	r17, X
     e32:	84 30       	cpi	r24, 0x04	; 4
     e34:	99 f5       	brne	.+102    	; 0xe9c <__fpcmp_parts_f+0x88>
     e36:	81 81       	ldd	r24, Z+1	; 0x01
     e38:	68 2f       	mov	r22, r24
     e3a:	70 e0       	ldi	r23, 0x00	; 0
     e3c:	61 1b       	sub	r22, r17
     e3e:	71 09       	sbc	r23, r1
     e40:	3f c0       	rjmp	.+126    	; 0xec0 <__fpcmp_parts_f+0xac>
     e42:	84 30       	cpi	r24, 0x04	; 4
     e44:	21 f0       	breq	.+8      	; 0xe4e <__fpcmp_parts_f+0x3a>
     e46:	92 30       	cpi	r25, 0x02	; 2
     e48:	31 f4       	brne	.+12     	; 0xe56 <__fpcmp_parts_f+0x42>
     e4a:	82 30       	cpi	r24, 0x02	; 2
     e4c:	b9 f1       	breq	.+110    	; 0xebc <__fpcmp_parts_f+0xa8>
     e4e:	81 81       	ldd	r24, Z+1	; 0x01
     e50:	88 23       	and	r24, r24
     e52:	89 f1       	breq	.+98     	; 0xeb6 <__fpcmp_parts_f+0xa2>
     e54:	2d c0       	rjmp	.+90     	; 0xeb0 <__fpcmp_parts_f+0x9c>
     e56:	11 96       	adiw	r26, 0x01	; 1
     e58:	1c 91       	ld	r17, X
     e5a:	11 97       	sbiw	r26, 0x01	; 1
     e5c:	82 30       	cpi	r24, 0x02	; 2
     e5e:	f1 f0       	breq	.+60     	; 0xe9c <__fpcmp_parts_f+0x88>
     e60:	81 81       	ldd	r24, Z+1	; 0x01
     e62:	18 17       	cp	r17, r24
     e64:	d9 f4       	brne	.+54     	; 0xe9c <__fpcmp_parts_f+0x88>
     e66:	12 96       	adiw	r26, 0x02	; 2
     e68:	2d 91       	ld	r18, X+
     e6a:	3c 91       	ld	r19, X
     e6c:	13 97       	sbiw	r26, 0x03	; 3
     e6e:	82 81       	ldd	r24, Z+2	; 0x02
     e70:	93 81       	ldd	r25, Z+3	; 0x03
     e72:	82 17       	cp	r24, r18
     e74:	93 07       	cpc	r25, r19
     e76:	94 f0       	brlt	.+36     	; 0xe9c <__fpcmp_parts_f+0x88>
     e78:	28 17       	cp	r18, r24
     e7a:	39 07       	cpc	r19, r25
     e7c:	bc f0       	brlt	.+46     	; 0xeac <__fpcmp_parts_f+0x98>
     e7e:	14 96       	adiw	r26, 0x04	; 4
     e80:	8d 91       	ld	r24, X+
     e82:	9d 91       	ld	r25, X+
     e84:	0d 90       	ld	r0, X+
     e86:	bc 91       	ld	r27, X
     e88:	a0 2d       	mov	r26, r0
     e8a:	24 81       	ldd	r18, Z+4	; 0x04
     e8c:	35 81       	ldd	r19, Z+5	; 0x05
     e8e:	46 81       	ldd	r20, Z+6	; 0x06
     e90:	57 81       	ldd	r21, Z+7	; 0x07
     e92:	28 17       	cp	r18, r24
     e94:	39 07       	cpc	r19, r25
     e96:	4a 07       	cpc	r20, r26
     e98:	5b 07       	cpc	r21, r27
     e9a:	18 f4       	brcc	.+6      	; 0xea2 <__fpcmp_parts_f+0x8e>
     e9c:	11 23       	and	r17, r17
     e9e:	41 f0       	breq	.+16     	; 0xeb0 <__fpcmp_parts_f+0x9c>
     ea0:	0a c0       	rjmp	.+20     	; 0xeb6 <__fpcmp_parts_f+0xa2>
     ea2:	82 17       	cp	r24, r18
     ea4:	93 07       	cpc	r25, r19
     ea6:	a4 07       	cpc	r26, r20
     ea8:	b5 07       	cpc	r27, r21
     eaa:	40 f4       	brcc	.+16     	; 0xebc <__fpcmp_parts_f+0xa8>
     eac:	11 23       	and	r17, r17
     eae:	19 f0       	breq	.+6      	; 0xeb6 <__fpcmp_parts_f+0xa2>
     eb0:	61 e0       	ldi	r22, 0x01	; 1
     eb2:	70 e0       	ldi	r23, 0x00	; 0
     eb4:	05 c0       	rjmp	.+10     	; 0xec0 <__fpcmp_parts_f+0xac>
     eb6:	6f ef       	ldi	r22, 0xFF	; 255
     eb8:	7f ef       	ldi	r23, 0xFF	; 255
     eba:	02 c0       	rjmp	.+4      	; 0xec0 <__fpcmp_parts_f+0xac>
     ebc:	60 e0       	ldi	r22, 0x00	; 0
     ebe:	70 e0       	ldi	r23, 0x00	; 0
     ec0:	cb 01       	movw	r24, r22
     ec2:	1f 91       	pop	r17
     ec4:	08 95       	ret

00000ec6 <UART_Init>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling 
* Description     : UART initialization
*************************************************************/
enuErrorStatus_t UART_Init(void)
{
     ec6:	df 93       	push	r29
     ec8:	cf 93       	push	r28
     eca:	00 d0       	rcall	.+0      	; 0xecc <UART_Init+0x6>
     ecc:	00 d0       	rcall	.+0      	; 0xece <UART_Init+0x8>
     ece:	0f 92       	push	r0
     ed0:	cd b7       	in	r28, 0x3d	; 61
     ed2:	de b7       	in	r29, 0x3e	; 62
	/*Set the Baud rate*/
	uint16_t UBRRVAL=((F_CPU/(16L*UART_BAUDRATE))-1);
     ed4:	83 e3       	ldi	r24, 0x33	; 51
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	9d 83       	std	Y+5, r25	; 0x05
     eda:	8c 83       	std	Y+4, r24	; 0x04
	UBRRH_R=(uint8_t)(UBRRVAL>>8);
     edc:	e0 e4       	ldi	r30, 0x40	; 64
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	8c 81       	ldd	r24, Y+4	; 0x04
     ee2:	9d 81       	ldd	r25, Y+5	; 0x05
     ee4:	89 2f       	mov	r24, r25
     ee6:	99 27       	eor	r25, r25
     ee8:	80 83       	st	Z, r24
	UBRRL_R=(uint8_t)(UBRRVAL);
     eea:	e9 e2       	ldi	r30, 0x29	; 41
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	8c 81       	ldd	r24, Y+4	; 0x04
     ef0:	80 83       	st	Z, r24
	
	/*UART Transmitter and Receiver Enable*/
	UCSRB_R=(1<<TXEN_B)|(1<<RXEN_B);
     ef2:	ea e2       	ldi	r30, 0x2A	; 42
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	88 e1       	ldi	r24, 0x18	; 24
     ef8:	80 83       	st	Z, r24
	
	/* DATA BITS*/
	uint8_t data=UART_DATA_BITS;
     efa:	88 e0       	ldi	r24, 0x08	; 8
     efc:	8b 83       	std	Y+3, r24	; 0x03
	if(data==5)
     efe:	8b 81       	ldd	r24, Y+3	; 0x03
     f00:	85 30       	cpi	r24, 0x05	; 5
     f02:	79 f4       	brne	.+30     	; 0xf22 <UART_Init+0x5c>
	{
		CLEAR_BIT(UCSRC_R,UCSZ1_B);
     f04:	a0 e4       	ldi	r26, 0x40	; 64
     f06:	b0 e0       	ldi	r27, 0x00	; 0
     f08:	e0 e4       	ldi	r30, 0x40	; 64
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	80 81       	ld	r24, Z
     f0e:	8b 7f       	andi	r24, 0xFB	; 251
     f10:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRC_R,UCSZ0_B);
     f12:	a0 e4       	ldi	r26, 0x40	; 64
     f14:	b0 e0       	ldi	r27, 0x00	; 0
     f16:	e0 e4       	ldi	r30, 0x40	; 64
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	80 81       	ld	r24, Z
     f1c:	8d 7f       	andi	r24, 0xFD	; 253
     f1e:	8c 93       	st	X, r24
     f20:	4e c0       	rjmp	.+156    	; 0xfbe <UART_Init+0xf8>
	}else if(data==6)
     f22:	8b 81       	ldd	r24, Y+3	; 0x03
     f24:	86 30       	cpi	r24, 0x06	; 6
     f26:	79 f4       	brne	.+30     	; 0xf46 <UART_Init+0x80>
	{
		CLEAR_BIT(UCSRC_R,UCSZ1_B);
     f28:	a0 e4       	ldi	r26, 0x40	; 64
     f2a:	b0 e0       	ldi	r27, 0x00	; 0
     f2c:	e0 e4       	ldi	r30, 0x40	; 64
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	80 81       	ld	r24, Z
     f32:	8b 7f       	andi	r24, 0xFB	; 251
     f34:	8c 93       	st	X, r24
		SET_BIT(UCSRC_R,UCSZ0_B);		
     f36:	a0 e4       	ldi	r26, 0x40	; 64
     f38:	b0 e0       	ldi	r27, 0x00	; 0
     f3a:	e0 e4       	ldi	r30, 0x40	; 64
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	80 81       	ld	r24, Z
     f40:	82 60       	ori	r24, 0x02	; 2
     f42:	8c 93       	st	X, r24
     f44:	3c c0       	rjmp	.+120    	; 0xfbe <UART_Init+0xf8>
	}else if(data==7)
     f46:	8b 81       	ldd	r24, Y+3	; 0x03
     f48:	87 30       	cpi	r24, 0x07	; 7
     f4a:	79 f4       	brne	.+30     	; 0xf6a <UART_Init+0xa4>
	{
		SET_BIT(UCSRC_R,UCSZ1_B);
     f4c:	a0 e4       	ldi	r26, 0x40	; 64
     f4e:	b0 e0       	ldi	r27, 0x00	; 0
     f50:	e0 e4       	ldi	r30, 0x40	; 64
     f52:	f0 e0       	ldi	r31, 0x00	; 0
     f54:	80 81       	ld	r24, Z
     f56:	84 60       	ori	r24, 0x04	; 4
     f58:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRC_R,UCSZ0_B);		
     f5a:	a0 e4       	ldi	r26, 0x40	; 64
     f5c:	b0 e0       	ldi	r27, 0x00	; 0
     f5e:	e0 e4       	ldi	r30, 0x40	; 64
     f60:	f0 e0       	ldi	r31, 0x00	; 0
     f62:	80 81       	ld	r24, Z
     f64:	8d 7f       	andi	r24, 0xFD	; 253
     f66:	8c 93       	st	X, r24
     f68:	2a c0       	rjmp	.+84     	; 0xfbe <UART_Init+0xf8>
	}else if(data==8)
     f6a:	8b 81       	ldd	r24, Y+3	; 0x03
     f6c:	88 30       	cpi	r24, 0x08	; 8
     f6e:	79 f4       	brne	.+30     	; 0xf8e <UART_Init+0xc8>
	{
		SET_BIT(UCSRC_R,UCSZ1_B);
     f70:	a0 e4       	ldi	r26, 0x40	; 64
     f72:	b0 e0       	ldi	r27, 0x00	; 0
     f74:	e0 e4       	ldi	r30, 0x40	; 64
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	80 81       	ld	r24, Z
     f7a:	84 60       	ori	r24, 0x04	; 4
     f7c:	8c 93       	st	X, r24
		SET_BIT(UCSRC_R,UCSZ0_B);
     f7e:	a0 e4       	ldi	r26, 0x40	; 64
     f80:	b0 e0       	ldi	r27, 0x00	; 0
     f82:	e0 e4       	ldi	r30, 0x40	; 64
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	80 81       	ld	r24, Z
     f88:	82 60       	ori	r24, 0x02	; 2
     f8a:	8c 93       	st	X, r24
     f8c:	18 c0       	rjmp	.+48     	; 0xfbe <UART_Init+0xf8>
	}else if (data==9)
     f8e:	8b 81       	ldd	r24, Y+3	; 0x03
     f90:	89 30       	cpi	r24, 0x09	; 9
     f92:	a9 f4       	brne	.+42     	; 0xfbe <UART_Init+0xf8>
	{
		SET_BIT(UCSRB_R,UCSZ2_B);
     f94:	aa e2       	ldi	r26, 0x2A	; 42
     f96:	b0 e0       	ldi	r27, 0x00	; 0
     f98:	ea e2       	ldi	r30, 0x2A	; 42
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 81       	ld	r24, Z
     f9e:	84 60       	ori	r24, 0x04	; 4
     fa0:	8c 93       	st	X, r24
		SET_BIT(UCSRC_R,UCSZ1_B);
     fa2:	a0 e4       	ldi	r26, 0x40	; 64
     fa4:	b0 e0       	ldi	r27, 0x00	; 0
     fa6:	e0 e4       	ldi	r30, 0x40	; 64
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	80 81       	ld	r24, Z
     fac:	84 60       	ori	r24, 0x04	; 4
     fae:	8c 93       	st	X, r24
		SET_BIT(UCSRC_R,UCSZ0_B);		
     fb0:	a0 e4       	ldi	r26, 0x40	; 64
     fb2:	b0 e0       	ldi	r27, 0x00	; 0
     fb4:	e0 e4       	ldi	r30, 0x40	; 64
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	80 81       	ld	r24, Z
     fba:	82 60       	ori	r24, 0x02	; 2
     fbc:	8c 93       	st	X, r24
	}
	/*PARITY*/
	uint8_t parity=UART_PARITY_BIT;
     fbe:	1a 82       	std	Y+2, r1	; 0x02
	if(parity==0)
     fc0:	8a 81       	ldd	r24, Y+2	; 0x02
     fc2:	88 23       	and	r24, r24
     fc4:	79 f4       	brne	.+30     	; 0xfe4 <UART_Init+0x11e>
	{
		CLEAR_BIT(UCSRC_R,UPM1_B);
     fc6:	a0 e4       	ldi	r26, 0x40	; 64
     fc8:	b0 e0       	ldi	r27, 0x00	; 0
     fca:	e0 e4       	ldi	r30, 0x40	; 64
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	80 81       	ld	r24, Z
     fd0:	8f 7d       	andi	r24, 0xDF	; 223
     fd2:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRC_R,UPM0_B);
     fd4:	a0 e4       	ldi	r26, 0x40	; 64
     fd6:	b0 e0       	ldi	r27, 0x00	; 0
     fd8:	e0 e4       	ldi	r30, 0x40	; 64
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	80 81       	ld	r24, Z
     fde:	8f 7e       	andi	r24, 0xEF	; 239
     fe0:	8c 93       	st	X, r24
     fe2:	23 c0       	rjmp	.+70     	; 0x102a <UART_Init+0x164>
	}else if(parity==1)
     fe4:	8a 81       	ldd	r24, Y+2	; 0x02
     fe6:	81 30       	cpi	r24, 0x01	; 1
     fe8:	79 f4       	brne	.+30     	; 0x1008 <UART_Init+0x142>
	{
		SET_BIT(UCSRC_R,UPM1_B);
     fea:	a0 e4       	ldi	r26, 0x40	; 64
     fec:	b0 e0       	ldi	r27, 0x00	; 0
     fee:	e0 e4       	ldi	r30, 0x40	; 64
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	80 81       	ld	r24, Z
     ff4:	80 62       	ori	r24, 0x20	; 32
     ff6:	8c 93       	st	X, r24
		SET_BIT(UCSRC_R,UPM0_B);	
     ff8:	a0 e4       	ldi	r26, 0x40	; 64
     ffa:	b0 e0       	ldi	r27, 0x00	; 0
     ffc:	e0 e4       	ldi	r30, 0x40	; 64
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	80 81       	ld	r24, Z
    1002:	80 61       	ori	r24, 0x10	; 16
    1004:	8c 93       	st	X, r24
    1006:	11 c0       	rjmp	.+34     	; 0x102a <UART_Init+0x164>
	}else if(parity==2)
    1008:	8a 81       	ldd	r24, Y+2	; 0x02
    100a:	82 30       	cpi	r24, 0x02	; 2
    100c:	71 f4       	brne	.+28     	; 0x102a <UART_Init+0x164>
	{
		SET_BIT(UCSRC_R,UPM1_B);
    100e:	a0 e4       	ldi	r26, 0x40	; 64
    1010:	b0 e0       	ldi	r27, 0x00	; 0
    1012:	e0 e4       	ldi	r30, 0x40	; 64
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	80 81       	ld	r24, Z
    1018:	80 62       	ori	r24, 0x20	; 32
    101a:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRC_R,UPM0_B);
    101c:	a0 e4       	ldi	r26, 0x40	; 64
    101e:	b0 e0       	ldi	r27, 0x00	; 0
    1020:	e0 e4       	ldi	r30, 0x40	; 64
    1022:	f0 e0       	ldi	r31, 0x00	; 0
    1024:	80 81       	ld	r24, Z
    1026:	8f 7e       	andi	r24, 0xEF	; 239
    1028:	8c 93       	st	X, r24
	}
	/*STOP BITS*/
	uint8_t stop = UART_STOP_BITS;
    102a:	81 e0       	ldi	r24, 0x01	; 1
    102c:	89 83       	std	Y+1, r24	; 0x01
	if(stop==1)
    102e:	89 81       	ldd	r24, Y+1	; 0x01
    1030:	81 30       	cpi	r24, 0x01	; 1
    1032:	41 f4       	brne	.+16     	; 0x1044 <UART_Init+0x17e>
	{
		CLEAR_BIT(UCSRC_R,USBS_B);
    1034:	a0 e4       	ldi	r26, 0x40	; 64
    1036:	b0 e0       	ldi	r27, 0x00	; 0
    1038:	e0 e4       	ldi	r30, 0x40	; 64
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	80 81       	ld	r24, Z
    103e:	87 7f       	andi	r24, 0xF7	; 247
    1040:	8c 93       	st	X, r24
    1042:	0a c0       	rjmp	.+20     	; 0x1058 <UART_Init+0x192>
	}else if(stop==2)
    1044:	89 81       	ldd	r24, Y+1	; 0x01
    1046:	82 30       	cpi	r24, 0x02	; 2
    1048:	39 f4       	brne	.+14     	; 0x1058 <UART_Init+0x192>
	{
		SET_BIT(UCSRC_R,USBS_B);
    104a:	a0 e4       	ldi	r26, 0x40	; 64
    104c:	b0 e0       	ldi	r27, 0x00	; 0
    104e:	e0 e4       	ldi	r30, 0x40	; 64
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	80 81       	ld	r24, Z
    1054:	88 60       	ori	r24, 0x08	; 8
    1056:	8c 93       	st	X, r24
	}
	gError=E_OK;
    1058:	81 e0       	ldi	r24, 0x01	; 1
    105a:	80 93 c2 03 	sts	0x03C2, r24
	return gError;
    105e:	80 91 c2 03 	lds	r24, 0x03C2
}
    1062:	0f 90       	pop	r0
    1064:	0f 90       	pop	r0
    1066:	0f 90       	pop	r0
    1068:	0f 90       	pop	r0
    106a:	0f 90       	pop	r0
    106c:	cf 91       	pop	r28
    106e:	df 91       	pop	r29
    1070:	08 95       	ret

00001072 <UART_SendData>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling 
* Description     : Sending a data with UART
*************************************************************/
enuErrorStatus_t UART_SendData(uint16_t u16Data)
{
    1072:	df 93       	push	r29
    1074:	cf 93       	push	r28
    1076:	00 d0       	rcall	.+0      	; 0x1078 <UART_SendData+0x6>
    1078:	0f 92       	push	r0
    107a:	cd b7       	in	r28, 0x3d	; 61
    107c:	de b7       	in	r29, 0x3e	; 62
    107e:	9a 83       	std	Y+2, r25	; 0x02
    1080:	89 83       	std	Y+1, r24	; 0x01
	/* Return an E_ERROR if UART not initialized*/
	if(gError==E_ERROR)
    1082:	80 91 c2 03 	lds	r24, 0x03C2
    1086:	88 23       	and	r24, r24
    1088:	11 f4       	brne	.+4      	; 0x108e <UART_SendData+0x1c>
	{
		return E_ERROR;
    108a:	1b 82       	std	Y+3, r1	; 0x03
    108c:	1d c0       	rjmp	.+58     	; 0x10c8 <UART_SendData+0x56>
	}
	gError=E_OK;
    108e:	81 e0       	ldi	r24, 0x01	; 1
    1090:	80 93 c2 03 	sts	0x03C2, r24
	/*Wait for the empty flag to be set*/
	while(!GET_BIT(UCSRA_R,UDRE_B));
    1094:	eb e2       	ldi	r30, 0x2B	; 43
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	80 81       	ld	r24, Z
    109a:	88 2f       	mov	r24, r24
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	80 72       	andi	r24, 0x20	; 32
    10a0:	90 70       	andi	r25, 0x00	; 0
    10a2:	95 95       	asr	r25
    10a4:	87 95       	ror	r24
    10a6:	95 95       	asr	r25
    10a8:	87 95       	ror	r24
    10aa:	95 95       	asr	r25
    10ac:	87 95       	ror	r24
    10ae:	95 95       	asr	r25
    10b0:	87 95       	ror	r24
    10b2:	95 95       	asr	r25
    10b4:	87 95       	ror	r24
    10b6:	00 97       	sbiw	r24, 0x00	; 0
    10b8:	69 f3       	breq	.-38     	; 0x1094 <UART_SendData+0x22>
	UDR_R=u16Data;
    10ba:	ec e2       	ldi	r30, 0x2C	; 44
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	89 81       	ldd	r24, Y+1	; 0x01
    10c0:	80 83       	st	Z, r24
	return gError;
    10c2:	80 91 c2 03 	lds	r24, 0x03C2
    10c6:	8b 83       	std	Y+3, r24	; 0x03
    10c8:	8b 81       	ldd	r24, Y+3	; 0x03
}
    10ca:	0f 90       	pop	r0
    10cc:	0f 90       	pop	r0
    10ce:	0f 90       	pop	r0
    10d0:	cf 91       	pop	r28
    10d2:	df 91       	pop	r29
    10d4:	08 95       	ret

000010d6 <UART_ReceiveData>:
* Parameters (out): pu16Data
* Return Value    : enuErrorStatus_t - For error handling 
* Description     : Receiving a data with UART
*************************************************************/
enuErrorStatus_t UART_ReceiveData(uint16_t* pu16Data)
{
    10d6:	df 93       	push	r29
    10d8:	cf 93       	push	r28
    10da:	00 d0       	rcall	.+0      	; 0x10dc <UART_ReceiveData+0x6>
    10dc:	0f 92       	push	r0
    10de:	cd b7       	in	r28, 0x3d	; 61
    10e0:	de b7       	in	r29, 0x3e	; 62
    10e2:	9a 83       	std	Y+2, r25	; 0x02
    10e4:	89 83       	std	Y+1, r24	; 0x01
	if(gError==E_ERROR)
    10e6:	80 91 c2 03 	lds	r24, 0x03C2
    10ea:	88 23       	and	r24, r24
    10ec:	11 f4       	brne	.+4      	; 0x10f2 <UART_ReceiveData+0x1c>
	{
		return E_ERROR;
    10ee:	1b 82       	std	Y+3, r1	; 0x03
    10f0:	1a c0       	rjmp	.+52     	; 0x1126 <UART_ReceiveData+0x50>
	}
	gError=E_OK;
    10f2:	81 e0       	ldi	r24, 0x01	; 1
    10f4:	80 93 c2 03 	sts	0x03C2, r24
	/* Wait for the Receive complete flag to be set*/
	while(!GET_BIT(UCSRA_R,RXC_B));
    10f8:	eb e2       	ldi	r30, 0x2B	; 43
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	80 81       	ld	r24, Z
    10fe:	88 1f       	adc	r24, r24
    1100:	88 27       	eor	r24, r24
    1102:	88 1f       	adc	r24, r24
    1104:	88 2f       	mov	r24, r24
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	90 70       	andi	r25, 0x00	; 0
    110a:	00 97       	sbiw	r24, 0x00	; 0
    110c:	a9 f3       	breq	.-22     	; 0x10f8 <UART_ReceiveData+0x22>
	*pu16Data=UDR_R;
    110e:	ec e2       	ldi	r30, 0x2C	; 44
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	80 81       	ld	r24, Z
    1114:	88 2f       	mov	r24, r24
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	e9 81       	ldd	r30, Y+1	; 0x01
    111a:	fa 81       	ldd	r31, Y+2	; 0x02
    111c:	91 83       	std	Z+1, r25	; 0x01
    111e:	80 83       	st	Z, r24
	return gError;
    1120:	80 91 c2 03 	lds	r24, 0x03C2
    1124:	8b 83       	std	Y+3, r24	; 0x03
    1126:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1128:	0f 90       	pop	r0
    112a:	0f 90       	pop	r0
    112c:	0f 90       	pop	r0
    112e:	cf 91       	pop	r28
    1130:	df 91       	pop	r29
    1132:	08 95       	ret

00001134 <UART_RecieveDataNoBLOCK>:
* Parameters (out): pu16Data
* Return Value    : enuErrorStatus_t - For error handling 
* Description     : Receiving a data with UART without polling
*************************************************************/
enuErrorStatus_t UART_RecieveDataNoBLOCK(uint16_t* pu16Data)
{
    1134:	df 93       	push	r29
    1136:	cf 93       	push	r28
    1138:	00 d0       	rcall	.+0      	; 0x113a <UART_RecieveDataNoBLOCK+0x6>
    113a:	0f 92       	push	r0
    113c:	cd b7       	in	r28, 0x3d	; 61
    113e:	de b7       	in	r29, 0x3e	; 62
    1140:	9a 83       	std	Y+2, r25	; 0x02
    1142:	89 83       	std	Y+1, r24	; 0x01
	if(gError==E_ERROR)
    1144:	80 91 c2 03 	lds	r24, 0x03C2
    1148:	88 23       	and	r24, r24
    114a:	11 f4       	brne	.+4      	; 0x1150 <UART_RecieveDataNoBLOCK+0x1c>
	{
		return E_ERROR;
    114c:	1b 82       	std	Y+3, r1	; 0x03
    114e:	1a c0       	rjmp	.+52     	; 0x1184 <UART_RecieveDataNoBLOCK+0x50>
	}
	gError=E_OK;
    1150:	81 e0       	ldi	r24, 0x01	; 1
    1152:	80 93 c2 03 	sts	0x03C2, r24
	if(GET_BIT(UCSRA_R,RXC_B))
    1156:	eb e2       	ldi	r30, 0x2B	; 43
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	80 81       	ld	r24, Z
    115c:	88 1f       	adc	r24, r24
    115e:	88 27       	eor	r24, r24
    1160:	88 1f       	adc	r24, r24
    1162:	88 2f       	mov	r24, r24
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	90 70       	andi	r25, 0x00	; 0
    1168:	00 97       	sbiw	r24, 0x00	; 0
    116a:	49 f0       	breq	.+18     	; 0x117e <UART_RecieveDataNoBLOCK+0x4a>
	{
		*pu16Data=UDR_R;
    116c:	ec e2       	ldi	r30, 0x2C	; 44
    116e:	f0 e0       	ldi	r31, 0x00	; 0
    1170:	80 81       	ld	r24, Z
    1172:	88 2f       	mov	r24, r24
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	e9 81       	ldd	r30, Y+1	; 0x01
    1178:	fa 81       	ldd	r31, Y+2	; 0x02
    117a:	91 83       	std	Z+1, r25	; 0x01
    117c:	80 83       	st	Z, r24
	}
	return gError;
    117e:	80 91 c2 03 	lds	r24, 0x03C2
    1182:	8b 83       	std	Y+3, r24	; 0x03
    1184:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1186:	0f 90       	pop	r0
    1188:	0f 90       	pop	r0
    118a:	0f 90       	pop	r0
    118c:	cf 91       	pop	r28
    118e:	df 91       	pop	r29
    1190:	08 95       	ret

00001192 <UART_SendString>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling 
* Description     : Sending a string with UART
*************************************************************/
enuErrorStatus_t UART_SendString(uint8_t* pu8String)
{
    1192:	df 93       	push	r29
    1194:	cf 93       	push	r28
    1196:	00 d0       	rcall	.+0      	; 0x1198 <UART_SendString+0x6>
    1198:	00 d0       	rcall	.+0      	; 0x119a <UART_SendString+0x8>
    119a:	cd b7       	in	r28, 0x3d	; 61
    119c:	de b7       	in	r29, 0x3e	; 62
    119e:	9b 83       	std	Y+3, r25	; 0x03
    11a0:	8a 83       	std	Y+2, r24	; 0x02
	if(gError==E_ERROR)
    11a2:	80 91 c2 03 	lds	r24, 0x03C2
    11a6:	88 23       	and	r24, r24
    11a8:	11 f4       	brne	.+4      	; 0x11ae <UART_SendString+0x1c>
	{
		return E_ERROR;
    11aa:	1c 82       	std	Y+4, r1	; 0x04
    11ac:	27 c0       	rjmp	.+78     	; 0x11fc <UART_SendString+0x6a>
	}
	gError=E_OK;
    11ae:	81 e0       	ldi	r24, 0x01	; 1
    11b0:	80 93 c2 03 	sts	0x03C2, r24
	uint8_t i=0;
    11b4:	19 82       	std	Y+1, r1	; 0x01
	for(i=0;i<MAX_LEN;i++)
    11b6:	19 82       	std	Y+1, r1	; 0x01
    11b8:	1b c0       	rjmp	.+54     	; 0x11f0 <UART_SendString+0x5e>
	{
		UART_SendData(pu8String[i]);
    11ba:	89 81       	ldd	r24, Y+1	; 0x01
    11bc:	28 2f       	mov	r18, r24
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	8a 81       	ldd	r24, Y+2	; 0x02
    11c2:	9b 81       	ldd	r25, Y+3	; 0x03
    11c4:	fc 01       	movw	r30, r24
    11c6:	e2 0f       	add	r30, r18
    11c8:	f3 1f       	adc	r31, r19
    11ca:	80 81       	ld	r24, Z
    11cc:	88 2f       	mov	r24, r24
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	0e 94 39 08 	call	0x1072	; 0x1072 <UART_SendData>
		if(pu8String[i]==0)
    11d4:	89 81       	ldd	r24, Y+1	; 0x01
    11d6:	28 2f       	mov	r18, r24
    11d8:	30 e0       	ldi	r19, 0x00	; 0
    11da:	8a 81       	ldd	r24, Y+2	; 0x02
    11dc:	9b 81       	ldd	r25, Y+3	; 0x03
    11de:	fc 01       	movw	r30, r24
    11e0:	e2 0f       	add	r30, r18
    11e2:	f3 1f       	adc	r31, r19
    11e4:	80 81       	ld	r24, Z
    11e6:	88 23       	and	r24, r24
    11e8:	31 f0       	breq	.+12     	; 0x11f6 <UART_SendString+0x64>
	{
		return E_ERROR;
	}
	gError=E_OK;
	uint8_t i=0;
	for(i=0;i<MAX_LEN;i++)
    11ea:	89 81       	ldd	r24, Y+1	; 0x01
    11ec:	8f 5f       	subi	r24, 0xFF	; 255
    11ee:	89 83       	std	Y+1, r24	; 0x01
    11f0:	89 81       	ldd	r24, Y+1	; 0x01
    11f2:	8f 3f       	cpi	r24, 0xFF	; 255
    11f4:	11 f7       	brne	.-60     	; 0x11ba <UART_SendString+0x28>
		if(pu8String[i]==0)
		{
			break;
		}		
	}
	return gError;
    11f6:	80 91 c2 03 	lds	r24, 0x03C2
    11fa:	8c 83       	std	Y+4, r24	; 0x04
    11fc:	8c 81       	ldd	r24, Y+4	; 0x04
}
    11fe:	0f 90       	pop	r0
    1200:	0f 90       	pop	r0
    1202:	0f 90       	pop	r0
    1204:	0f 90       	pop	r0
    1206:	cf 91       	pop	r28
    1208:	df 91       	pop	r29
    120a:	08 95       	ret

0000120c <UART_ReceiveString>:
* Parameters (out): pu8String
* Return Value    : enuErrorStatus_t - For error handling 
* Description     : Sending a string with UART
*************************************************************/
enuErrorStatus_t UART_ReceiveString(uint8_t* pu8String,uint8_t max_length)
{
    120c:	df 93       	push	r29
    120e:	cf 93       	push	r28
    1210:	00 d0       	rcall	.+0      	; 0x1212 <UART_ReceiveString+0x6>
    1212:	00 d0       	rcall	.+0      	; 0x1214 <UART_ReceiveString+0x8>
    1214:	0f 92       	push	r0
    1216:	cd b7       	in	r28, 0x3d	; 61
    1218:	de b7       	in	r29, 0x3e	; 62
    121a:	9b 83       	std	Y+3, r25	; 0x03
    121c:	8a 83       	std	Y+2, r24	; 0x02
    121e:	6c 83       	std	Y+4, r22	; 0x04
	if(gError==E_ERROR)
    1220:	80 91 c2 03 	lds	r24, 0x03C2
    1224:	88 23       	and	r24, r24
    1226:	11 f4       	brne	.+4      	; 0x122c <UART_ReceiveString+0x20>
	{
		return E_ERROR;
    1228:	1d 82       	std	Y+5, r1	; 0x05
    122a:	39 c0       	rjmp	.+114    	; 0x129e <UART_ReceiveString+0x92>
	}
	gError=E_OK;
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	80 93 c2 03 	sts	0x03C2, r24
	uint8_t i=0;
    1232:	19 82       	std	Y+1, r1	; 0x01
	for(i=0;i<max_length;i++)
    1234:	19 82       	std	Y+1, r1	; 0x01
    1236:	2c c0       	rjmp	.+88     	; 0x1290 <UART_ReceiveString+0x84>
	{
		UART_ReceiveData((uint16_t *)&pu8String[i]);
    1238:	2a 81       	ldd	r18, Y+2	; 0x02
    123a:	3b 81       	ldd	r19, Y+3	; 0x03
    123c:	89 81       	ldd	r24, Y+1	; 0x01
    123e:	88 2f       	mov	r24, r24
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	82 0f       	add	r24, r18
    1244:	93 1f       	adc	r25, r19
    1246:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <UART_ReceiveData>
		if((pu8String[i]=='\r')||(pu8String[i]=='\n'))
    124a:	89 81       	ldd	r24, Y+1	; 0x01
    124c:	28 2f       	mov	r18, r24
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	8a 81       	ldd	r24, Y+2	; 0x02
    1252:	9b 81       	ldd	r25, Y+3	; 0x03
    1254:	fc 01       	movw	r30, r24
    1256:	e2 0f       	add	r30, r18
    1258:	f3 1f       	adc	r31, r19
    125a:	80 81       	ld	r24, Z
    125c:	8d 30       	cpi	r24, 0x0D	; 13
    125e:	59 f0       	breq	.+22     	; 0x1276 <UART_ReceiveString+0x6a>
    1260:	89 81       	ldd	r24, Y+1	; 0x01
    1262:	28 2f       	mov	r18, r24
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	8a 81       	ldd	r24, Y+2	; 0x02
    1268:	9b 81       	ldd	r25, Y+3	; 0x03
    126a:	fc 01       	movw	r30, r24
    126c:	e2 0f       	add	r30, r18
    126e:	f3 1f       	adc	r31, r19
    1270:	80 81       	ld	r24, Z
    1272:	8a 30       	cpi	r24, 0x0A	; 10
    1274:	51 f4       	brne	.+20     	; 0x128a <UART_ReceiveString+0x7e>
		{
			pu8String[i]=0;
    1276:	89 81       	ldd	r24, Y+1	; 0x01
    1278:	28 2f       	mov	r18, r24
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	8a 81       	ldd	r24, Y+2	; 0x02
    127e:	9b 81       	ldd	r25, Y+3	; 0x03
    1280:	fc 01       	movw	r30, r24
    1282:	e2 0f       	add	r30, r18
    1284:	f3 1f       	adc	r31, r19
    1286:	10 82       	st	Z, r1
    1288:	07 c0       	rjmp	.+14     	; 0x1298 <UART_ReceiveString+0x8c>
	{
		return E_ERROR;
	}
	gError=E_OK;
	uint8_t i=0;
	for(i=0;i<max_length;i++)
    128a:	89 81       	ldd	r24, Y+1	; 0x01
    128c:	8f 5f       	subi	r24, 0xFF	; 255
    128e:	89 83       	std	Y+1, r24	; 0x01
    1290:	99 81       	ldd	r25, Y+1	; 0x01
    1292:	8c 81       	ldd	r24, Y+4	; 0x04
    1294:	98 17       	cp	r25, r24
    1296:	80 f2       	brcs	.-96     	; 0x1238 <UART_ReceiveString+0x2c>
			pu8String[i]=0;
			break;
		}
	}

	return gError;
    1298:	80 91 c2 03 	lds	r24, 0x03C2
    129c:	8d 83       	std	Y+5, r24	; 0x05
    129e:	8d 81       	ldd	r24, Y+5	; 0x05
}
    12a0:	0f 90       	pop	r0
    12a2:	0f 90       	pop	r0
    12a4:	0f 90       	pop	r0
    12a6:	0f 90       	pop	r0
    12a8:	0f 90       	pop	r0
    12aa:	cf 91       	pop	r28
    12ac:	df 91       	pop	r29
    12ae:	08 95       	ret

000012b0 <UART_SendDataNoBLOCK>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling
* Description     : Sending a data with UART without polling
*************************************************************/
enuErrorStatus_t UART_SendDataNoBLOCK(uint16_t u16Data)
{
    12b0:	df 93       	push	r29
    12b2:	cf 93       	push	r28
    12b4:	00 d0       	rcall	.+0      	; 0x12b6 <UART_SendDataNoBLOCK+0x6>
    12b6:	0f 92       	push	r0
    12b8:	cd b7       	in	r28, 0x3d	; 61
    12ba:	de b7       	in	r29, 0x3e	; 62
    12bc:	9a 83       	std	Y+2, r25	; 0x02
    12be:	89 83       	std	Y+1, r24	; 0x01
	if(gError==E_ERROR)
    12c0:	80 91 c2 03 	lds	r24, 0x03C2
    12c4:	88 23       	and	r24, r24
    12c6:	11 f4       	brne	.+4      	; 0x12cc <UART_SendDataNoBLOCK+0x1c>
	{
		return E_ERROR;
    12c8:	1b 82       	std	Y+3, r1	; 0x03
    12ca:	1d c0       	rjmp	.+58     	; 0x1306 <UART_SendDataNoBLOCK+0x56>
	}
	gError=E_OK;
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	80 93 c2 03 	sts	0x03C2, r24
	if(GET_BIT(UCSRA_R,UDRE_B))
    12d2:	eb e2       	ldi	r30, 0x2B	; 43
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	80 81       	ld	r24, Z
    12d8:	88 2f       	mov	r24, r24
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	80 72       	andi	r24, 0x20	; 32
    12de:	90 70       	andi	r25, 0x00	; 0
    12e0:	95 95       	asr	r25
    12e2:	87 95       	ror	r24
    12e4:	95 95       	asr	r25
    12e6:	87 95       	ror	r24
    12e8:	95 95       	asr	r25
    12ea:	87 95       	ror	r24
    12ec:	95 95       	asr	r25
    12ee:	87 95       	ror	r24
    12f0:	95 95       	asr	r25
    12f2:	87 95       	ror	r24
    12f4:	00 97       	sbiw	r24, 0x00	; 0
    12f6:	21 f0       	breq	.+8      	; 0x1300 <UART_SendDataNoBLOCK+0x50>
	{
		UDR_R=(uint8_t)u16Data;
    12f8:	ec e2       	ldi	r30, 0x2C	; 44
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	89 81       	ldd	r24, Y+1	; 0x01
    12fe:	80 83       	st	Z, r24
	}
	return gError;
    1300:	80 91 c2 03 	lds	r24, 0x03C2
    1304:	8b 83       	std	Y+3, r24	; 0x03
    1306:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1308:	0f 90       	pop	r0
    130a:	0f 90       	pop	r0
    130c:	0f 90       	pop	r0
    130e:	cf 91       	pop	r28
    1310:	df 91       	pop	r29
    1312:	08 95       	ret

00001314 <UART_TX_Enable_Interrupt>:
* Parameters (out): enuErrorStatus_t
* Return value: 1=E_OK or 0=FAIL
* Description: A function to enable uart interrupt for TX complete
************************************************************************************/
enuErrorStatus_t UART_TX_Enable_Interrupt(void)
{
    1314:	df 93       	push	r29
    1316:	cf 93       	push	r28
    1318:	cd b7       	in	r28, 0x3d	; 61
    131a:	de b7       	in	r29, 0x3e	; 62
	//set appropriate bit to enable interrupt
	SET_BIT(UCSRB_R,TXCIE_B);
    131c:	aa e2       	ldi	r26, 0x2A	; 42
    131e:	b0 e0       	ldi	r27, 0x00	; 0
    1320:	ea e2       	ldi	r30, 0x2A	; 42
    1322:	f0 e0       	ldi	r31, 0x00	; 0
    1324:	80 81       	ld	r24, Z
    1326:	80 64       	ori	r24, 0x40	; 64
    1328:	8c 93       	st	X, r24
	return E_OK;
    132a:	81 e0       	ldi	r24, 0x01	; 1
}
    132c:	cf 91       	pop	r28
    132e:	df 91       	pop	r29
    1330:	08 95       	ret

00001332 <UART_TX_Disable_Interrupt>:
* Parameters (out): enuErrorStatus_t
* Return value: 1=E_OK or 0=FAIL
* Description: A function to disable uart interrupt for TX complete
************************************************************************************/
enuErrorStatus_t UART_TX_Disable_Interrupt(void)
{
    1332:	df 93       	push	r29
    1334:	cf 93       	push	r28
    1336:	cd b7       	in	r28, 0x3d	; 61
    1338:	de b7       	in	r29, 0x3e	; 62
	//clear appropriate bit to disable interrupt
	CLEAR_BIT(UCSRB_R,TXCIE_B);
    133a:	aa e2       	ldi	r26, 0x2A	; 42
    133c:	b0 e0       	ldi	r27, 0x00	; 0
    133e:	ea e2       	ldi	r30, 0x2A	; 42
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	80 81       	ld	r24, Z
    1344:	8f 7b       	andi	r24, 0xBF	; 191
    1346:	8c 93       	st	X, r24
	return E_OK;
    1348:	81 e0       	ldi	r24, 0x01	; 1
}
    134a:	cf 91       	pop	r28
    134c:	df 91       	pop	r29
    134e:	08 95       	ret

00001350 <UART_TX_SetCallBack>:
* Parameters (out): enuErrorStatus_t
* Return value: 1=E_OK or 0=FAIL
* Description: A function to enable setup callback funtion for TX complete interrupt
************************************************************************************/
enuErrorStatus_t UART_TX_SetCallBack(void(*local_fptr)(void))
{
    1350:	df 93       	push	r29
    1352:	cf 93       	push	r28
    1354:	00 d0       	rcall	.+0      	; 0x1356 <UART_TX_SetCallBack+0x6>
    1356:	0f 92       	push	r0
    1358:	cd b7       	in	r28, 0x3d	; 61
    135a:	de b7       	in	r29, 0x3e	; 62
    135c:	9a 83       	std	Y+2, r25	; 0x02
    135e:	89 83       	std	Y+1, r24	; 0x01
	//check if the sent pointer points to a valid position
	if (local_fptr== NULLPTR)     return E_ERROR;
    1360:	89 81       	ldd	r24, Y+1	; 0x01
    1362:	9a 81       	ldd	r25, Y+2	; 0x02
    1364:	00 97       	sbiw	r24, 0x00	; 0
    1366:	11 f4       	brne	.+4      	; 0x136c <UART_TX_SetCallBack+0x1c>
    1368:	1b 82       	std	Y+3, r1	; 0x03
    136a:	08 c0       	rjmp	.+16     	; 0x137c <UART_TX_SetCallBack+0x2c>
	//if so, store the pointer address in the global pointer to function
	TXC_Callback=local_fptr;
    136c:	89 81       	ldd	r24, Y+1	; 0x01
    136e:	9a 81       	ldd	r25, Y+2	; 0x02
    1370:	90 93 c6 03 	sts	0x03C6, r25
    1374:	80 93 c5 03 	sts	0x03C5, r24
	return E_OK;
    1378:	81 e0       	ldi	r24, 0x01	; 1
    137a:	8b 83       	std	Y+3, r24	; 0x03
    137c:	8b 81       	ldd	r24, Y+3	; 0x03
}
    137e:	0f 90       	pop	r0
    1380:	0f 90       	pop	r0
    1382:	0f 90       	pop	r0
    1384:	cf 91       	pop	r28
    1386:	df 91       	pop	r29
    1388:	08 95       	ret

0000138a <UART_RX_Enable_Interrupt>:
* Parameters (out): enuErrorStatus_t
* Return value: 1=E_OK or 0=FAIL
* Description: A function to enable uart interrupt for RX complete
************************************************************************************/
enuErrorStatus_t UART_RX_Enable_Interrupt(void)
{
    138a:	df 93       	push	r29
    138c:	cf 93       	push	r28
    138e:	cd b7       	in	r28, 0x3d	; 61
    1390:	de b7       	in	r29, 0x3e	; 62
	//set appropriate bit to enable interrupt
	SET_BIT(UCSRB_R,RXCIE_B);
    1392:	aa e2       	ldi	r26, 0x2A	; 42
    1394:	b0 e0       	ldi	r27, 0x00	; 0
    1396:	ea e2       	ldi	r30, 0x2A	; 42
    1398:	f0 e0       	ldi	r31, 0x00	; 0
    139a:	80 81       	ld	r24, Z
    139c:	80 68       	ori	r24, 0x80	; 128
    139e:	8c 93       	st	X, r24
	return E_OK;
    13a0:	81 e0       	ldi	r24, 0x01	; 1
}
    13a2:	cf 91       	pop	r28
    13a4:	df 91       	pop	r29
    13a6:	08 95       	ret

000013a8 <UART_RX_Disable_Interrupt>:
* Parameters (out): enuErrorStatus_t
* Return value: 1=E_OK or 0=FAIL
* Description: A function to disable uart interrupt for RX complete
************************************************************************************/
enuErrorStatus_t UART_RX_Disable_Interrupt(void)
{
    13a8:	df 93       	push	r29
    13aa:	cf 93       	push	r28
    13ac:	cd b7       	in	r28, 0x3d	; 61
    13ae:	de b7       	in	r29, 0x3e	; 62
	//clear appropriate bit to disable interrupt
	CLEAR_BIT(UCSRB_R,RXCIE_B);
    13b0:	aa e2       	ldi	r26, 0x2A	; 42
    13b2:	b0 e0       	ldi	r27, 0x00	; 0
    13b4:	ea e2       	ldi	r30, 0x2A	; 42
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	80 81       	ld	r24, Z
    13ba:	8f 77       	andi	r24, 0x7F	; 127
    13bc:	8c 93       	st	X, r24
	return E_OK;
    13be:	81 e0       	ldi	r24, 0x01	; 1
}
    13c0:	cf 91       	pop	r28
    13c2:	df 91       	pop	r29
    13c4:	08 95       	ret

000013c6 <UART_RX_SetCallBack>:
* Parameters (out): enuErrorStatus_t
* Return value: 1=E_OK or 0=FAIL
* Description: A function to enable setup callback funtion for RX complete interrupt
************************************************************************************/
enuErrorStatus_t UART_RX_SetCallBack(void(*local_fptr)(void))
{
    13c6:	df 93       	push	r29
    13c8:	cf 93       	push	r28
    13ca:	00 d0       	rcall	.+0      	; 0x13cc <UART_RX_SetCallBack+0x6>
    13cc:	0f 92       	push	r0
    13ce:	cd b7       	in	r28, 0x3d	; 61
    13d0:	de b7       	in	r29, 0x3e	; 62
    13d2:	9a 83       	std	Y+2, r25	; 0x02
    13d4:	89 83       	std	Y+1, r24	; 0x01
	//check if the sent pointer points to a valid position
	if (local_fptr== NULLPTR)     return E_ERROR;
    13d6:	89 81       	ldd	r24, Y+1	; 0x01
    13d8:	9a 81       	ldd	r25, Y+2	; 0x02
    13da:	00 97       	sbiw	r24, 0x00	; 0
    13dc:	11 f4       	brne	.+4      	; 0x13e2 <UART_RX_SetCallBack+0x1c>
    13de:	1b 82       	std	Y+3, r1	; 0x03
    13e0:	08 c0       	rjmp	.+16     	; 0x13f2 <UART_RX_SetCallBack+0x2c>
	//if so, store the pointer address in the global pointer to function
	RXC_Callback=local_fptr;
    13e2:	89 81       	ldd	r24, Y+1	; 0x01
    13e4:	9a 81       	ldd	r25, Y+2	; 0x02
    13e6:	90 93 c4 03 	sts	0x03C4, r25
    13ea:	80 93 c3 03 	sts	0x03C3, r24
	return E_OK;
    13ee:	81 e0       	ldi	r24, 0x01	; 1
    13f0:	8b 83       	std	Y+3, r24	; 0x03
    13f2:	8b 81       	ldd	r24, Y+3	; 0x03
}
    13f4:	0f 90       	pop	r0
    13f6:	0f 90       	pop	r0
    13f8:	0f 90       	pop	r0
    13fa:	cf 91       	pop	r28
    13fc:	df 91       	pop	r29
    13fe:	08 95       	ret

00001400 <__vector_13>:


/* ISRs----------------------------------------------------------*/

ISR(UART_RX_vect)
{
    1400:	1f 92       	push	r1
    1402:	0f 92       	push	r0
    1404:	0f b6       	in	r0, 0x3f	; 63
    1406:	0f 92       	push	r0
    1408:	11 24       	eor	r1, r1
    140a:	2f 93       	push	r18
    140c:	3f 93       	push	r19
    140e:	4f 93       	push	r20
    1410:	5f 93       	push	r21
    1412:	6f 93       	push	r22
    1414:	7f 93       	push	r23
    1416:	8f 93       	push	r24
    1418:	9f 93       	push	r25
    141a:	af 93       	push	r26
    141c:	bf 93       	push	r27
    141e:	ef 93       	push	r30
    1420:	ff 93       	push	r31
    1422:	df 93       	push	r29
    1424:	cf 93       	push	r28
    1426:	cd b7       	in	r28, 0x3d	; 61
    1428:	de b7       	in	r29, 0x3e	; 62
	//if the global pointer to function points to a valid position
	if (RXC_Callback!=NULLPTR)
    142a:	80 91 c3 03 	lds	r24, 0x03C3
    142e:	90 91 c4 03 	lds	r25, 0x03C4
    1432:	00 97       	sbiw	r24, 0x00	; 0
    1434:	29 f0       	breq	.+10     	; 0x1440 <__vector_13+0x40>
	{
		//call the function
		RXC_Callback();
    1436:	e0 91 c3 03 	lds	r30, 0x03C3
    143a:	f0 91 c4 03 	lds	r31, 0x03C4
    143e:	09 95       	icall
	}
}
    1440:	cf 91       	pop	r28
    1442:	df 91       	pop	r29
    1444:	ff 91       	pop	r31
    1446:	ef 91       	pop	r30
    1448:	bf 91       	pop	r27
    144a:	af 91       	pop	r26
    144c:	9f 91       	pop	r25
    144e:	8f 91       	pop	r24
    1450:	7f 91       	pop	r23
    1452:	6f 91       	pop	r22
    1454:	5f 91       	pop	r21
    1456:	4f 91       	pop	r20
    1458:	3f 91       	pop	r19
    145a:	2f 91       	pop	r18
    145c:	0f 90       	pop	r0
    145e:	0f be       	out	0x3f, r0	; 63
    1460:	0f 90       	pop	r0
    1462:	1f 90       	pop	r1
    1464:	18 95       	reti

00001466 <__vector_15>:
ISR(UART_TX_vect)
{
    1466:	1f 92       	push	r1
    1468:	0f 92       	push	r0
    146a:	0f b6       	in	r0, 0x3f	; 63
    146c:	0f 92       	push	r0
    146e:	11 24       	eor	r1, r1
    1470:	2f 93       	push	r18
    1472:	3f 93       	push	r19
    1474:	4f 93       	push	r20
    1476:	5f 93       	push	r21
    1478:	6f 93       	push	r22
    147a:	7f 93       	push	r23
    147c:	8f 93       	push	r24
    147e:	9f 93       	push	r25
    1480:	af 93       	push	r26
    1482:	bf 93       	push	r27
    1484:	ef 93       	push	r30
    1486:	ff 93       	push	r31
    1488:	df 93       	push	r29
    148a:	cf 93       	push	r28
    148c:	cd b7       	in	r28, 0x3d	; 61
    148e:	de b7       	in	r29, 0x3e	; 62
	//if the global pointer to function points to a valid position
	if (TXC_Callback!=NULLPTR)
    1490:	80 91 c5 03 	lds	r24, 0x03C5
    1494:	90 91 c6 03 	lds	r25, 0x03C6
    1498:	00 97       	sbiw	r24, 0x00	; 0
    149a:	29 f0       	breq	.+10     	; 0x14a6 <__vector_15+0x40>
	{
		//call the function
		TXC_Callback();
    149c:	e0 91 c5 03 	lds	r30, 0x03C5
    14a0:	f0 91 c6 03 	lds	r31, 0x03C6
    14a4:	09 95       	icall
	}
}
    14a6:	cf 91       	pop	r28
    14a8:	df 91       	pop	r29
    14aa:	ff 91       	pop	r31
    14ac:	ef 91       	pop	r30
    14ae:	bf 91       	pop	r27
    14b0:	af 91       	pop	r26
    14b2:	9f 91       	pop	r25
    14b4:	8f 91       	pop	r24
    14b6:	7f 91       	pop	r23
    14b8:	6f 91       	pop	r22
    14ba:	5f 91       	pop	r21
    14bc:	4f 91       	pop	r20
    14be:	3f 91       	pop	r19
    14c0:	2f 91       	pop	r18
    14c2:	0f 90       	pop	r0
    14c4:	0f be       	out	0x3f, r0	; 63
    14c6:	0f 90       	pop	r0
    14c8:	1f 90       	pop	r1
    14ca:	18 95       	reti

000014cc <SPI_initMaster>:
* Parameters (in) : None
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to initialize the MCU as a master SPT
************************************************************************************************/
static void SPI_initMaster(void){
    14cc:	df 93       	push	r29
    14ce:	cf 93       	push	r28
    14d0:	cd b7       	in	r28, 0x3d	; 61
    14d2:	de b7       	in	r29, 0x3e	; 62

//	DDRB_R |= (1<<PB4) | (1<<PB5) | (1<<PB7);
//	DDRB_R &= ~(1<<PB6);

	//DIO_Init();
	DIO_PinInit(PB4, OUTPUT, NO_CONNECTION);	// SS
    14d4:	8c e0       	ldi	r24, 0x0C	; 12
    14d6:	61 e0       	ldi	r22, 0x01	; 1
    14d8:	40 e0       	ldi	r20, 0x00	; 0
    14da:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <DIO_PinInit>
	DIO_PinInit(PB5, OUTPUT, NO_CONNECTION);	// MOSI
    14de:	8d e0       	ldi	r24, 0x0D	; 13
    14e0:	61 e0       	ldi	r22, 0x01	; 1
    14e2:	40 e0       	ldi	r20, 0x00	; 0
    14e4:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <DIO_PinInit>
	DIO_PinInit(PB6, INPUT, NO_CONNECTION);	// MISO
    14e8:	8e e0       	ldi	r24, 0x0E	; 14
    14ea:	60 e0       	ldi	r22, 0x00	; 0
    14ec:	40 e0       	ldi	r20, 0x00	; 0
    14ee:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <DIO_PinInit>
	DIO_PinInit(PB7, OUTPUT, NO_CONNECTION);	// SCK
    14f2:	8f e0       	ldi	r24, 0x0F	; 15
    14f4:	61 e0       	ldi	r22, 0x01	; 1
    14f6:	40 e0       	ldi	r20, 0x00	; 0
    14f8:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <DIO_PinInit>
	 * MSTR = 1 Enable Mater Mode
	 * CPOL = 0 The Leading Edge of SCK is the Rising Edge, SCK is LOW when idle
	 * CPHA = 0 Sample Data at the Rising Edge of SCK
	 * SPR1 = 0, SPR0 = 0 To Choose Clock = Fosc/4
	 ***********************************************************************/
	SPCR_R = (1<<SPE_B) | (1<<MSTR_B) | (1<<CPHA_B) | (1<<SPR0_B);
    14fc:	ed e2       	ldi	r30, 0x2D	; 45
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	85 e5       	ldi	r24, 0x55	; 85
    1502:	80 83       	st	Z, r24
}
    1504:	cf 91       	pop	r28
    1506:	df 91       	pop	r29
    1508:	08 95       	ret

0000150a <SPI_initSlave>:
* Parameters (in) : None
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to initialize the MCU as a slave SPT
************************************************************************************************/
static void SPI_initSlave(void){
    150a:	df 93       	push	r29
    150c:	cf 93       	push	r28
    150e:	cd b7       	in	r28, 0x3d	; 61
    1510:	de b7       	in	r29, 0x3e	; 62
	 * SCK(PB7) = input
	 * **************************************************************************/
//	DDRB_R &= (~(1<<PB4)) & (~(1<<PB5)) & (~(1<<PB7));
//	DDRB_R |= (1<<PB6);
	//DIO_Init();
	DIO_PinInit(PB4, INPUT, NO_CONNECTION);	// SS
    1512:	8c e0       	ldi	r24, 0x0C	; 12
    1514:	60 e0       	ldi	r22, 0x00	; 0
    1516:	40 e0       	ldi	r20, 0x00	; 0
    1518:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <DIO_PinInit>
	DIO_PinInit(PB5, INPUT, NO_CONNECTION);	// MOSI
    151c:	8d e0       	ldi	r24, 0x0D	; 13
    151e:	60 e0       	ldi	r22, 0x00	; 0
    1520:	40 e0       	ldi	r20, 0x00	; 0
    1522:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <DIO_PinInit>
	DIO_PinInit(PB6, OUTPUT, NO_CONNECTION);	// MISO
    1526:	8e e0       	ldi	r24, 0x0E	; 14
    1528:	61 e0       	ldi	r22, 0x01	; 1
    152a:	40 e0       	ldi	r20, 0x00	; 0
    152c:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <DIO_PinInit>
	DIO_PinInit(PB7, INPUT, NO_CONNECTION);	// SCK
    1530:	8f e0       	ldi	r24, 0x0F	; 15
    1532:	60 e0       	ldi	r22, 0x00	; 0
    1534:	40 e0       	ldi	r20, 0x00	; 0
    1536:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <DIO_PinInit>
	/************************** SPCR Description **************************
	 * SPE = 1 ENABLE SPI
	 * SPR1 = 0, SPR0 = 0 To Choose Clock = Fosc/4
	 ***********************************************************************/
	SPCR_R = (1<<SPE_B) | (1<<CPHA_B) | (1<<SPR0_B);
    153a:	ed e2       	ldi	r30, 0x2D	; 45
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	85 e4       	ldi	r24, 0x45	; 69
    1540:	80 83       	st	Z, r24
}
    1542:	cf 91       	pop	r28
    1544:	df 91       	pop	r29
    1546:	08 95       	ret

00001548 <SPI_init>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to initialize SPT
************************************************************************************************/
void SPI_init(void)
{
    1548:	df 93       	push	r29
    154a:	cf 93       	push	r28
    154c:	cd b7       	in	r28, 0x3d	; 61
    154e:	de b7       	in	r29, 0x3e	; 62
#if(SPI_CFG == MASTER)
	SPI_initMaster();
    1550:	0e 94 66 0a 	call	0x14cc	; 0x14cc <SPI_initMaster>
#elif (SPI_CFG == SLAVE)
	SPI_initSlave();
#endif
}
    1554:	cf 91       	pop	r28
    1556:	df 91       	pop	r29
    1558:	08 95       	ret

0000155a <SPI_sendData>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to send Byte via SPI
************************************************************************************************/
void SPI_sendData(const uint8_t u8Data)
{
    155a:	df 93       	push	r29
    155c:	cf 93       	push	r28
    155e:	0f 92       	push	r0
    1560:	cd b7       	in	r28, 0x3d	; 61
    1562:	de b7       	in	r29, 0x3e	; 62
    1564:	89 83       	std	Y+1, r24	; 0x01
	SPDR_R = u8Data;	/*send data*/
    1566:	ef e2       	ldi	r30, 0x2F	; 47
    1568:	f0 e0       	ldi	r31, 0x00	; 0
    156a:	89 81       	ldd	r24, Y+1	; 0x01
    156c:	80 83       	st	Z, r24
	while(!GET_BIT(SPSR_R, SPIF_B));	/*wait until transfer is complete (SPIF=1)*/
    156e:	ee e2       	ldi	r30, 0x2E	; 46
    1570:	f0 e0       	ldi	r31, 0x00	; 0
    1572:	80 81       	ld	r24, Z
    1574:	88 1f       	adc	r24, r24
    1576:	88 27       	eor	r24, r24
    1578:	88 1f       	adc	r24, r24
    157a:	88 2f       	mov	r24, r24
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	90 70       	andi	r25, 0x00	; 0
    1580:	00 97       	sbiw	r24, 0x00	; 0
    1582:	a9 f3       	breq	.-22     	; 0x156e <SPI_sendData+0x14>
}
    1584:	0f 90       	pop	r0
    1586:	cf 91       	pop	r28
    1588:	df 91       	pop	r29
    158a:	08 95       	ret

0000158c <SPI_receiveData>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to receive Byte via SPI
************************************************************************************************/
void SPI_receiveData(uint8_t* pu8Data)
{
    158c:	df 93       	push	r29
    158e:	cf 93       	push	r28
    1590:	00 d0       	rcall	.+0      	; 0x1592 <SPI_receiveData+0x6>
    1592:	cd b7       	in	r28, 0x3d	; 61
    1594:	de b7       	in	r29, 0x3e	; 62
    1596:	9a 83       	std	Y+2, r25	; 0x02
    1598:	89 83       	std	Y+1, r24	; 0x01
	 DIO_PinWrite(PB4, LOW);
    159a:	8c e0       	ldi	r24, 0x0C	; 12
    159c:	60 e0       	ldi	r22, 0x00	; 0
    159e:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <DIO_PinWrite>
	//store the pointer contents in the SPI data register to initialize communication
	SPDR_R= *pu8Data;
    15a2:	ef e2       	ldi	r30, 0x2F	; 47
    15a4:	f0 e0       	ldi	r31, 0x00	; 0
    15a6:	a9 81       	ldd	r26, Y+1	; 0x01
    15a8:	ba 81       	ldd	r27, Y+2	; 0x02
    15aa:	8c 91       	ld	r24, X
    15ac:	80 83       	st	Z, r24
	while(!GET_BIT(SPSR_R,SPIF_B));	/*wait until receive is complete (SPIF=1)*/
    15ae:	ee e2       	ldi	r30, 0x2E	; 46
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	80 81       	ld	r24, Z
    15b4:	88 1f       	adc	r24, r24
    15b6:	88 27       	eor	r24, r24
    15b8:	88 1f       	adc	r24, r24
    15ba:	88 2f       	mov	r24, r24
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	90 70       	andi	r25, 0x00	; 0
    15c0:	00 97       	sbiw	r24, 0x00	; 0
    15c2:	a9 f3       	breq	.-22     	; 0x15ae <SPI_receiveData+0x22>
	*pu8Data = SPDR_R;	/*return the received data*/
    15c4:	ef e2       	ldi	r30, 0x2F	; 47
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	80 81       	ld	r24, Z
    15ca:	e9 81       	ldd	r30, Y+1	; 0x01
    15cc:	fa 81       	ldd	r31, Y+2	; 0x02
    15ce:	80 83       	st	Z, r24
	DIO_PinWrite(PB4, HIGH);
    15d0:	8c e0       	ldi	r24, 0x0C	; 12
    15d2:	61 e0       	ldi	r22, 0x01	; 1
    15d4:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <DIO_PinWrite>
}
    15d8:	0f 90       	pop	r0
    15da:	0f 90       	pop	r0
    15dc:	cf 91       	pop	r28
    15de:	df 91       	pop	r29
    15e0:	08 95       	ret

000015e2 <SPI_sendString>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to send String via SPI
************************************************************************************************/
void SPI_sendString(const uint8_t *pu8Data)
{
    15e2:	df 93       	push	r29
    15e4:	cf 93       	push	r28
    15e6:	00 d0       	rcall	.+0      	; 0x15e8 <SPI_sendString+0x6>
    15e8:	0f 92       	push	r0
    15ea:	cd b7       	in	r28, 0x3d	; 61
    15ec:	de b7       	in	r29, 0x3e	; 62
    15ee:	9b 83       	std	Y+3, r25	; 0x03
    15f0:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t u8i;

    for (u8i=0;pu8Data[u8i];u8i++)
    15f2:	19 82       	std	Y+1, r1	; 0x01
    15f4:	0e c0       	rjmp	.+28     	; 0x1612 <SPI_sendString+0x30>
    {

    	SPI_sendData(*(pu8Data+u8i));
    15f6:	89 81       	ldd	r24, Y+1	; 0x01
    15f8:	28 2f       	mov	r18, r24
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	8a 81       	ldd	r24, Y+2	; 0x02
    15fe:	9b 81       	ldd	r25, Y+3	; 0x03
    1600:	fc 01       	movw	r30, r24
    1602:	e2 0f       	add	r30, r18
    1604:	f3 1f       	adc	r31, r19
    1606:	80 81       	ld	r24, Z
    1608:	0e 94 ad 0a 	call	0x155a	; 0x155a <SPI_sendData>
************************************************************************************************/
void SPI_sendString(const uint8_t *pu8Data)
{
    uint8_t u8i;

    for (u8i=0;pu8Data[u8i];u8i++)
    160c:	89 81       	ldd	r24, Y+1	; 0x01
    160e:	8f 5f       	subi	r24, 0xFF	; 255
    1610:	89 83       	std	Y+1, r24	; 0x01
    1612:	89 81       	ldd	r24, Y+1	; 0x01
    1614:	28 2f       	mov	r18, r24
    1616:	30 e0       	ldi	r19, 0x00	; 0
    1618:	8a 81       	ldd	r24, Y+2	; 0x02
    161a:	9b 81       	ldd	r25, Y+3	; 0x03
    161c:	fc 01       	movw	r30, r24
    161e:	e2 0f       	add	r30, r18
    1620:	f3 1f       	adc	r31, r19
    1622:	80 81       	ld	r24, Z
    1624:	88 23       	and	r24, r24
    1626:	39 f7       	brne	.-50     	; 0x15f6 <SPI_sendString+0x14>
    {

    	SPI_sendData(*(pu8Data+u8i));
    }

    SPI_sendData('\0');
    1628:	80 e0       	ldi	r24, 0x00	; 0
    162a:	0e 94 ad 0a 	call	0x155a	; 0x155a <SPI_sendData>
//    SPI_sendData('\n');
}
    162e:	0f 90       	pop	r0
    1630:	0f 90       	pop	r0
    1632:	0f 90       	pop	r0
    1634:	cf 91       	pop	r28
    1636:	df 91       	pop	r29
    1638:	08 95       	ret

0000163a <SPI_receiveString>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to receive String via SPI
************************************************************************************************/
void SPI_receiveString(uint8_t *pu8Data, uint8_t u8BufferMaxSize)
{
    163a:	df 93       	push	r29
    163c:	cf 93       	push	r28
    163e:	00 d0       	rcall	.+0      	; 0x1640 <SPI_receiveString+0x6>
    1640:	00 d0       	rcall	.+0      	; 0x1642 <SPI_receiveString+0x8>
    1642:	cd b7       	in	r28, 0x3d	; 61
    1644:	de b7       	in	r29, 0x3e	; 62
    1646:	9b 83       	std	Y+3, r25	; 0x03
    1648:	8a 83       	std	Y+2, r24	; 0x02
    164a:	6c 83       	std	Y+4, r22	; 0x04
    uint8_t u8i;
    for (u8i=0; u8i < u8BufferMaxSize;u8i++)
    164c:	19 82       	std	Y+1, r1	; 0x01
    164e:	17 c0       	rjmp	.+46     	; 0x167e <SPI_receiveString+0x44>
    {

    	SPI_receiveData(&pu8Data[u8i]);
    1650:	89 81       	ldd	r24, Y+1	; 0x01
    1652:	28 2f       	mov	r18, r24
    1654:	30 e0       	ldi	r19, 0x00	; 0
    1656:	8a 81       	ldd	r24, Y+2	; 0x02
    1658:	9b 81       	ldd	r25, Y+3	; 0x03
    165a:	82 0f       	add	r24, r18
    165c:	93 1f       	adc	r25, r19
    165e:	0e 94 c6 0a 	call	0x158c	; 0x158c <SPI_receiveData>
        if (*(pu8Data+u8i)==0)
    1662:	89 81       	ldd	r24, Y+1	; 0x01
    1664:	28 2f       	mov	r18, r24
    1666:	30 e0       	ldi	r19, 0x00	; 0
    1668:	8a 81       	ldd	r24, Y+2	; 0x02
    166a:	9b 81       	ldd	r25, Y+3	; 0x03
    166c:	fc 01       	movw	r30, r24
    166e:	e2 0f       	add	r30, r18
    1670:	f3 1f       	adc	r31, r19
    1672:	80 81       	ld	r24, Z
    1674:	88 23       	and	r24, r24
    1676:	39 f0       	breq	.+14     	; 0x1686 <SPI_receiveString+0x4c>
* Description     : A function to receive String via SPI
************************************************************************************************/
void SPI_receiveString(uint8_t *pu8Data, uint8_t u8BufferMaxSize)
{
    uint8_t u8i;
    for (u8i=0; u8i < u8BufferMaxSize;u8i++)
    1678:	89 81       	ldd	r24, Y+1	; 0x01
    167a:	8f 5f       	subi	r24, 0xFF	; 255
    167c:	89 83       	std	Y+1, r24	; 0x01
    167e:	99 81       	ldd	r25, Y+1	; 0x01
    1680:	8c 81       	ldd	r24, Y+4	; 0x04
    1682:	98 17       	cp	r25, r24
    1684:	28 f3       	brcs	.-54     	; 0x1650 <SPI_receiveString+0x16>
           break;
        }
    }
    //end the string with null
    //pu8Data[u8i]='\0';
}
    1686:	0f 90       	pop	r0
    1688:	0f 90       	pop	r0
    168a:	0f 90       	pop	r0
    168c:	0f 90       	pop	r0
    168e:	cf 91       	pop	r28
    1690:	df 91       	pop	r29
    1692:	08 95       	ret

00001694 <I2C_GetStatus>:
* Parameters (out): uint8_t
* Return value: I2C status code
* Description: A function to read the I2C bus status from the TWSR register
************************************************************************************/
static uint8_t I2C_GetStatus(void)
{
    1694:	df 93       	push	r29
    1696:	cf 93       	push	r28
    1698:	cd b7       	in	r28, 0x3d	; 61
    169a:	de b7       	in	r29, 0x3e	; 62
   return (TWSR_R & 0xF8);
    169c:	e1 e2       	ldi	r30, 0x21	; 33
    169e:	f0 e0       	ldi	r31, 0x00	; 0
    16a0:	80 81       	ld	r24, Z
    16a2:	88 7f       	andi	r24, 0xF8	; 248
}
    16a4:	cf 91       	pop	r28
    16a6:	df 91       	pop	r29
    16a8:	08 95       	ret

000016aa <I2C_Init>:
* Parameters (out): enuErrorStatus_t
* Return value: 1=E_OK or 0=FAIL
* Description: A function to initialize the I2C peripheral
************************************************************************************/
enuErrorStatus_t I2C_Init(void)
{
    16aa:	df 93       	push	r29
    16ac:	cf 93       	push	r28
    16ae:	00 d0       	rcall	.+0      	; 0x16b0 <I2C_Init+0x6>
    16b0:	0f 92       	push	r0
    16b2:	cd b7       	in	r28, 0x3d	; 61
    16b4:	de b7       	in	r29, 0x3e	; 62
   /* set up master clock */
   TWSR_R &= 0b11111100;
    16b6:	a1 e2       	ldi	r26, 0x21	; 33
    16b8:	b0 e0       	ldi	r27, 0x00	; 0
    16ba:	e1 e2       	ldi	r30, 0x21	; 33
    16bc:	f0 e0       	ldi	r31, 0x00	; 0
    16be:	80 81       	ld	r24, Z
    16c0:	8c 7f       	andi	r24, 0xFC	; 252
    16c2:	8c 93       	st	X, r24
   TWSR_R |= I2C_PRESCALER;
    16c4:	a1 e2       	ldi	r26, 0x21	; 33
    16c6:	b0 e0       	ldi	r27, 0x00	; 0
    16c8:	e1 e2       	ldi	r30, 0x21	; 33
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	80 81       	ld	r24, Z
    16ce:	83 60       	ori	r24, 0x03	; 3
    16d0:	8c 93       	st	X, r24
   uint16_t power=4;
    16d2:	84 e0       	ldi	r24, 0x04	; 4
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	9b 83       	std	Y+3, r25	; 0x03
    16d8:	8a 83       	std	Y+2, r24	; 0x02
   for (uint8_t i=0;i<I2C_PRESCALER;i++)
    16da:	19 82       	std	Y+1, r1	; 0x01
    16dc:	11 c0       	rjmp	.+34     	; 0x1700 <I2C_Init+0x56>
   {
      power*=power;
    16de:	2a 81       	ldd	r18, Y+2	; 0x02
    16e0:	3b 81       	ldd	r19, Y+3	; 0x03
    16e2:	8a 81       	ldd	r24, Y+2	; 0x02
    16e4:	9b 81       	ldd	r25, Y+3	; 0x03
    16e6:	ac 01       	movw	r20, r24
    16e8:	24 9f       	mul	r18, r20
    16ea:	c0 01       	movw	r24, r0
    16ec:	25 9f       	mul	r18, r21
    16ee:	90 0d       	add	r25, r0
    16f0:	34 9f       	mul	r19, r20
    16f2:	90 0d       	add	r25, r0
    16f4:	11 24       	eor	r1, r1
    16f6:	9b 83       	std	Y+3, r25	; 0x03
    16f8:	8a 83       	std	Y+2, r24	; 0x02
{
   /* set up master clock */
   TWSR_R &= 0b11111100;
   TWSR_R |= I2C_PRESCALER;
   uint16_t power=4;
   for (uint8_t i=0;i<I2C_PRESCALER;i++)
    16fa:	89 81       	ldd	r24, Y+1	; 0x01
    16fc:	8f 5f       	subi	r24, 0xFF	; 255
    16fe:	89 83       	std	Y+1, r24	; 0x01
    1700:	89 81       	ldd	r24, Y+1	; 0x01
    1702:	83 30       	cpi	r24, 0x03	; 3
    1704:	60 f3       	brcs	.-40     	; 0x16de <I2C_Init+0x34>
   {
      power*=power;
   }
   TWBR_R=(((F_CPU/I2C_CLK)-16)/(2*power));
    1706:	e0 e2       	ldi	r30, 0x20	; 32
    1708:	f0 e0       	ldi	r31, 0x00	; 0
    170a:	8a 81       	ldd	r24, Y+2	; 0x02
    170c:	9b 81       	ldd	r25, Y+3	; 0x03
    170e:	9c 01       	movw	r18, r24
    1710:	22 0f       	add	r18, r18
    1712:	33 1f       	adc	r19, r19
    1714:	80 e4       	ldi	r24, 0x40	; 64
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	b9 01       	movw	r22, r18
    171a:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <__udivmodhi4>
    171e:	cb 01       	movw	r24, r22
    1720:	80 83       	st	Z, r24
   /* set up slave address */
   TWAR_R= (I2C_SLAVE_ADDRESS<<1) | I2C_SLAVE_GLOBAL_EN;
    1722:	e2 e2       	ldi	r30, 0x22	; 34
    1724:	f0 e0       	ldi	r31, 0x00	; 0
    1726:	85 e0       	ldi	r24, 0x05	; 5
    1728:	80 83       	st	Z, r24
   /* Enable acknowledgment */
   if(I2C_SLAVE_ACK == ENABLE)      SET_BIT(TWCR_R,TWEA_B);
    172a:	a6 e5       	ldi	r26, 0x56	; 86
    172c:	b0 e0       	ldi	r27, 0x00	; 0
    172e:	e6 e5       	ldi	r30, 0x56	; 86
    1730:	f0 e0       	ldi	r31, 0x00	; 0
    1732:	80 81       	ld	r24, Z
    1734:	80 64       	ori	r24, 0x40	; 64
    1736:	8c 93       	st	X, r24
   /* write 1 to TWINT bit */
   SET_BIT(TWCR_R,TWINT_B);
    1738:	a6 e5       	ldi	r26, 0x56	; 86
    173a:	b0 e0       	ldi	r27, 0x00	; 0
    173c:	e6 e5       	ldi	r30, 0x56	; 86
    173e:	f0 e0       	ldi	r31, 0x00	; 0
    1740:	80 81       	ld	r24, Z
    1742:	80 68       	ori	r24, 0x80	; 128
    1744:	8c 93       	st	X, r24
   /*Enable I2C Communication*/
   SET_BIT(TWCR_R,TWEN_B);
    1746:	a6 e5       	ldi	r26, 0x56	; 86
    1748:	b0 e0       	ldi	r27, 0x00	; 0
    174a:	e6 e5       	ldi	r30, 0x56	; 86
    174c:	f0 e0       	ldi	r31, 0x00	; 0
    174e:	80 81       	ld	r24, Z
    1750:	84 60       	ori	r24, 0x04	; 4
    1752:	8c 93       	st	X, r24
   return E_OK;
    1754:	81 e0       	ldi	r24, 0x01	; 1
}
    1756:	0f 90       	pop	r0
    1758:	0f 90       	pop	r0
    175a:	0f 90       	pop	r0
    175c:	cf 91       	pop	r28
    175e:	df 91       	pop	r29
    1760:	08 95       	ret

00001762 <I2C_Start>:
* Parameters (out): enuErrorStatus_t
* Return value: 1=E_OK or 0=FAIL
* Description: A function to send a start bit to the I2C bus
************************************************************************************/
enuErrorStatus_t I2C_Start(void)
{
    1762:	df 93       	push	r29
    1764:	cf 93       	push	r28
    1766:	0f 92       	push	r0
    1768:	cd b7       	in	r28, 0x3d	; 61
    176a:	de b7       	in	r29, 0x3e	; 62
   //Setup the TWCR register for the start condition & enable transmission
   TWCR_R=(1<<TWSTA_B) | (1<<TWEN_B) | (1<<TWINT_B);
    176c:	e6 e5       	ldi	r30, 0x56	; 86
    176e:	f0 e0       	ldi	r31, 0x00	; 0
    1770:	84 ea       	ldi	r24, 0xA4	; 164
    1772:	80 83       	st	Z, r24
   //wait for transmission to complete
   while(!GET_BIT(TWCR_R,TWINT_B));
    1774:	e6 e5       	ldi	r30, 0x56	; 86
    1776:	f0 e0       	ldi	r31, 0x00	; 0
    1778:	80 81       	ld	r24, Z
    177a:	88 1f       	adc	r24, r24
    177c:	88 27       	eor	r24, r24
    177e:	88 1f       	adc	r24, r24
    1780:	88 2f       	mov	r24, r24
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	90 70       	andi	r25, 0x00	; 0
    1786:	00 97       	sbiw	r24, 0x00	; 0
    1788:	a9 f3       	breq	.-22     	; 0x1774 <I2C_Start+0x12>
   //if start bit is sent, return a E_OK
   if(I2C_GetStatus()==START_TRANSMITTED)
    178a:	0e 94 4a 0b 	call	0x1694	; 0x1694 <I2C_GetStatus>
    178e:	88 30       	cpi	r24, 0x08	; 8
    1790:	19 f4       	brne	.+6      	; 0x1798 <I2C_Start+0x36>
   {
      return E_OK;
    1792:	81 e0       	ldi	r24, 0x01	; 1
    1794:	89 83       	std	Y+1, r24	; 0x01
    1796:	01 c0       	rjmp	.+2      	; 0x179a <I2C_Start+0x38>
   }
   return E_ERROR;
    1798:	19 82       	std	Y+1, r1	; 0x01
    179a:	89 81       	ldd	r24, Y+1	; 0x01
}
    179c:	0f 90       	pop	r0
    179e:	cf 91       	pop	r28
    17a0:	df 91       	pop	r29
    17a2:	08 95       	ret

000017a4 <I2C_Repeated_Start>:
* Parameters (out): enuErrorStatus_t
* Return value: 1=E_OK or 0=FAIL
* Description: A function to send a repeated start bit to the I2C bus
************************************************************************************/
enuErrorStatus_t I2C_Repeated_Start(void)
{
    17a4:	df 93       	push	r29
    17a6:	cf 93       	push	r28
    17a8:	0f 92       	push	r0
    17aa:	cd b7       	in	r28, 0x3d	; 61
    17ac:	de b7       	in	r29, 0x3e	; 62
   //Setup the TWCR register for the repeated start condition & enable transmission
   TWCR_R=(1<<TWSTA_B) | (1<<TWEN_B) | (1<<TWINT_B);
    17ae:	e6 e5       	ldi	r30, 0x56	; 86
    17b0:	f0 e0       	ldi	r31, 0x00	; 0
    17b2:	84 ea       	ldi	r24, 0xA4	; 164
    17b4:	80 83       	st	Z, r24
   
   //wait for transmission to complete
   while(!GET_BIT(TWCR_R,TWINT_B));
    17b6:	e6 e5       	ldi	r30, 0x56	; 86
    17b8:	f0 e0       	ldi	r31, 0x00	; 0
    17ba:	80 81       	ld	r24, Z
    17bc:	88 1f       	adc	r24, r24
    17be:	88 27       	eor	r24, r24
    17c0:	88 1f       	adc	r24, r24
    17c2:	88 2f       	mov	r24, r24
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	90 70       	andi	r25, 0x00	; 0
    17c8:	00 97       	sbiw	r24, 0x00	; 0
    17ca:	a9 f3       	breq	.-22     	; 0x17b6 <I2C_Repeated_Start+0x12>
   //if repeated start bit is sent, return a E_OK
   if(I2C_GetStatus()!=RESTART_TRANSMITTED)
    17cc:	0e 94 4a 0b 	call	0x1694	; 0x1694 <I2C_GetStatus>
    17d0:	80 31       	cpi	r24, 0x10	; 16
    17d2:	11 f0       	breq	.+4      	; 0x17d8 <I2C_Repeated_Start+0x34>
   {
      return E_ERROR;
    17d4:	19 82       	std	Y+1, r1	; 0x01
    17d6:	02 c0       	rjmp	.+4      	; 0x17dc <I2C_Repeated_Start+0x38>
   }
   return E_OK;
    17d8:	81 e0       	ldi	r24, 0x01	; 1
    17da:	89 83       	std	Y+1, r24	; 0x01
    17dc:	89 81       	ldd	r24, Y+1	; 0x01
}
    17de:	0f 90       	pop	r0
    17e0:	cf 91       	pop	r28
    17e2:	df 91       	pop	r29
    17e4:	08 95       	ret

000017e6 <I2C_Stop>:
* Parameters (out): enuErrorStatus_t
* Return value: 1=E_OK or 0=FAIL
* Description: A function to send a stop bit to the I2C bus
************************************************************************************/
enuErrorStatus_t I2C_Stop(void)
{
    17e6:	df 93       	push	r29
    17e8:	cf 93       	push	r28
    17ea:	cd b7       	in	r28, 0x3d	; 61
    17ec:	de b7       	in	r29, 0x3e	; 62
   //Setup the TWCR register for the stop condition & enable transmission
   TWCR_R=(1<<TWSTO_B) | (1<<TWEN_B) | (1<<TWINT_B);
    17ee:	e6 e5       	ldi	r30, 0x56	; 86
    17f0:	f0 e0       	ldi	r31, 0x00	; 0
    17f2:	84 e9       	ldi	r24, 0x94	; 148
    17f4:	80 83       	st	Z, r24
   //return a E_OK
   return E_OK;
    17f6:	81 e0       	ldi	r24, 0x01	; 1
}
    17f8:	cf 91       	pop	r28
    17fa:	df 91       	pop	r29
    17fc:	08 95       	ret

000017fe <I2C_SendAddressFrame>:
* Parameters (out): enuErrorStatus_t
* Return value: 1=E_OK or 0=FAIL
* Description: A function to send the address portion of the I2C frame to the I2C bus
************************************************************************************/
enuErrorStatus_t I2C_SendAddressFrame(uint8_t u8SlaveAddress, enuI2CMode_t enuMode)
{
    17fe:	df 93       	push	r29
    1800:	cf 93       	push	r28
    1802:	00 d0       	rcall	.+0      	; 0x1804 <I2C_SendAddressFrame+0x6>
    1804:	0f 92       	push	r0
    1806:	cd b7       	in	r28, 0x3d	; 61
    1808:	de b7       	in	r29, 0x3e	; 62
    180a:	89 83       	std	Y+1, r24	; 0x01
    180c:	6a 83       	std	Y+2, r22	; 0x02
   //if parameters are invalid
   if ((enuMode!= Read && enuMode!= Write) || enuMode > I2C_MAX_ADDRESS)
    180e:	8a 81       	ldd	r24, Y+2	; 0x02
    1810:	81 30       	cpi	r24, 0x01	; 1
    1812:	19 f0       	breq	.+6      	; 0x181a <I2C_SendAddressFrame+0x1c>
    1814:	8a 81       	ldd	r24, Y+2	; 0x02
    1816:	88 23       	and	r24, r24
    1818:	19 f4       	brne	.+6      	; 0x1820 <I2C_SendAddressFrame+0x22>
    181a:	8a 81       	ldd	r24, Y+2	; 0x02
    181c:	88 37       	cpi	r24, 0x78	; 120
    181e:	10 f0       	brcs	.+4      	; 0x1824 <I2C_SendAddressFrame+0x26>
   {
      //return an E_ERROR
      return E_ERROR;
    1820:	1b 82       	std	Y+3, r1	; 0x03
    1822:	32 c0       	rjmp	.+100    	; 0x1888 <I2C_SendAddressFrame+0x8a>
   }
   //prepare the address frame and send it to the data register
   TWDR_R = (u8SlaveAddress<<1) | enuMode;
    1824:	e3 e2       	ldi	r30, 0x23	; 35
    1826:	f0 e0       	ldi	r31, 0x00	; 0
    1828:	89 81       	ldd	r24, Y+1	; 0x01
    182a:	88 2f       	mov	r24, r24
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	88 0f       	add	r24, r24
    1830:	99 1f       	adc	r25, r25
    1832:	98 2f       	mov	r25, r24
    1834:	8a 81       	ldd	r24, Y+2	; 0x02
    1836:	89 2b       	or	r24, r25
    1838:	80 83       	st	Z, r24
   //enable transmission
   TWCR_R= (1<<TWINT_B)|(1<<TWEN_B);
    183a:	e6 e5       	ldi	r30, 0x56	; 86
    183c:	f0 e0       	ldi	r31, 0x00	; 0
    183e:	84 e8       	ldi	r24, 0x84	; 132
    1840:	80 83       	st	Z, r24
   //wait for transmission to complete
   while(!GET_BIT(TWCR_R,TWINT_B));
    1842:	e6 e5       	ldi	r30, 0x56	; 86
    1844:	f0 e0       	ldi	r31, 0x00	; 0
    1846:	80 81       	ld	r24, Z
    1848:	88 1f       	adc	r24, r24
    184a:	88 27       	eor	r24, r24
    184c:	88 1f       	adc	r24, r24
    184e:	88 2f       	mov	r24, r24
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	90 70       	andi	r25, 0x00	; 0
    1854:	00 97       	sbiw	r24, 0x00	; 0
    1856:	a9 f3       	breq	.-22     	; 0x1842 <I2C_SendAddressFrame+0x44>
   //depending of the selected transmission mode
   if (enuMode == Read)
    1858:	8a 81       	ldd	r24, Y+2	; 0x02
    185a:	81 30       	cpi	r24, 0x01	; 1
    185c:	41 f4       	brne	.+16     	; 0x186e <I2C_SendAddressFrame+0x70>
   {
      //check if bus status is invalid
      if(I2C_GetStatus()!=SLA_R_TRANSMITTED_ACK)
    185e:	0e 94 4a 0b 	call	0x1694	; 0x1694 <I2C_GetStatus>
    1862:	80 34       	cpi	r24, 0x40	; 64
    1864:	79 f0       	breq	.+30     	; 0x1884 <I2C_SendAddressFrame+0x86>
      {
         //stop the communication
         I2C_Stop();
    1866:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <I2C_Stop>
         //return an E_ERROR
         return E_ERROR;
    186a:	1b 82       	std	Y+3, r1	; 0x03
    186c:	0d c0       	rjmp	.+26     	; 0x1888 <I2C_SendAddressFrame+0x8a>
      }
   }
   else if (enuMode == Write)
    186e:	8a 81       	ldd	r24, Y+2	; 0x02
    1870:	88 23       	and	r24, r24
    1872:	41 f4       	brne	.+16     	; 0x1884 <I2C_SendAddressFrame+0x86>
   {
      //check if bus status is invalid
      if(I2C_GetStatus()!=SLA_W_TRANSMITTED_ACK)
    1874:	0e 94 4a 0b 	call	0x1694	; 0x1694 <I2C_GetStatus>
    1878:	88 31       	cpi	r24, 0x18	; 24
    187a:	21 f0       	breq	.+8      	; 0x1884 <I2C_SendAddressFrame+0x86>
      {
         //stop the communication
         I2C_Stop();
    187c:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <I2C_Stop>
         //return an E_ERROR
         return E_ERROR;
    1880:	1b 82       	std	Y+3, r1	; 0x03
    1882:	02 c0       	rjmp	.+4      	; 0x1888 <I2C_SendAddressFrame+0x8a>
      }
   }
   //return a E_OK
   return E_OK;
    1884:	81 e0       	ldi	r24, 0x01	; 1
    1886:	8b 83       	std	Y+3, r24	; 0x03
    1888:	8b 81       	ldd	r24, Y+3	; 0x03
}
    188a:	0f 90       	pop	r0
    188c:	0f 90       	pop	r0
    188e:	0f 90       	pop	r0
    1890:	cf 91       	pop	r28
    1892:	df 91       	pop	r29
    1894:	08 95       	ret

00001896 <I2C_SendDataFrame>:
* Parameters (out): enuErrorStatus_t
* Return value: 1=E_OK or 0=FAIL
* Description: A function to send the data portion of the I2C frame to the I2C bus
************************************************************************************/
enuErrorStatus_t I2C_SendDataFrame(uint8_t u8Data)
{
    1896:	df 93       	push	r29
    1898:	cf 93       	push	r28
    189a:	00 d0       	rcall	.+0      	; 0x189c <I2C_SendDataFrame+0x6>
    189c:	0f 92       	push	r0
    189e:	cd b7       	in	r28, 0x3d	; 61
    18a0:	de b7       	in	r29, 0x3e	; 62
    18a2:	8a 83       	std	Y+2, r24	; 0x02
   //wait for current transmission to complete
   while(!GET_BIT(TWCR_R,TWINT_B));
    18a4:	e6 e5       	ldi	r30, 0x56	; 86
    18a6:	f0 e0       	ldi	r31, 0x00	; 0
    18a8:	80 81       	ld	r24, Z
    18aa:	88 1f       	adc	r24, r24
    18ac:	88 27       	eor	r24, r24
    18ae:	88 1f       	adc	r24, r24
    18b0:	88 2f       	mov	r24, r24
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	90 70       	andi	r25, 0x00	; 0
    18b6:	00 97       	sbiw	r24, 0x00	; 0
    18b8:	a9 f3       	breq	.-22     	; 0x18a4 <I2C_SendDataFrame+0xe>
   //set the sent value to the data register
   TWDR_R=u8Data;
    18ba:	e3 e2       	ldi	r30, 0x23	; 35
    18bc:	f0 e0       	ldi	r31, 0x00	; 0
    18be:	8a 81       	ldd	r24, Y+2	; 0x02
    18c0:	80 83       	st	Z, r24
   //enable transmission
   TWCR_R= (1<<TWINT_B)|(1<<TWEN_B);
    18c2:	e6 e5       	ldi	r30, 0x56	; 86
    18c4:	f0 e0       	ldi	r31, 0x00	; 0
    18c6:	84 e8       	ldi	r24, 0x84	; 132
    18c8:	80 83       	st	Z, r24
   //wait for transmission to complete
   while(!GET_BIT(TWCR_R,TWINT_B));
    18ca:	e6 e5       	ldi	r30, 0x56	; 86
    18cc:	f0 e0       	ldi	r31, 0x00	; 0
    18ce:	80 81       	ld	r24, Z
    18d0:	88 1f       	adc	r24, r24
    18d2:	88 27       	eor	r24, r24
    18d4:	88 1f       	adc	r24, r24
    18d6:	88 2f       	mov	r24, r24
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	90 70       	andi	r25, 0x00	; 0
    18dc:	00 97       	sbiw	r24, 0x00	; 0
    18de:	a9 f3       	breq	.-22     	; 0x18ca <I2C_SendDataFrame+0x34>
   //check if bus status is invalid
   uint8_t status=I2C_GetStatus();
    18e0:	0e 94 4a 0b 	call	0x1694	; 0x1694 <I2C_GetStatus>
    18e4:	89 83       	std	Y+1, r24	; 0x01
   if(status !=  MASTER_DATA_TRANSMITTED_ACK &&
    18e6:	89 81       	ldd	r24, Y+1	; 0x01
    18e8:	88 32       	cpi	r24, 0x28	; 40
    18ea:	41 f0       	breq	.+16     	; 0x18fc <I2C_SendDataFrame+0x66>
    18ec:	89 81       	ldd	r24, Y+1	; 0x01
    18ee:	88 3b       	cpi	r24, 0xB8	; 184
    18f0:	29 f0       	breq	.+10     	; 0x18fc <I2C_SendDataFrame+0x66>
    18f2:	89 81       	ldd	r24, Y+1	; 0x01
    18f4:	88 3c       	cpi	r24, 0xC8	; 200
    18f6:	11 f0       	breq	.+4      	; 0x18fc <I2C_SendDataFrame+0x66>
   status !=  SLAVE_DATA_TRANSMITTED_ACK  &&
   status !=  SLAVE_LAST_DATA_BYTE_TRANSMITTED_ACK)
   {
      return E_ERROR;
    18f8:	1b 82       	std	Y+3, r1	; 0x03
    18fa:	02 c0       	rjmp	.+4      	; 0x1900 <I2C_SendDataFrame+0x6a>
   }
   //return a E_OK
   return E_OK;
    18fc:	81 e0       	ldi	r24, 0x01	; 1
    18fe:	8b 83       	std	Y+3, r24	; 0x03
    1900:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1902:	0f 90       	pop	r0
    1904:	0f 90       	pop	r0
    1906:	0f 90       	pop	r0
    1908:	cf 91       	pop	r28
    190a:	df 91       	pop	r29
    190c:	08 95       	ret

0000190e <I2C_RecieveDataFrame>:
* Parameters (out): enuErrorStatus_t
* Return value: 1=E_OK or 0=FAIL
* Description: A function to receive the data portion of the I2C frame from the I2C bus
************************************************************************************/
enuErrorStatus_t I2C_RecieveDataFrame(uint8_t * pu8Data, enuI2CAck_t enuACK)
{
    190e:	df 93       	push	r29
    1910:	cf 93       	push	r28
    1912:	cd b7       	in	r28, 0x3d	; 61
    1914:	de b7       	in	r29, 0x3e	; 62
    1916:	29 97       	sbiw	r28, 0x09	; 9
    1918:	0f b6       	in	r0, 0x3f	; 63
    191a:	f8 94       	cli
    191c:	de bf       	out	0x3e, r29	; 62
    191e:	0f be       	out	0x3f, r0	; 63
    1920:	cd bf       	out	0x3d, r28	; 61
    1922:	9b 83       	std	Y+3, r25	; 0x03
    1924:	8a 83       	std	Y+2, r24	; 0x02
    1926:	6c 83       	std	Y+4, r22	; 0x04
   //check if pointer points to an invalid location
   if (pu8Data == NULLPTR)
    1928:	8a 81       	ldd	r24, Y+2	; 0x02
    192a:	9b 81       	ldd	r25, Y+3	; 0x03
    192c:	00 97       	sbiw	r24, 0x00	; 0
    192e:	11 f4       	brne	.+4      	; 0x1934 <I2C_RecieveDataFrame+0x26>
   {
      //if so return an E_ERROR
      return E_ERROR;
    1930:	19 86       	std	Y+9, r1	; 0x09
    1932:	61 c0       	rjmp	.+194    	; 0x19f6 <I2C_RecieveDataFrame+0xe8>
   }
   //wait for current transmission to complete
   while(!GET_BIT(TWCR_R,TWINT_B));
    1934:	e6 e5       	ldi	r30, 0x56	; 86
    1936:	f0 e0       	ldi	r31, 0x00	; 0
    1938:	80 81       	ld	r24, Z
    193a:	88 1f       	adc	r24, r24
    193c:	88 27       	eor	r24, r24
    193e:	88 1f       	adc	r24, r24
    1940:	88 2f       	mov	r24, r24
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	90 70       	andi	r25, 0x00	; 0
    1946:	00 97       	sbiw	r24, 0x00	; 0
    1948:	a9 f3       	breq	.-22     	; 0x1934 <I2C_RecieveDataFrame+0x26>
   //depending on the acknowledgment
   switch(enuACK)
    194a:	8c 81       	ldd	r24, Y+4	; 0x04
    194c:	28 2f       	mov	r18, r24
    194e:	30 e0       	ldi	r19, 0x00	; 0
    1950:	38 87       	std	Y+8, r19	; 0x08
    1952:	2f 83       	std	Y+7, r18	; 0x07
    1954:	8f 81       	ldd	r24, Y+7	; 0x07
    1956:	98 85       	ldd	r25, Y+8	; 0x08
    1958:	00 97       	sbiw	r24, 0x00	; 0
    195a:	31 f0       	breq	.+12     	; 0x1968 <I2C_RecieveDataFrame+0x5a>
    195c:	2f 81       	ldd	r18, Y+7	; 0x07
    195e:	38 85       	ldd	r19, Y+8	; 0x08
    1960:	21 30       	cpi	r18, 0x01	; 1
    1962:	31 05       	cpc	r19, r1
    1964:	31 f0       	breq	.+12     	; 0x1972 <I2C_RecieveDataFrame+0x64>
    1966:	0a c0       	rjmp	.+20     	; 0x197c <I2C_RecieveDataFrame+0x6e>
   {
      //set the acknowledgments bit in control register & enable transmission
      case ACK:      TWCR_R= (1<<TWINT_B)|(1<<TWEN_B)|(1<<TWEA_B);   break;
    1968:	e6 e5       	ldi	r30, 0x56	; 86
    196a:	f0 e0       	ldi	r31, 0x00	; 0
    196c:	84 ec       	ldi	r24, 0xC4	; 196
    196e:	80 83       	st	Z, r24
    1970:	07 c0       	rjmp	.+14     	; 0x1980 <I2C_RecieveDataFrame+0x72>
      case NACK:     TWCR_R= (1<<TWINT_B)|(1<<TWEN_B);               break;
    1972:	e6 e5       	ldi	r30, 0x56	; 86
    1974:	f0 e0       	ldi	r31, 0x00	; 0
    1976:	84 e8       	ldi	r24, 0x84	; 132
    1978:	80 83       	st	Z, r24
    197a:	02 c0       	rjmp	.+4      	; 0x1980 <I2C_RecieveDataFrame+0x72>
      default:       return E_ERROR;                                   break;
    197c:	19 86       	std	Y+9, r1	; 0x09
    197e:	3b c0       	rjmp	.+118    	; 0x19f6 <I2C_RecieveDataFrame+0xe8>
   }
   
   //wait for current transmission to complete
   while(!GET_BIT(TWCR_R,TWINT_B));
    1980:	e6 e5       	ldi	r30, 0x56	; 86
    1982:	f0 e0       	ldi	r31, 0x00	; 0
    1984:	80 81       	ld	r24, Z
    1986:	88 1f       	adc	r24, r24
    1988:	88 27       	eor	r24, r24
    198a:	88 1f       	adc	r24, r24
    198c:	88 2f       	mov	r24, r24
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	90 70       	andi	r25, 0x00	; 0
    1992:	00 97       	sbiw	r24, 0x00	; 0
    1994:	a9 f3       	breq	.-22     	; 0x1980 <I2C_RecieveDataFrame+0x72>
   
   //check if bus status is invalid
   uint8_t status=I2C_GetStatus();
    1996:	0e 94 4a 0b 	call	0x1694	; 0x1694 <I2C_GetStatus>
    199a:	89 83       	std	Y+1, r24	; 0x01
   switch(enuACK)
    199c:	8c 81       	ldd	r24, Y+4	; 0x04
    199e:	28 2f       	mov	r18, r24
    19a0:	30 e0       	ldi	r19, 0x00	; 0
    19a2:	3e 83       	std	Y+6, r19	; 0x06
    19a4:	2d 83       	std	Y+5, r18	; 0x05
    19a6:	8d 81       	ldd	r24, Y+5	; 0x05
    19a8:	9e 81       	ldd	r25, Y+6	; 0x06
    19aa:	00 97       	sbiw	r24, 0x00	; 0
    19ac:	31 f0       	breq	.+12     	; 0x19ba <I2C_RecieveDataFrame+0xac>
    19ae:	2d 81       	ldd	r18, Y+5	; 0x05
    19b0:	3e 81       	ldd	r19, Y+6	; 0x06
    19b2:	21 30       	cpi	r18, 0x01	; 1
    19b4:	31 05       	cpc	r19, r1
    19b6:	61 f0       	breq	.+24     	; 0x19d0 <I2C_RecieveDataFrame+0xc2>
    19b8:	16 c0       	rjmp	.+44     	; 0x19e6 <I2C_RecieveDataFrame+0xd8>
   {
      case ACK:
      if(status != DATA_RECEIVED_ACK &&
    19ba:	89 81       	ldd	r24, Y+1	; 0x01
    19bc:	80 35       	cpi	r24, 0x50	; 80
    19be:	99 f0       	breq	.+38     	; 0x19e6 <I2C_RecieveDataFrame+0xd8>
    19c0:	89 81       	ldd	r24, Y+1	; 0x01
    19c2:	80 38       	cpi	r24, 0x80	; 128
    19c4:	81 f0       	breq	.+32     	; 0x19e6 <I2C_RecieveDataFrame+0xd8>
    19c6:	89 81       	ldd	r24, Y+1	; 0x01
    19c8:	80 38       	cpi	r24, 0x80	; 128
    19ca:	69 f0       	breq	.+26     	; 0x19e6 <I2C_RecieveDataFrame+0xd8>
      status != OWN_SLA_W_DATA_RECEIVED_ACK &&
      status != GENERAL_CALL_DATA_RECEIVED_ACK)
      {
         //return an E_ERROR
         return E_ERROR;
    19cc:	19 86       	std	Y+9, r1	; 0x09
    19ce:	13 c0       	rjmp	.+38     	; 0x19f6 <I2C_RecieveDataFrame+0xe8>
      }
      break;
      
      case NACK:
      if(status != DATA_RECEIVED_NACK &&
    19d0:	89 81       	ldd	r24, Y+1	; 0x01
    19d2:	88 35       	cpi	r24, 0x58	; 88
    19d4:	41 f0       	breq	.+16     	; 0x19e6 <I2C_RecieveDataFrame+0xd8>
    19d6:	89 81       	ldd	r24, Y+1	; 0x01
    19d8:	88 38       	cpi	r24, 0x88	; 136
    19da:	29 f0       	breq	.+10     	; 0x19e6 <I2C_RecieveDataFrame+0xd8>
    19dc:	89 81       	ldd	r24, Y+1	; 0x01
    19de:	88 38       	cpi	r24, 0x88	; 136
    19e0:	11 f0       	breq	.+4      	; 0x19e6 <I2C_RecieveDataFrame+0xd8>
      status != OWN_SLA_W_DATA_RECEIVED_NACK &&
      status != GENERAL_CALL_DATA_RECEIVED_NACK)
      {
         //return an E_ERROR
         return E_ERROR;
    19e2:	19 86       	std	Y+9, r1	; 0x09
    19e4:	08 c0       	rjmp	.+16     	; 0x19f6 <I2C_RecieveDataFrame+0xe8>
      }
      break;
   }
   
   //store data in sent pointer
   *pu8Data = TWDR_R;
    19e6:	e3 e2       	ldi	r30, 0x23	; 35
    19e8:	f0 e0       	ldi	r31, 0x00	; 0
    19ea:	80 81       	ld	r24, Z
    19ec:	ea 81       	ldd	r30, Y+2	; 0x02
    19ee:	fb 81       	ldd	r31, Y+3	; 0x03
    19f0:	80 83       	st	Z, r24
   //return E_OK
   return E_OK;
    19f2:	31 e0       	ldi	r19, 0x01	; 1
    19f4:	39 87       	std	Y+9, r19	; 0x09
    19f6:	89 85       	ldd	r24, Y+9	; 0x09
}
    19f8:	29 96       	adiw	r28, 0x09	; 9
    19fa:	0f b6       	in	r0, 0x3f	; 63
    19fc:	f8 94       	cli
    19fe:	de bf       	out	0x3e, r29	; 62
    1a00:	0f be       	out	0x3f, r0	; 63
    1a02:	cd bf       	out	0x3d, r28	; 61
    1a04:	cf 91       	pop	r28
    1a06:	df 91       	pop	r29
    1a08:	08 95       	ret

00001a0a <I2C_MASTER_SendData>:
* Parameters (out): enuErrorStatus_t
* Return value: 1=E_OK or 0=FAIL
* Description: A function to send a byte to the I2C bus as a master
************************************************************************************/
enuErrorStatus_t I2C_MASTER_SendData(uint8_t u8SlaveAddress,uint8_t u8Data)
{
    1a0a:	df 93       	push	r29
    1a0c:	cf 93       	push	r28
    1a0e:	00 d0       	rcall	.+0      	; 0x1a10 <I2C_MASTER_SendData+0x6>
    1a10:	0f 92       	push	r0
    1a12:	cd b7       	in	r28, 0x3d	; 61
    1a14:	de b7       	in	r29, 0x3e	; 62
    1a16:	89 83       	std	Y+1, r24	; 0x01
    1a18:	6a 83       	std	Y+2, r22	; 0x02
   //start transmission
   I2C_Start();
    1a1a:	0e 94 b1 0b 	call	0x1762	; 0x1762 <I2C_Start>
   //Send the SLA+W frame
   I2C_SendAddressFrame(u8SlaveAddress,Write);
    1a1e:	89 81       	ldd	r24, Y+1	; 0x01
    1a20:	60 e0       	ldi	r22, 0x00	; 0
    1a22:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <I2C_SendAddressFrame>
   //send the data frame
   I2C_SendDataFrame(u8Data);
    1a26:	8a 81       	ldd	r24, Y+2	; 0x02
    1a28:	0e 94 4b 0c 	call	0x1896	; 0x1896 <I2C_SendDataFrame>
   //check if bus status is invalid
   if(I2C_GetStatus()!=MASTER_DATA_TRANSMITTED_ACK)
    1a2c:	0e 94 4a 0b 	call	0x1694	; 0x1694 <I2C_GetStatus>
    1a30:	88 32       	cpi	r24, 0x28	; 40
    1a32:	21 f0       	breq	.+8      	; 0x1a3c <I2C_MASTER_SendData+0x32>
   {
      //stop transmission
      I2C_Stop();
    1a34:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <I2C_Stop>
      //return an E_ERROR
      return E_ERROR;
    1a38:	1b 82       	std	Y+3, r1	; 0x03
    1a3a:	04 c0       	rjmp	.+8      	; 0x1a44 <I2C_MASTER_SendData+0x3a>
   }
   //stop transmission
   I2C_Stop();
    1a3c:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <I2C_Stop>
   //return a E_OK
   return E_OK;
    1a40:	81 e0       	ldi	r24, 0x01	; 1
    1a42:	8b 83       	std	Y+3, r24	; 0x03
    1a44:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1a46:	0f 90       	pop	r0
    1a48:	0f 90       	pop	r0
    1a4a:	0f 90       	pop	r0
    1a4c:	cf 91       	pop	r28
    1a4e:	df 91       	pop	r29
    1a50:	08 95       	ret

00001a52 <I2C_MASTER_RecieveData>:
* Parameters (out): enuErrorStatus_t
* Return value: 1=E_OK or 0=FAIL
* Description: A function to receive a byte from the I2C bus as a master
************************************************************************************/
enuErrorStatus_t I2C_MASTER_RecieveData(uint8_t u8SlaveAddress,uint8_t  *pu8Data)
{
    1a52:	df 93       	push	r29
    1a54:	cf 93       	push	r28
    1a56:	00 d0       	rcall	.+0      	; 0x1a58 <I2C_MASTER_RecieveData+0x6>
    1a58:	00 d0       	rcall	.+0      	; 0x1a5a <I2C_MASTER_RecieveData+0x8>
    1a5a:	cd b7       	in	r28, 0x3d	; 61
    1a5c:	de b7       	in	r29, 0x3e	; 62
    1a5e:	89 83       	std	Y+1, r24	; 0x01
    1a60:	7b 83       	std	Y+3, r23	; 0x03
    1a62:	6a 83       	std	Y+2, r22	; 0x02
   //check if pointer points to an invalid location
   if (pu8Data == NULLPTR)
    1a64:	8a 81       	ldd	r24, Y+2	; 0x02
    1a66:	9b 81       	ldd	r25, Y+3	; 0x03
    1a68:	00 97       	sbiw	r24, 0x00	; 0
    1a6a:	11 f4       	brne	.+4      	; 0x1a70 <I2C_MASTER_RecieveData+0x1e>
   {
      //if so return an E_ERROR
      return E_ERROR;
    1a6c:	1c 82       	std	Y+4, r1	; 0x04
    1a6e:	17 c0       	rjmp	.+46     	; 0x1a9e <I2C_MASTER_RecieveData+0x4c>
   }
   //start transmission
   I2C_Start();
    1a70:	0e 94 b1 0b 	call	0x1762	; 0x1762 <I2C_Start>
   //Send the SLA+R frame
   I2C_SendAddressFrame(u8SlaveAddress,Read);
    1a74:	89 81       	ldd	r24, Y+1	; 0x01
    1a76:	61 e0       	ldi	r22, 0x01	; 1
    1a78:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <I2C_SendAddressFrame>
   //send the data frame
   I2C_RecieveDataFrame(pu8Data,NACK);
    1a7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a7e:	9b 81       	ldd	r25, Y+3	; 0x03
    1a80:	61 e0       	ldi	r22, 0x01	; 1
    1a82:	0e 94 87 0c 	call	0x190e	; 0x190e <I2C_RecieveDataFrame>
   //check if bus status is invalid
   if(I2C_GetStatus()!=DATA_RECEIVED_NACK)
    1a86:	0e 94 4a 0b 	call	0x1694	; 0x1694 <I2C_GetStatus>
    1a8a:	88 35       	cpi	r24, 0x58	; 88
    1a8c:	21 f0       	breq	.+8      	; 0x1a96 <I2C_MASTER_RecieveData+0x44>
   {
      //stop transmission
      I2C_Stop();
    1a8e:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <I2C_Stop>
      //return an E_ERROR
      return E_ERROR;
    1a92:	1c 82       	std	Y+4, r1	; 0x04
    1a94:	04 c0       	rjmp	.+8      	; 0x1a9e <I2C_MASTER_RecieveData+0x4c>
   }
   //stop transmission
   I2C_Stop();
    1a96:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <I2C_Stop>
   //return a E_OK
   return E_OK;
    1a9a:	81 e0       	ldi	r24, 0x01	; 1
    1a9c:	8c 83       	std	Y+4, r24	; 0x04
    1a9e:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1aa0:	0f 90       	pop	r0
    1aa2:	0f 90       	pop	r0
    1aa4:	0f 90       	pop	r0
    1aa6:	0f 90       	pop	r0
    1aa8:	cf 91       	pop	r28
    1aaa:	df 91       	pop	r29
    1aac:	08 95       	ret

00001aae <I2C_SLAVE_SendData>:
* Parameters (out): enuErrorStatus_t
* Return value: 1=E_OK or 0=FAIL
* Description: A function to send a byte from the I2C bus as a slave
************************************************************************************/
enuErrorStatus_t I2C_SLAVE_SendData(uint8_t u8Data)
{
    1aae:	df 93       	push	r29
    1ab0:	cf 93       	push	r28
    1ab2:	00 d0       	rcall	.+0      	; 0x1ab4 <I2C_SLAVE_SendData+0x6>
    1ab4:	cd b7       	in	r28, 0x3d	; 61
    1ab6:	de b7       	in	r29, 0x3e	; 62
    1ab8:	89 83       	std	Y+1, r24	; 0x01
   //prepare peripheral to send data
   SET_BIT(TWCR_R,TWINT_B);
    1aba:	a6 e5       	ldi	r26, 0x56	; 86
    1abc:	b0 e0       	ldi	r27, 0x00	; 0
    1abe:	e6 e5       	ldi	r30, 0x56	; 86
    1ac0:	f0 e0       	ldi	r31, 0x00	; 0
    1ac2:	80 81       	ld	r24, Z
    1ac4:	80 68       	ori	r24, 0x80	; 128
    1ac6:	8c 93       	st	X, r24
   //wait for current transmission to finish
   while(!GET_BIT(TWCR_R,TWINT_B));
    1ac8:	e6 e5       	ldi	r30, 0x56	; 86
    1aca:	f0 e0       	ldi	r31, 0x00	; 0
    1acc:	80 81       	ld	r24, Z
    1ace:	88 1f       	adc	r24, r24
    1ad0:	88 27       	eor	r24, r24
    1ad2:	88 1f       	adc	r24, r24
    1ad4:	88 2f       	mov	r24, r24
    1ad6:	90 e0       	ldi	r25, 0x00	; 0
    1ad8:	90 70       	andi	r25, 0x00	; 0
    1ada:	00 97       	sbiw	r24, 0x00	; 0
    1adc:	a9 f3       	breq	.-22     	; 0x1ac8 <I2C_SLAVE_SendData+0x1a>
   //if status is valid
   if(I2C_GetStatus()==OWN_SLA_R_RECEIVED_ACK || I2C_GetStatus()==M_ARBITRATION_LOST_OWN_SLA_R_RECEIVED_ACK)
    1ade:	0e 94 4a 0b 	call	0x1694	; 0x1694 <I2C_GetStatus>
    1ae2:	88 3a       	cpi	r24, 0xA8	; 168
    1ae4:	21 f0       	breq	.+8      	; 0x1aee <I2C_SLAVE_SendData+0x40>
    1ae6:	0e 94 4a 0b 	call	0x1694	; 0x1694 <I2C_GetStatus>
    1aea:	80 3b       	cpi	r24, 0xB0	; 176
    1aec:	31 f4       	brne	.+12     	; 0x1afa <I2C_SLAVE_SendData+0x4c>
   {
      //send the data
      I2C_SendDataFrame(u8Data);
    1aee:	89 81       	ldd	r24, Y+1	; 0x01
    1af0:	0e 94 4b 0c 	call	0x1896	; 0x1896 <I2C_SendDataFrame>
      //return a E_OK state
      return E_OK;
    1af4:	81 e0       	ldi	r24, 0x01	; 1
    1af6:	8a 83       	std	Y+2, r24	; 0x02
    1af8:	01 c0       	rjmp	.+2      	; 0x1afc <I2C_SLAVE_SendData+0x4e>
   }
   //else return a fail state
   return E_ERROR;
    1afa:	1a 82       	std	Y+2, r1	; 0x02
    1afc:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1afe:	0f 90       	pop	r0
    1b00:	0f 90       	pop	r0
    1b02:	cf 91       	pop	r28
    1b04:	df 91       	pop	r29
    1b06:	08 95       	ret

00001b08 <I2C_SLAVE_ReceiveData>:
* Parameters (out): enuErrorStatus_t
* Return value: 1=E_OK or 0=FAIL
* Description: A function to receive a byte from the I2C bus as a slave
************************************************************************************/
enuErrorStatus_t I2C_SLAVE_ReceiveData(uint8_t *pu8Data)
{
    1b08:	df 93       	push	r29
    1b0a:	cf 93       	push	r28
    1b0c:	00 d0       	rcall	.+0      	; 0x1b0e <I2C_SLAVE_ReceiveData+0x6>
    1b0e:	0f 92       	push	r0
    1b10:	cd b7       	in	r28, 0x3d	; 61
    1b12:	de b7       	in	r29, 0x3e	; 62
    1b14:	9a 83       	std	Y+2, r25	; 0x02
    1b16:	89 83       	std	Y+1, r24	; 0x01
   //prepare peripheral to receive data
   SET_BIT(TWCR_R,TWINT_B);
    1b18:	a6 e5       	ldi	r26, 0x56	; 86
    1b1a:	b0 e0       	ldi	r27, 0x00	; 0
    1b1c:	e6 e5       	ldi	r30, 0x56	; 86
    1b1e:	f0 e0       	ldi	r31, 0x00	; 0
    1b20:	80 81       	ld	r24, Z
    1b22:	80 68       	ori	r24, 0x80	; 128
    1b24:	8c 93       	st	X, r24
   //wait for current transmission to finish
   while(!GET_BIT(TWCR_R,TWINT_B));
    1b26:	e6 e5       	ldi	r30, 0x56	; 86
    1b28:	f0 e0       	ldi	r31, 0x00	; 0
    1b2a:	80 81       	ld	r24, Z
    1b2c:	88 1f       	adc	r24, r24
    1b2e:	88 27       	eor	r24, r24
    1b30:	88 1f       	adc	r24, r24
    1b32:	88 2f       	mov	r24, r24
    1b34:	90 e0       	ldi	r25, 0x00	; 0
    1b36:	90 70       	andi	r25, 0x00	; 0
    1b38:	00 97       	sbiw	r24, 0x00	; 0
    1b3a:	a9 f3       	breq	.-22     	; 0x1b26 <I2C_SLAVE_ReceiveData+0x1e>
   //if status is valid
   if(I2C_GetStatus()==OWN_SLA_W_RECEIVED_ACK || I2C_GetStatus()== GENERAL_CALL_ADDRESS_RECEIVED_ACK)
    1b3c:	0e 94 4a 0b 	call	0x1694	; 0x1694 <I2C_GetStatus>
    1b40:	80 36       	cpi	r24, 0x60	; 96
    1b42:	21 f0       	breq	.+8      	; 0x1b4c <I2C_SLAVE_ReceiveData+0x44>
    1b44:	0e 94 4a 0b 	call	0x1694	; 0x1694 <I2C_GetStatus>
    1b48:	80 37       	cpi	r24, 0x70	; 112
    1b4a:	f1 f4       	brne	.+60     	; 0x1b88 <I2C_SLAVE_ReceiveData+0x80>
   {
      //receive the data
      I2C_RecieveDataFrame(pu8Data,ACK);
    1b4c:	89 81       	ldd	r24, Y+1	; 0x01
    1b4e:	9a 81       	ldd	r25, Y+2	; 0x02
    1b50:	60 e0       	ldi	r22, 0x00	; 0
    1b52:	0e 94 87 0c 	call	0x190e	; 0x190e <I2C_RecieveDataFrame>
      //complete transmission
      SET_BIT(TWCR_R,TWINT_B);
    1b56:	a6 e5       	ldi	r26, 0x56	; 86
    1b58:	b0 e0       	ldi	r27, 0x00	; 0
    1b5a:	e6 e5       	ldi	r30, 0x56	; 86
    1b5c:	f0 e0       	ldi	r31, 0x00	; 0
    1b5e:	80 81       	ld	r24, Z
    1b60:	80 68       	ori	r24, 0x80	; 128
    1b62:	8c 93       	st	X, r24
      //wait for current transmission to finish
      while(!GET_BIT(TWCR_R,TWINT_B));
    1b64:	e6 e5       	ldi	r30, 0x56	; 86
    1b66:	f0 e0       	ldi	r31, 0x00	; 0
    1b68:	80 81       	ld	r24, Z
    1b6a:	88 1f       	adc	r24, r24
    1b6c:	88 27       	eor	r24, r24
    1b6e:	88 1f       	adc	r24, r24
    1b70:	88 2f       	mov	r24, r24
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	90 70       	andi	r25, 0x00	; 0
    1b76:	00 97       	sbiw	r24, 0x00	; 0
    1b78:	a9 f3       	breq	.-22     	; 0x1b64 <I2C_SLAVE_ReceiveData+0x5c>
      //if stop bit is received
      if(I2C_GetStatus()==RECEIVED_STOP_OR_RESTART_AS_SLAVE)
    1b7a:	0e 94 4a 0b 	call	0x1694	; 0x1694 <I2C_GetStatus>
    1b7e:	80 3a       	cpi	r24, 0xA0	; 160
    1b80:	19 f4       	brne	.+6      	; 0x1b88 <I2C_SLAVE_ReceiveData+0x80>
      {
         //return a E_OK
         return E_OK;
    1b82:	81 e0       	ldi	r24, 0x01	; 1
    1b84:	8b 83       	std	Y+3, r24	; 0x03
    1b86:	01 c0       	rjmp	.+2      	; 0x1b8a <I2C_SLAVE_ReceiveData+0x82>
      }
   }
   //else return a fail
   return E_ERROR;
    1b88:	1b 82       	std	Y+3, r1	; 0x03
    1b8a:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1b8c:	0f 90       	pop	r0
    1b8e:	0f 90       	pop	r0
    1b90:	0f 90       	pop	r0
    1b92:	cf 91       	pop	r28
    1b94:	df 91       	pop	r29
    1b96:	08 95       	ret

00001b98 <I2C_Enable_Interrupt>:
* Parameters (out): enuErrorStatus_t
* Return value: 1=E_OK or 0=FAIL
* Description: A function to enable the I2C bus event interrupt
************************************************************************************/
enuErrorStatus_t I2C_Enable_Interrupt(void)
{
    1b98:	df 93       	push	r29
    1b9a:	cf 93       	push	r28
    1b9c:	cd b7       	in	r28, 0x3d	; 61
    1b9e:	de b7       	in	r29, 0x3e	; 62
   //set the interrupt enable bit in the control register
   SET_BIT(TWCR_R,TWIE_B);
    1ba0:	a6 e5       	ldi	r26, 0x56	; 86
    1ba2:	b0 e0       	ldi	r27, 0x00	; 0
    1ba4:	e6 e5       	ldi	r30, 0x56	; 86
    1ba6:	f0 e0       	ldi	r31, 0x00	; 0
    1ba8:	80 81       	ld	r24, Z
    1baa:	81 60       	ori	r24, 0x01	; 1
    1bac:	8c 93       	st	X, r24
   return E_OK;
    1bae:	81 e0       	ldi	r24, 0x01	; 1
}
    1bb0:	cf 91       	pop	r28
    1bb2:	df 91       	pop	r29
    1bb4:	08 95       	ret

00001bb6 <I2C_Disable_Interrupt>:
* Parameters (out): enuErrorStatus_t
* Return value: 1=E_OK or 0=FAIL
* Description: A function to disable the I2C bus event interrupt
************************************************************************************/
enuErrorStatus_t I2C_Disable_Interrupt(void)
{
    1bb6:	df 93       	push	r29
    1bb8:	cf 93       	push	r28
    1bba:	cd b7       	in	r28, 0x3d	; 61
    1bbc:	de b7       	in	r29, 0x3e	; 62
   //clear the interrupt enable bit in the control register
   CLEAR_BIT(TWCR_R,TWIE_B);
    1bbe:	a6 e5       	ldi	r26, 0x56	; 86
    1bc0:	b0 e0       	ldi	r27, 0x00	; 0
    1bc2:	e6 e5       	ldi	r30, 0x56	; 86
    1bc4:	f0 e0       	ldi	r31, 0x00	; 0
    1bc6:	80 81       	ld	r24, Z
    1bc8:	8e 7f       	andi	r24, 0xFE	; 254
    1bca:	8c 93       	st	X, r24
   return E_OK;
    1bcc:	81 e0       	ldi	r24, 0x01	; 1
}
    1bce:	cf 91       	pop	r28
    1bd0:	df 91       	pop	r29
    1bd2:	08 95       	ret

00001bd4 <I2C_SetCallBack>:
* Parameters (out): enuErrorStatus_t
* Return value: 1=E_OK or 0=FAIL
* Description: A function to set the callback function of the I2C bus event interrupt
************************************************************************************/
enuErrorStatus_t I2C_SetCallBack(void(*local_fptr)(void))
{
    1bd4:	df 93       	push	r29
    1bd6:	cf 93       	push	r28
    1bd8:	00 d0       	rcall	.+0      	; 0x1bda <I2C_SetCallBack+0x6>
    1bda:	0f 92       	push	r0
    1bdc:	cd b7       	in	r28, 0x3d	; 61
    1bde:	de b7       	in	r29, 0x3e	; 62
    1be0:	9a 83       	std	Y+2, r25	; 0x02
    1be2:	89 83       	std	Y+1, r24	; 0x01
   //check if callback function pointer points to a valid function
   if(local_fptr == NULLPTR)
    1be4:	89 81       	ldd	r24, Y+1	; 0x01
    1be6:	9a 81       	ldd	r25, Y+2	; 0x02
    1be8:	00 97       	sbiw	r24, 0x00	; 0
    1bea:	11 f4       	brne	.+4      	; 0x1bf0 <I2C_SetCallBack+0x1c>
   {
      return E_ERROR;
    1bec:	1b 82       	std	Y+3, r1	; 0x03
    1bee:	08 c0       	rjmp	.+16     	; 0x1c00 <I2C_SetCallBack+0x2c>
   }
   //set the callback function to the sent function pointer
   I2C_Callback=local_fptr;
    1bf0:	89 81       	ldd	r24, Y+1	; 0x01
    1bf2:	9a 81       	ldd	r25, Y+2	; 0x02
    1bf4:	90 93 c8 03 	sts	0x03C8, r25
    1bf8:	80 93 c7 03 	sts	0x03C7, r24
   return E_OK;
    1bfc:	81 e0       	ldi	r24, 0x01	; 1
    1bfe:	8b 83       	std	Y+3, r24	; 0x03
    1c00:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1c02:	0f 90       	pop	r0
    1c04:	0f 90       	pop	r0
    1c06:	0f 90       	pop	r0
    1c08:	cf 91       	pop	r28
    1c0a:	df 91       	pop	r29
    1c0c:	08 95       	ret

00001c0e <__vector_19>:
* Parameters (out): void
* Return value: void
* Description: I2C event interrupt service routine
************************************************************************************/
ISR(TWI_vect)
{
    1c0e:	1f 92       	push	r1
    1c10:	0f 92       	push	r0
    1c12:	0f b6       	in	r0, 0x3f	; 63
    1c14:	0f 92       	push	r0
    1c16:	11 24       	eor	r1, r1
    1c18:	2f 93       	push	r18
    1c1a:	3f 93       	push	r19
    1c1c:	4f 93       	push	r20
    1c1e:	5f 93       	push	r21
    1c20:	6f 93       	push	r22
    1c22:	7f 93       	push	r23
    1c24:	8f 93       	push	r24
    1c26:	9f 93       	push	r25
    1c28:	af 93       	push	r26
    1c2a:	bf 93       	push	r27
    1c2c:	ef 93       	push	r30
    1c2e:	ff 93       	push	r31
    1c30:	df 93       	push	r29
    1c32:	cf 93       	push	r28
    1c34:	cd b7       	in	r28, 0x3d	; 61
    1c36:	de b7       	in	r29, 0x3e	; 62
   //check if callback function pointer points to a valid function
   if(I2C_Callback != NULLPTR)
    1c38:	80 91 c7 03 	lds	r24, 0x03C7
    1c3c:	90 91 c8 03 	lds	r25, 0x03C8
    1c40:	00 97       	sbiw	r24, 0x00	; 0
    1c42:	29 f0       	breq	.+10     	; 0x1c4e <__vector_19+0x40>
   {
      //call the callback function
      I2C_Callback();
    1c44:	e0 91 c7 03 	lds	r30, 0x03C7
    1c48:	f0 91 c8 03 	lds	r31, 0x03C8
    1c4c:	09 95       	icall
   }
}
    1c4e:	cf 91       	pop	r28
    1c50:	df 91       	pop	r29
    1c52:	ff 91       	pop	r31
    1c54:	ef 91       	pop	r30
    1c56:	bf 91       	pop	r27
    1c58:	af 91       	pop	r26
    1c5a:	9f 91       	pop	r25
    1c5c:	8f 91       	pop	r24
    1c5e:	7f 91       	pop	r23
    1c60:	6f 91       	pop	r22
    1c62:	5f 91       	pop	r21
    1c64:	4f 91       	pop	r20
    1c66:	3f 91       	pop	r19
    1c68:	2f 91       	pop	r18
    1c6a:	0f 90       	pop	r0
    1c6c:	0f be       	out	0x3f, r0	; 63
    1c6e:	0f 90       	pop	r0
    1c70:	1f 90       	pop	r1
    1c72:	18 95       	reti

00001c74 <DIO_PinInit>:
* Parameters	: enuDIOPinNo, enuDIOPinDirection, enuDIOPinPullupResistorEnable
* Return Value	: enuErrorStatus_t
* Description  : Initialize one DIO pin according to the configuration
*************************************************************************************************/
enuErrorStatus_t DIO_PinInit(enuDIOPinNo_t enuDIOPinNo, enuDIOPinDirection_t enuDIOPinDirection, enuDIOPinPullupResistorEnable_t enuDIOPinPullupResistorEnable)
{
    1c74:	df 93       	push	r29
    1c76:	cf 93       	push	r28
    1c78:	00 d0       	rcall	.+0      	; 0x1c7a <DIO_PinInit+0x6>
    1c7a:	00 d0       	rcall	.+0      	; 0x1c7c <DIO_PinInit+0x8>
    1c7c:	cd b7       	in	r28, 0x3d	; 61
    1c7e:	de b7       	in	r29, 0x3e	; 62
    1c80:	8a 83       	std	Y+2, r24	; 0x02
    1c82:	6b 83       	std	Y+3, r22	; 0x03
    1c84:	4c 83       	std	Y+4, r20	; 0x04
	enuErrorStatus_t enuRetVar;

	if((enuDIOPinNo > DIO_PIN_NO_MIN_VALUE)													&& (enuDIOPinNo < DIO_PIN_NO_MAX_VALUE)												&&
    1c86:	8a 81       	ldd	r24, Y+2	; 0x02
    1c88:	80 32       	cpi	r24, 0x20	; 32
    1c8a:	08 f0       	brcs	.+2      	; 0x1c8e <DIO_PinInit+0x1a>
    1c8c:	8d c0       	rjmp	.+282    	; 0x1da8 <DIO_PinInit+0x134>
    1c8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c90:	82 30       	cpi	r24, 0x02	; 2
    1c92:	08 f0       	brcs	.+2      	; 0x1c96 <DIO_PinInit+0x22>
    1c94:	89 c0       	rjmp	.+274    	; 0x1da8 <DIO_PinInit+0x134>
    1c96:	8c 81       	ldd	r24, Y+4	; 0x04
    1c98:	82 30       	cpi	r24, 0x02	; 2
    1c9a:	08 f0       	brcs	.+2      	; 0x1c9e <DIO_PinInit+0x2a>
    1c9c:	85 c0       	rjmp	.+266    	; 0x1da8 <DIO_PinInit+0x134>
		(enuDIOPinDirection > DIO_PIN_DIRECTION_MIN_VALUE)									&& (enuDIOPinDirection < DIO_PIN_DIRECTION_MAX_VALUE)								&&
		(enuDIOPinPullupResistorEnable > DIO_PIN_PULLUP_RESISTOR_ENABLE_MIN_VALUE) && (enuDIOPinPullupResistorEnable < DIO_PIN_PULLUP_RESISTOR_ENABLE_MAX_VALUE))
	{
		/* Setting the direction of data [Input / Output] */
		ASSIGN_BIT(DDRx_R(DIO_PORT_NO(enuDIOPinNo)), DIO_PIN_NO(enuDIOPinNo), enuDIOPinDirection);
    1c9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca0:	86 95       	lsr	r24
    1ca2:	86 95       	lsr	r24
    1ca4:	86 95       	lsr	r24
    1ca6:	88 2f       	mov	r24, r24
    1ca8:	90 e0       	ldi	r25, 0x00	; 0
    1caa:	fc 01       	movw	r30, r24
    1cac:	e2 54       	subi	r30, 0x42	; 66
    1cae:	fc 4f       	sbci	r31, 0xFC	; 252
    1cb0:	80 81       	ld	r24, Z
    1cb2:	88 2f       	mov	r24, r24
    1cb4:	90 e0       	ldi	r25, 0x00	; 0
    1cb6:	01 97       	sbiw	r24, 0x01	; 1
    1cb8:	dc 01       	movw	r26, r24
    1cba:	8a 81       	ldd	r24, Y+2	; 0x02
    1cbc:	86 95       	lsr	r24
    1cbe:	86 95       	lsr	r24
    1cc0:	86 95       	lsr	r24
    1cc2:	88 2f       	mov	r24, r24
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	fc 01       	movw	r30, r24
    1cc8:	e2 54       	subi	r30, 0x42	; 66
    1cca:	fc 4f       	sbci	r31, 0xFC	; 252
    1ccc:	80 81       	ld	r24, Z
    1cce:	88 2f       	mov	r24, r24
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	01 97       	sbiw	r24, 0x01	; 1
    1cd4:	fc 01       	movw	r30, r24
    1cd6:	80 81       	ld	r24, Z
    1cd8:	48 2f       	mov	r20, r24
    1cda:	8a 81       	ldd	r24, Y+2	; 0x02
    1cdc:	88 2f       	mov	r24, r24
    1cde:	90 e0       	ldi	r25, 0x00	; 0
    1ce0:	9c 01       	movw	r18, r24
    1ce2:	27 70       	andi	r18, 0x07	; 7
    1ce4:	30 70       	andi	r19, 0x00	; 0
    1ce6:	81 e0       	ldi	r24, 0x01	; 1
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	02 c0       	rjmp	.+4      	; 0x1cf0 <DIO_PinInit+0x7c>
    1cec:	88 0f       	add	r24, r24
    1cee:	99 1f       	adc	r25, r25
    1cf0:	2a 95       	dec	r18
    1cf2:	e2 f7       	brpl	.-8      	; 0x1cec <DIO_PinInit+0x78>
    1cf4:	80 95       	com	r24
    1cf6:	48 23       	and	r20, r24
    1cf8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cfa:	28 2f       	mov	r18, r24
    1cfc:	30 e0       	ldi	r19, 0x00	; 0
    1cfe:	8a 81       	ldd	r24, Y+2	; 0x02
    1d00:	88 2f       	mov	r24, r24
    1d02:	90 e0       	ldi	r25, 0x00	; 0
    1d04:	87 70       	andi	r24, 0x07	; 7
    1d06:	90 70       	andi	r25, 0x00	; 0
    1d08:	b9 01       	movw	r22, r18
    1d0a:	02 c0       	rjmp	.+4      	; 0x1d10 <DIO_PinInit+0x9c>
    1d0c:	66 0f       	add	r22, r22
    1d0e:	77 1f       	adc	r23, r23
    1d10:	8a 95       	dec	r24
    1d12:	e2 f7       	brpl	.-8      	; 0x1d0c <DIO_PinInit+0x98>
    1d14:	cb 01       	movw	r24, r22
    1d16:	84 2b       	or	r24, r20
    1d18:	8c 93       	st	X, r24
		/* Selecting whether a pull-up resistor is connected to the selected pin or not */
		ASSIGN_BIT(PORTx_R(DIO_PORT_NO(enuDIOPinNo)), DIO_PIN_NO(enuDIOPinNo), enuDIOPinPullupResistorEnable);
    1d1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d1c:	86 95       	lsr	r24
    1d1e:	86 95       	lsr	r24
    1d20:	86 95       	lsr	r24
    1d22:	88 2f       	mov	r24, r24
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	fc 01       	movw	r30, r24
    1d28:	e2 54       	subi	r30, 0x42	; 66
    1d2a:	fc 4f       	sbci	r31, 0xFC	; 252
    1d2c:	80 81       	ld	r24, Z
    1d2e:	88 2f       	mov	r24, r24
    1d30:	90 e0       	ldi	r25, 0x00	; 0
    1d32:	dc 01       	movw	r26, r24
    1d34:	8a 81       	ldd	r24, Y+2	; 0x02
    1d36:	86 95       	lsr	r24
    1d38:	86 95       	lsr	r24
    1d3a:	86 95       	lsr	r24
    1d3c:	88 2f       	mov	r24, r24
    1d3e:	90 e0       	ldi	r25, 0x00	; 0
    1d40:	fc 01       	movw	r30, r24
    1d42:	e2 54       	subi	r30, 0x42	; 66
    1d44:	fc 4f       	sbci	r31, 0xFC	; 252
    1d46:	80 81       	ld	r24, Z
    1d48:	88 2f       	mov	r24, r24
    1d4a:	90 e0       	ldi	r25, 0x00	; 0
    1d4c:	fc 01       	movw	r30, r24
    1d4e:	80 81       	ld	r24, Z
    1d50:	48 2f       	mov	r20, r24
    1d52:	8a 81       	ldd	r24, Y+2	; 0x02
    1d54:	88 2f       	mov	r24, r24
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	9c 01       	movw	r18, r24
    1d5a:	27 70       	andi	r18, 0x07	; 7
    1d5c:	30 70       	andi	r19, 0x00	; 0
    1d5e:	81 e0       	ldi	r24, 0x01	; 1
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	02 c0       	rjmp	.+4      	; 0x1d68 <DIO_PinInit+0xf4>
    1d64:	88 0f       	add	r24, r24
    1d66:	99 1f       	adc	r25, r25
    1d68:	2a 95       	dec	r18
    1d6a:	e2 f7       	brpl	.-8      	; 0x1d64 <DIO_PinInit+0xf0>
    1d6c:	80 95       	com	r24
    1d6e:	48 23       	and	r20, r24
    1d70:	8c 81       	ldd	r24, Y+4	; 0x04
    1d72:	28 2f       	mov	r18, r24
    1d74:	30 e0       	ldi	r19, 0x00	; 0
    1d76:	8a 81       	ldd	r24, Y+2	; 0x02
    1d78:	88 2f       	mov	r24, r24
    1d7a:	90 e0       	ldi	r25, 0x00	; 0
    1d7c:	87 70       	andi	r24, 0x07	; 7
    1d7e:	90 70       	andi	r25, 0x00	; 0
    1d80:	b9 01       	movw	r22, r18
    1d82:	02 c0       	rjmp	.+4      	; 0x1d88 <DIO_PinInit+0x114>
    1d84:	66 0f       	add	r22, r22
    1d86:	77 1f       	adc	r23, r23
    1d88:	8a 95       	dec	r24
    1d8a:	e2 f7       	brpl	.-8      	; 0x1d84 <DIO_PinInit+0x110>
    1d8c:	cb 01       	movw	r24, r22
    1d8e:	84 2b       	or	r24, r20
    1d90:	8c 93       	st	X, r24
		aenuDIOPinState[enuDIOPinNo] = DIO_INIT_DONE;
    1d92:	8a 81       	ldd	r24, Y+2	; 0x02
    1d94:	88 2f       	mov	r24, r24
    1d96:	90 e0       	ldi	r25, 0x00	; 0
    1d98:	fc 01       	movw	r30, r24
    1d9a:	e7 53       	subi	r30, 0x37	; 55
    1d9c:	fc 4f       	sbci	r31, 0xFC	; 252
    1d9e:	81 e0       	ldi	r24, 0x01	; 1
    1da0:	80 83       	st	Z, r24
		enuRetVar = E_OK;
    1da2:	81 e0       	ldi	r24, 0x01	; 1
    1da4:	89 83       	std	Y+1, r24	; 0x01
    1da6:	01 c0       	rjmp	.+2      	; 0x1daa <DIO_PinInit+0x136>
	}
	else
	{
		enuRetVar = E_ERROR;
    1da8:	19 82       	std	Y+1, r1	; 0x01
	}
	return enuRetVar;
    1daa:	89 81       	ldd	r24, Y+1	; 0x01
}
    1dac:	0f 90       	pop	r0
    1dae:	0f 90       	pop	r0
    1db0:	0f 90       	pop	r0
    1db2:	0f 90       	pop	r0
    1db4:	cf 91       	pop	r28
    1db6:	df 91       	pop	r29
    1db8:	08 95       	ret

00001dba <DIO_PortInit>:
* Parameters	: enuDIOPortNo, u8DIOPortDirection, u8DIOPortPullupResistorEnable
* Return Value	: enuErrorStatus_t
* Description  : Initialize one DIO port according to the configuration
*************************************************************************************************/
enuErrorStatus_t DIO_PortInit(enuDIOPortNo_t enuDIOPortNo, uint8_t u8DIOPortDirection, uint8_t u8DIOPortPullupResistorEnable)
{
    1dba:	df 93       	push	r29
    1dbc:	cf 93       	push	r28
    1dbe:	00 d0       	rcall	.+0      	; 0x1dc0 <DIO_PortInit+0x6>
    1dc0:	00 d0       	rcall	.+0      	; 0x1dc2 <DIO_PortInit+0x8>
    1dc2:	cd b7       	in	r28, 0x3d	; 61
    1dc4:	de b7       	in	r29, 0x3e	; 62
    1dc6:	8a 83       	std	Y+2, r24	; 0x02
    1dc8:	6b 83       	std	Y+3, r22	; 0x03
    1dca:	4c 83       	std	Y+4, r20	; 0x04
	enuErrorStatus_t enuRetVar;

	if((enuDIOPortNo > DIO_PORT_NO_MIN_VALUE)														&& (enuDIOPortNo < DIO_PORT_NO_MAX_VALUE)													&&
    1dcc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dce:	84 30       	cpi	r24, 0x04	; 4
    1dd0:	20 f5       	brcc	.+72     	; 0x1e1a <DIO_PortInit+0x60>
		(u8DIOPortDirection >= DIO_PORT_DIRECTION_MIN_VALUE)									&& (u8DIOPortDirection <= DIO_PORT_DIRECTION_MAX_VALUE)								&&
		(u8DIOPortPullupResistorEnable >= DIO_PORT_PULLUP_RESISTOR_ENABLE_MIN_VALUE)	&& (u8DIOPortPullupResistorEnable <= DIO_PORT_PULLUP_RESISTOR_ENABLE_MAX_VALUE))
	{
		/* Setting the direction of data [Input / Output] */
		DDRx_R(enuDIOPortNo) = u8DIOPortDirection;
    1dd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd4:	88 2f       	mov	r24, r24
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	fc 01       	movw	r30, r24
    1dda:	e2 54       	subi	r30, 0x42	; 66
    1ddc:	fc 4f       	sbci	r31, 0xFC	; 252
    1dde:	80 81       	ld	r24, Z
    1de0:	88 2f       	mov	r24, r24
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	01 97       	sbiw	r24, 0x01	; 1
    1de6:	fc 01       	movw	r30, r24
    1de8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dea:	80 83       	st	Z, r24
		/* Selecting whether a pull-up resistor is connected to the selected port or not */
		PORTx_R(enuDIOPortNo) = u8DIOPortPullupResistorEnable;
    1dec:	8a 81       	ldd	r24, Y+2	; 0x02
    1dee:	88 2f       	mov	r24, r24
    1df0:	90 e0       	ldi	r25, 0x00	; 0
    1df2:	fc 01       	movw	r30, r24
    1df4:	e2 54       	subi	r30, 0x42	; 66
    1df6:	fc 4f       	sbci	r31, 0xFC	; 252
    1df8:	80 81       	ld	r24, Z
    1dfa:	88 2f       	mov	r24, r24
    1dfc:	90 e0       	ldi	r25, 0x00	; 0
    1dfe:	fc 01       	movw	r30, r24
    1e00:	8c 81       	ldd	r24, Y+4	; 0x04
    1e02:	80 83       	st	Z, r24
		aenuDIOPortState[enuDIOPortNo] = DIO_INIT_DONE;
    1e04:	8a 81       	ldd	r24, Y+2	; 0x02
    1e06:	88 2f       	mov	r24, r24
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	fc 01       	movw	r30, r24
    1e0c:	e7 51       	subi	r30, 0x17	; 23
    1e0e:	fc 4f       	sbci	r31, 0xFC	; 252
    1e10:	81 e0       	ldi	r24, 0x01	; 1
    1e12:	80 83       	st	Z, r24
		enuRetVar = E_OK;
    1e14:	81 e0       	ldi	r24, 0x01	; 1
    1e16:	89 83       	std	Y+1, r24	; 0x01
    1e18:	01 c0       	rjmp	.+2      	; 0x1e1c <DIO_PortInit+0x62>
	}
	else
	{
		enuRetVar = E_ERROR;
    1e1a:	19 82       	std	Y+1, r1	; 0x01
	}
	return enuRetVar;
    1e1c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e1e:	0f 90       	pop	r0
    1e20:	0f 90       	pop	r0
    1e22:	0f 90       	pop	r0
    1e24:	0f 90       	pop	r0
    1e26:	cf 91       	pop	r28
    1e28:	df 91       	pop	r29
    1e2a:	08 95       	ret

00001e2c <DIO_PinWrite>:
* Parameters	: enuDIOPinNo, u8PinData
* Return Value	: enuErrorStatus_t
* Description  : Write a digital value into the selected DIO pin
*************************************************************************************************/
enuErrorStatus_t DIO_PinWrite(enuDIOPinNo_t enuDIOPinNo, uint8_t u8PinData)
{
    1e2c:	df 93       	push	r29
    1e2e:	cf 93       	push	r28
    1e30:	00 d0       	rcall	.+0      	; 0x1e32 <DIO_PinWrite+0x6>
    1e32:	0f 92       	push	r0
    1e34:	cd b7       	in	r28, 0x3d	; 61
    1e36:	de b7       	in	r29, 0x3e	; 62
    1e38:	8a 83       	std	Y+2, r24	; 0x02
    1e3a:	6b 83       	std	Y+3, r22	; 0x03
	enuErrorStatus_t enuRetVar;
	
	if(aenuDIOPinState[enuDIOPinNo] == DIO_INIT_DONE)
    1e3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e3e:	88 2f       	mov	r24, r24
    1e40:	90 e0       	ldi	r25, 0x00	; 0
    1e42:	fc 01       	movw	r30, r24
    1e44:	e7 53       	subi	r30, 0x37	; 55
    1e46:	fc 4f       	sbci	r31, 0xFC	; 252
    1e48:	80 81       	ld	r24, Z
    1e4a:	81 30       	cpi	r24, 0x01	; 1
    1e4c:	09 f0       	breq	.+2      	; 0x1e50 <DIO_PinWrite+0x24>
    1e4e:	3f c0       	rjmp	.+126    	; 0x1ece <DIO_PinWrite+0xa2>
	{
		/* Writing the value into the corresponding pin */
		ASSIGN_BIT(PORTx_R(DIO_PORT_NO(enuDIOPinNo)), DIO_PIN_NO(enuDIOPinNo), u8PinData);
    1e50:	8a 81       	ldd	r24, Y+2	; 0x02
    1e52:	86 95       	lsr	r24
    1e54:	86 95       	lsr	r24
    1e56:	86 95       	lsr	r24
    1e58:	88 2f       	mov	r24, r24
    1e5a:	90 e0       	ldi	r25, 0x00	; 0
    1e5c:	fc 01       	movw	r30, r24
    1e5e:	e2 54       	subi	r30, 0x42	; 66
    1e60:	fc 4f       	sbci	r31, 0xFC	; 252
    1e62:	80 81       	ld	r24, Z
    1e64:	88 2f       	mov	r24, r24
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	dc 01       	movw	r26, r24
    1e6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e6c:	86 95       	lsr	r24
    1e6e:	86 95       	lsr	r24
    1e70:	86 95       	lsr	r24
    1e72:	88 2f       	mov	r24, r24
    1e74:	90 e0       	ldi	r25, 0x00	; 0
    1e76:	fc 01       	movw	r30, r24
    1e78:	e2 54       	subi	r30, 0x42	; 66
    1e7a:	fc 4f       	sbci	r31, 0xFC	; 252
    1e7c:	80 81       	ld	r24, Z
    1e7e:	88 2f       	mov	r24, r24
    1e80:	90 e0       	ldi	r25, 0x00	; 0
    1e82:	fc 01       	movw	r30, r24
    1e84:	80 81       	ld	r24, Z
    1e86:	48 2f       	mov	r20, r24
    1e88:	8a 81       	ldd	r24, Y+2	; 0x02
    1e8a:	88 2f       	mov	r24, r24
    1e8c:	90 e0       	ldi	r25, 0x00	; 0
    1e8e:	9c 01       	movw	r18, r24
    1e90:	27 70       	andi	r18, 0x07	; 7
    1e92:	30 70       	andi	r19, 0x00	; 0
    1e94:	81 e0       	ldi	r24, 0x01	; 1
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	02 c0       	rjmp	.+4      	; 0x1e9e <DIO_PinWrite+0x72>
    1e9a:	88 0f       	add	r24, r24
    1e9c:	99 1f       	adc	r25, r25
    1e9e:	2a 95       	dec	r18
    1ea0:	e2 f7       	brpl	.-8      	; 0x1e9a <DIO_PinWrite+0x6e>
    1ea2:	80 95       	com	r24
    1ea4:	48 23       	and	r20, r24
    1ea6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea8:	28 2f       	mov	r18, r24
    1eaa:	30 e0       	ldi	r19, 0x00	; 0
    1eac:	8a 81       	ldd	r24, Y+2	; 0x02
    1eae:	88 2f       	mov	r24, r24
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	87 70       	andi	r24, 0x07	; 7
    1eb4:	90 70       	andi	r25, 0x00	; 0
    1eb6:	b9 01       	movw	r22, r18
    1eb8:	02 c0       	rjmp	.+4      	; 0x1ebe <DIO_PinWrite+0x92>
    1eba:	66 0f       	add	r22, r22
    1ebc:	77 1f       	adc	r23, r23
    1ebe:	8a 95       	dec	r24
    1ec0:	e2 f7       	brpl	.-8      	; 0x1eba <DIO_PinWrite+0x8e>
    1ec2:	cb 01       	movw	r24, r22
    1ec4:	84 2b       	or	r24, r20
    1ec6:	8c 93       	st	X, r24
		enuRetVar = E_OK;
    1ec8:	81 e0       	ldi	r24, 0x01	; 1
    1eca:	89 83       	std	Y+1, r24	; 0x01
    1ecc:	01 c0       	rjmp	.+2      	; 0x1ed0 <DIO_PinWrite+0xa4>
	}
	else
	{
		enuRetVar = E_ERROR;
    1ece:	19 82       	std	Y+1, r1	; 0x01
	}
	return enuRetVar;	
    1ed0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ed2:	0f 90       	pop	r0
    1ed4:	0f 90       	pop	r0
    1ed6:	0f 90       	pop	r0
    1ed8:	cf 91       	pop	r28
    1eda:	df 91       	pop	r29
    1edc:	08 95       	ret

00001ede <DIO_PortWrite>:
* Parameters	: enuDIOPortNo, u8PortData
* Return Value	: enuErrorStatus_t
* Description  : Write a digital value into the selected DIO port
*************************************************************************************************/
enuErrorStatus_t DIO_PortWrite(enuDIOPortNo_t enuDIOPortNo, uint8_t u8PortData)
{
    1ede:	df 93       	push	r29
    1ee0:	cf 93       	push	r28
    1ee2:	00 d0       	rcall	.+0      	; 0x1ee4 <DIO_PortWrite+0x6>
    1ee4:	0f 92       	push	r0
    1ee6:	cd b7       	in	r28, 0x3d	; 61
    1ee8:	de b7       	in	r29, 0x3e	; 62
    1eea:	8a 83       	std	Y+2, r24	; 0x02
    1eec:	6b 83       	std	Y+3, r22	; 0x03
	enuErrorStatus_t enuRetVar;
	
	if(aenuDIOPortState[enuDIOPortNo] == DIO_INIT_DONE)
    1eee:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef0:	88 2f       	mov	r24, r24
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	fc 01       	movw	r30, r24
    1ef6:	e7 51       	subi	r30, 0x17	; 23
    1ef8:	fc 4f       	sbci	r31, 0xFC	; 252
    1efa:	80 81       	ld	r24, Z
    1efc:	81 30       	cpi	r24, 0x01	; 1
    1efe:	79 f4       	brne	.+30     	; 0x1f1e <DIO_PortWrite+0x40>
	{
		/* Writing the value into the corresponding port */
		PORTx_R(enuDIOPortNo) = u8PortData;
    1f00:	8a 81       	ldd	r24, Y+2	; 0x02
    1f02:	88 2f       	mov	r24, r24
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	fc 01       	movw	r30, r24
    1f08:	e2 54       	subi	r30, 0x42	; 66
    1f0a:	fc 4f       	sbci	r31, 0xFC	; 252
    1f0c:	80 81       	ld	r24, Z
    1f0e:	88 2f       	mov	r24, r24
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	fc 01       	movw	r30, r24
    1f14:	8b 81       	ldd	r24, Y+3	; 0x03
    1f16:	80 83       	st	Z, r24
		enuRetVar = E_OK;
    1f18:	81 e0       	ldi	r24, 0x01	; 1
    1f1a:	89 83       	std	Y+1, r24	; 0x01
    1f1c:	01 c0       	rjmp	.+2      	; 0x1f20 <DIO_PortWrite+0x42>
	}
	else
	{
		enuRetVar = E_ERROR;
    1f1e:	19 82       	std	Y+1, r1	; 0x01
	}
	return enuRetVar;	
    1f20:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f22:	0f 90       	pop	r0
    1f24:	0f 90       	pop	r0
    1f26:	0f 90       	pop	r0
    1f28:	cf 91       	pop	r28
    1f2a:	df 91       	pop	r29
    1f2c:	08 95       	ret

00001f2e <DIO_PinRead>:
* Parameters	: enuDIOPinNo, pu8PinData
* Return Value	: enuErrorStatus_t
* Description  : Read a digital value from the selected DIO pin
*************************************************************************************************/
enuErrorStatus_t DIO_PinRead(enuDIOPinNo_t enuDIOPinNo, uint8_t* pu8PinData)
{
    1f2e:	df 93       	push	r29
    1f30:	cf 93       	push	r28
    1f32:	00 d0       	rcall	.+0      	; 0x1f34 <DIO_PinRead+0x6>
    1f34:	00 d0       	rcall	.+0      	; 0x1f36 <DIO_PinRead+0x8>
    1f36:	cd b7       	in	r28, 0x3d	; 61
    1f38:	de b7       	in	r29, 0x3e	; 62
    1f3a:	8a 83       	std	Y+2, r24	; 0x02
    1f3c:	7c 83       	std	Y+4, r23	; 0x04
    1f3e:	6b 83       	std	Y+3, r22	; 0x03
	enuErrorStatus_t enuRetVar;
	
	if(aenuDIOPinState[enuDIOPinNo] == DIO_INIT_DONE)
    1f40:	8a 81       	ldd	r24, Y+2	; 0x02
    1f42:	88 2f       	mov	r24, r24
    1f44:	90 e0       	ldi	r25, 0x00	; 0
    1f46:	fc 01       	movw	r30, r24
    1f48:	e7 53       	subi	r30, 0x37	; 55
    1f4a:	fc 4f       	sbci	r31, 0xFC	; 252
    1f4c:	80 81       	ld	r24, Z
    1f4e:	81 30       	cpi	r24, 0x01	; 1
    1f50:	99 f5       	brne	.+102    	; 0x1fb8 <DIO_PinRead+0x8a>
	{
		/* Reading the value from the corresponding pin */
		*pu8PinData = GET_BIT(PINx_R(DIO_PORT_NO(enuDIOPinNo)), DIO_PIN_NO(enuDIOPinNo));
    1f52:	8a 81       	ldd	r24, Y+2	; 0x02
    1f54:	86 95       	lsr	r24
    1f56:	86 95       	lsr	r24
    1f58:	86 95       	lsr	r24
    1f5a:	88 2f       	mov	r24, r24
    1f5c:	90 e0       	ldi	r25, 0x00	; 0
    1f5e:	fc 01       	movw	r30, r24
    1f60:	e2 54       	subi	r30, 0x42	; 66
    1f62:	fc 4f       	sbci	r31, 0xFC	; 252
    1f64:	80 81       	ld	r24, Z
    1f66:	88 2f       	mov	r24, r24
    1f68:	90 e0       	ldi	r25, 0x00	; 0
    1f6a:	02 97       	sbiw	r24, 0x02	; 2
    1f6c:	fc 01       	movw	r30, r24
    1f6e:	80 81       	ld	r24, Z
    1f70:	48 2f       	mov	r20, r24
    1f72:	50 e0       	ldi	r21, 0x00	; 0
    1f74:	8a 81       	ldd	r24, Y+2	; 0x02
    1f76:	88 2f       	mov	r24, r24
    1f78:	90 e0       	ldi	r25, 0x00	; 0
    1f7a:	9c 01       	movw	r18, r24
    1f7c:	27 70       	andi	r18, 0x07	; 7
    1f7e:	30 70       	andi	r19, 0x00	; 0
    1f80:	81 e0       	ldi	r24, 0x01	; 1
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	02 c0       	rjmp	.+4      	; 0x1f8a <DIO_PinRead+0x5c>
    1f86:	88 0f       	add	r24, r24
    1f88:	99 1f       	adc	r25, r25
    1f8a:	2a 95       	dec	r18
    1f8c:	e2 f7       	brpl	.-8      	; 0x1f86 <DIO_PinRead+0x58>
    1f8e:	9a 01       	movw	r18, r20
    1f90:	28 23       	and	r18, r24
    1f92:	39 23       	and	r19, r25
    1f94:	8a 81       	ldd	r24, Y+2	; 0x02
    1f96:	88 2f       	mov	r24, r24
    1f98:	90 e0       	ldi	r25, 0x00	; 0
    1f9a:	87 70       	andi	r24, 0x07	; 7
    1f9c:	90 70       	andi	r25, 0x00	; 0
    1f9e:	a9 01       	movw	r20, r18
    1fa0:	02 c0       	rjmp	.+4      	; 0x1fa6 <DIO_PinRead+0x78>
    1fa2:	55 95       	asr	r21
    1fa4:	47 95       	ror	r20
    1fa6:	8a 95       	dec	r24
    1fa8:	e2 f7       	brpl	.-8      	; 0x1fa2 <DIO_PinRead+0x74>
    1faa:	ca 01       	movw	r24, r20
    1fac:	eb 81       	ldd	r30, Y+3	; 0x03
    1fae:	fc 81       	ldd	r31, Y+4	; 0x04
    1fb0:	80 83       	st	Z, r24
		enuRetVar = E_OK;
    1fb2:	81 e0       	ldi	r24, 0x01	; 1
    1fb4:	89 83       	std	Y+1, r24	; 0x01
    1fb6:	01 c0       	rjmp	.+2      	; 0x1fba <DIO_PinRead+0x8c>
	}
	else
	{
		enuRetVar = E_ERROR;
    1fb8:	19 82       	std	Y+1, r1	; 0x01
	}
	return enuRetVar;	
    1fba:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fbc:	0f 90       	pop	r0
    1fbe:	0f 90       	pop	r0
    1fc0:	0f 90       	pop	r0
    1fc2:	0f 90       	pop	r0
    1fc4:	cf 91       	pop	r28
    1fc6:	df 91       	pop	r29
    1fc8:	08 95       	ret

00001fca <DIO_PortRead>:
* Parameters	: enuDIOPortNo, pu8PortData
* Return Value	: enuErrorStatus_t
* Description  : Read a digital value from the selected DIO port
*************************************************************************************************/
enuErrorStatus_t DIO_PortRead(enuDIOPortNo_t enuDIOPortNo, uint8_t* pu8PortData)
{
    1fca:	df 93       	push	r29
    1fcc:	cf 93       	push	r28
    1fce:	00 d0       	rcall	.+0      	; 0x1fd0 <DIO_PortRead+0x6>
    1fd0:	00 d0       	rcall	.+0      	; 0x1fd2 <DIO_PortRead+0x8>
    1fd2:	cd b7       	in	r28, 0x3d	; 61
    1fd4:	de b7       	in	r29, 0x3e	; 62
    1fd6:	8a 83       	std	Y+2, r24	; 0x02
    1fd8:	7c 83       	std	Y+4, r23	; 0x04
    1fda:	6b 83       	std	Y+3, r22	; 0x03
	enuErrorStatus_t enuRetVar;
	
	if(aenuDIOPortState[enuDIOPortNo] == DIO_INIT_DONE)
    1fdc:	8a 81       	ldd	r24, Y+2	; 0x02
    1fde:	88 2f       	mov	r24, r24
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	fc 01       	movw	r30, r24
    1fe4:	e7 51       	subi	r30, 0x17	; 23
    1fe6:	fc 4f       	sbci	r31, 0xFC	; 252
    1fe8:	80 81       	ld	r24, Z
    1fea:	81 30       	cpi	r24, 0x01	; 1
    1fec:	91 f4       	brne	.+36     	; 0x2012 <DIO_PortRead+0x48>
	{
		/* Reading the value from the corresponding port */
		*pu8PortData = PINx_R(enuDIOPortNo);
    1fee:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff0:	88 2f       	mov	r24, r24
    1ff2:	90 e0       	ldi	r25, 0x00	; 0
    1ff4:	fc 01       	movw	r30, r24
    1ff6:	e2 54       	subi	r30, 0x42	; 66
    1ff8:	fc 4f       	sbci	r31, 0xFC	; 252
    1ffa:	80 81       	ld	r24, Z
    1ffc:	88 2f       	mov	r24, r24
    1ffe:	90 e0       	ldi	r25, 0x00	; 0
    2000:	02 97       	sbiw	r24, 0x02	; 2
    2002:	fc 01       	movw	r30, r24
    2004:	80 81       	ld	r24, Z
    2006:	eb 81       	ldd	r30, Y+3	; 0x03
    2008:	fc 81       	ldd	r31, Y+4	; 0x04
    200a:	80 83       	st	Z, r24
		enuRetVar = E_OK;
    200c:	81 e0       	ldi	r24, 0x01	; 1
    200e:	89 83       	std	Y+1, r24	; 0x01
    2010:	01 c0       	rjmp	.+2      	; 0x2014 <DIO_PortRead+0x4a>
	}
	else
	{
		enuRetVar = E_ERROR;
    2012:	19 82       	std	Y+1, r1	; 0x01
	}
	return enuRetVar;	
    2014:	89 81       	ldd	r24, Y+1	; 0x01
}
    2016:	0f 90       	pop	r0
    2018:	0f 90       	pop	r0
    201a:	0f 90       	pop	r0
    201c:	0f 90       	pop	r0
    201e:	cf 91       	pop	r28
    2020:	df 91       	pop	r29
    2022:	08 95       	ret

00002024 <DIO_PinToggle>:
* Parameters	: enuDIOPinNo
* Return Value	: enuErrorStatus_t
* Description  : Toggle the digital value of the selected DIO pin
*************************************************************************************************/
enuErrorStatus_t DIO_PinToggle(enuDIOPinNo_t enuDIOPinNo)
{
    2024:	df 93       	push	r29
    2026:	cf 93       	push	r28
    2028:	00 d0       	rcall	.+0      	; 0x202a <DIO_PinToggle+0x6>
    202a:	0f 92       	push	r0
    202c:	cd b7       	in	r28, 0x3d	; 61
    202e:	de b7       	in	r29, 0x3e	; 62
    2030:	8b 83       	std	Y+3, r24	; 0x03
	enuErrorStatus_t enuRetVar;
	uint8_t u8PinData;
	
	if(aenuDIOPinState[enuDIOPinNo] == DIO_INIT_DONE)
    2032:	8b 81       	ldd	r24, Y+3	; 0x03
    2034:	88 2f       	mov	r24, r24
    2036:	90 e0       	ldi	r25, 0x00	; 0
    2038:	fc 01       	movw	r30, r24
    203a:	e7 53       	subi	r30, 0x37	; 55
    203c:	fc 4f       	sbci	r31, 0xFC	; 252
    203e:	80 81       	ld	r24, Z
    2040:	81 30       	cpi	r24, 0x01	; 1
    2042:	09 f0       	breq	.+2      	; 0x2046 <DIO_PinToggle+0x22>
    2044:	70 c0       	rjmp	.+224    	; 0x2126 <DIO_PinToggle+0x102>
	{
		/* Reading the value from the corresponding pin */
		u8PinData = GET_BIT(PINx_R(DIO_PORT_NO(enuDIOPinNo)), DIO_PIN_NO(enuDIOPinNo));
    2046:	8b 81       	ldd	r24, Y+3	; 0x03
    2048:	86 95       	lsr	r24
    204a:	86 95       	lsr	r24
    204c:	86 95       	lsr	r24
    204e:	88 2f       	mov	r24, r24
    2050:	90 e0       	ldi	r25, 0x00	; 0
    2052:	fc 01       	movw	r30, r24
    2054:	e2 54       	subi	r30, 0x42	; 66
    2056:	fc 4f       	sbci	r31, 0xFC	; 252
    2058:	80 81       	ld	r24, Z
    205a:	88 2f       	mov	r24, r24
    205c:	90 e0       	ldi	r25, 0x00	; 0
    205e:	02 97       	sbiw	r24, 0x02	; 2
    2060:	fc 01       	movw	r30, r24
    2062:	80 81       	ld	r24, Z
    2064:	48 2f       	mov	r20, r24
    2066:	50 e0       	ldi	r21, 0x00	; 0
    2068:	8b 81       	ldd	r24, Y+3	; 0x03
    206a:	88 2f       	mov	r24, r24
    206c:	90 e0       	ldi	r25, 0x00	; 0
    206e:	9c 01       	movw	r18, r24
    2070:	27 70       	andi	r18, 0x07	; 7
    2072:	30 70       	andi	r19, 0x00	; 0
    2074:	81 e0       	ldi	r24, 0x01	; 1
    2076:	90 e0       	ldi	r25, 0x00	; 0
    2078:	02 c0       	rjmp	.+4      	; 0x207e <DIO_PinToggle+0x5a>
    207a:	88 0f       	add	r24, r24
    207c:	99 1f       	adc	r25, r25
    207e:	2a 95       	dec	r18
    2080:	e2 f7       	brpl	.-8      	; 0x207a <DIO_PinToggle+0x56>
    2082:	9a 01       	movw	r18, r20
    2084:	28 23       	and	r18, r24
    2086:	39 23       	and	r19, r25
    2088:	8b 81       	ldd	r24, Y+3	; 0x03
    208a:	88 2f       	mov	r24, r24
    208c:	90 e0       	ldi	r25, 0x00	; 0
    208e:	87 70       	andi	r24, 0x07	; 7
    2090:	90 70       	andi	r25, 0x00	; 0
    2092:	a9 01       	movw	r20, r18
    2094:	02 c0       	rjmp	.+4      	; 0x209a <DIO_PinToggle+0x76>
    2096:	55 95       	asr	r21
    2098:	47 95       	ror	r20
    209a:	8a 95       	dec	r24
    209c:	e2 f7       	brpl	.-8      	; 0x2096 <DIO_PinToggle+0x72>
    209e:	ca 01       	movw	r24, r20
    20a0:	89 83       	std	Y+1, r24	; 0x01
		/* Writing the value into the corresponding pin */
		ASSIGN_BIT(PORTx_R(DIO_PORT_NO(enuDIOPinNo)), DIO_PIN_NO(enuDIOPinNo), ~u8PinData);
    20a2:	8b 81       	ldd	r24, Y+3	; 0x03
    20a4:	86 95       	lsr	r24
    20a6:	86 95       	lsr	r24
    20a8:	86 95       	lsr	r24
    20aa:	88 2f       	mov	r24, r24
    20ac:	90 e0       	ldi	r25, 0x00	; 0
    20ae:	fc 01       	movw	r30, r24
    20b0:	e2 54       	subi	r30, 0x42	; 66
    20b2:	fc 4f       	sbci	r31, 0xFC	; 252
    20b4:	80 81       	ld	r24, Z
    20b6:	88 2f       	mov	r24, r24
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	dc 01       	movw	r26, r24
    20bc:	8b 81       	ldd	r24, Y+3	; 0x03
    20be:	86 95       	lsr	r24
    20c0:	86 95       	lsr	r24
    20c2:	86 95       	lsr	r24
    20c4:	88 2f       	mov	r24, r24
    20c6:	90 e0       	ldi	r25, 0x00	; 0
    20c8:	fc 01       	movw	r30, r24
    20ca:	e2 54       	subi	r30, 0x42	; 66
    20cc:	fc 4f       	sbci	r31, 0xFC	; 252
    20ce:	80 81       	ld	r24, Z
    20d0:	88 2f       	mov	r24, r24
    20d2:	90 e0       	ldi	r25, 0x00	; 0
    20d4:	fc 01       	movw	r30, r24
    20d6:	80 81       	ld	r24, Z
    20d8:	48 2f       	mov	r20, r24
    20da:	8b 81       	ldd	r24, Y+3	; 0x03
    20dc:	88 2f       	mov	r24, r24
    20de:	90 e0       	ldi	r25, 0x00	; 0
    20e0:	9c 01       	movw	r18, r24
    20e2:	27 70       	andi	r18, 0x07	; 7
    20e4:	30 70       	andi	r19, 0x00	; 0
    20e6:	81 e0       	ldi	r24, 0x01	; 1
    20e8:	90 e0       	ldi	r25, 0x00	; 0
    20ea:	02 c0       	rjmp	.+4      	; 0x20f0 <DIO_PinToggle+0xcc>
    20ec:	88 0f       	add	r24, r24
    20ee:	99 1f       	adc	r25, r25
    20f0:	2a 95       	dec	r18
    20f2:	e2 f7       	brpl	.-8      	; 0x20ec <DIO_PinToggle+0xc8>
    20f4:	80 95       	com	r24
    20f6:	48 23       	and	r20, r24
    20f8:	89 81       	ldd	r24, Y+1	; 0x01
    20fa:	88 2f       	mov	r24, r24
    20fc:	90 e0       	ldi	r25, 0x00	; 0
    20fe:	9c 01       	movw	r18, r24
    2100:	20 95       	com	r18
    2102:	30 95       	com	r19
    2104:	8b 81       	ldd	r24, Y+3	; 0x03
    2106:	88 2f       	mov	r24, r24
    2108:	90 e0       	ldi	r25, 0x00	; 0
    210a:	87 70       	andi	r24, 0x07	; 7
    210c:	90 70       	andi	r25, 0x00	; 0
    210e:	b9 01       	movw	r22, r18
    2110:	02 c0       	rjmp	.+4      	; 0x2116 <DIO_PinToggle+0xf2>
    2112:	66 0f       	add	r22, r22
    2114:	77 1f       	adc	r23, r23
    2116:	8a 95       	dec	r24
    2118:	e2 f7       	brpl	.-8      	; 0x2112 <DIO_PinToggle+0xee>
    211a:	cb 01       	movw	r24, r22
    211c:	84 2b       	or	r24, r20
    211e:	8c 93       	st	X, r24
		enuRetVar = E_OK;
    2120:	81 e0       	ldi	r24, 0x01	; 1
    2122:	8a 83       	std	Y+2, r24	; 0x02
    2124:	01 c0       	rjmp	.+2      	; 0x2128 <DIO_PinToggle+0x104>
	}
	else
	{
		enuRetVar = E_ERROR;
    2126:	1a 82       	std	Y+2, r1	; 0x02
	}
	return enuRetVar;	
    2128:	8a 81       	ldd	r24, Y+2	; 0x02
}
    212a:	0f 90       	pop	r0
    212c:	0f 90       	pop	r0
    212e:	0f 90       	pop	r0
    2130:	cf 91       	pop	r28
    2132:	df 91       	pop	r29
    2134:	08 95       	ret

00002136 <DIO_PortToggle>:
* Parameters	: enuDIOPortNo
* Return Value	: enuErrorStatus_t
* Description  : Toggle the digital value of the selected DIO port
*************************************************************************************************/
enuErrorStatus_t DIO_PortToggle(enuDIOPortNo_t enuDIOPortNo)
{
    2136:	df 93       	push	r29
    2138:	cf 93       	push	r28
    213a:	00 d0       	rcall	.+0      	; 0x213c <DIO_PortToggle+0x6>
    213c:	0f 92       	push	r0
    213e:	cd b7       	in	r28, 0x3d	; 61
    2140:	de b7       	in	r29, 0x3e	; 62
    2142:	8b 83       	std	Y+3, r24	; 0x03
	enuErrorStatus_t enuRetVar;
	uint8_t u8PortData;
	
	if(aenuDIOPortState[enuDIOPortNo] == DIO_INIT_DONE)
    2144:	8b 81       	ldd	r24, Y+3	; 0x03
    2146:	88 2f       	mov	r24, r24
    2148:	90 e0       	ldi	r25, 0x00	; 0
    214a:	fc 01       	movw	r30, r24
    214c:	e7 51       	subi	r30, 0x17	; 23
    214e:	fc 4f       	sbci	r31, 0xFC	; 252
    2150:	80 81       	ld	r24, Z
    2152:	81 30       	cpi	r24, 0x01	; 1
    2154:	e9 f4       	brne	.+58     	; 0x2190 <DIO_PortToggle+0x5a>
	{
		/* Reading the value from the corresponding port */
		u8PortData = PINx_R(enuDIOPortNo);
    2156:	8b 81       	ldd	r24, Y+3	; 0x03
    2158:	88 2f       	mov	r24, r24
    215a:	90 e0       	ldi	r25, 0x00	; 0
    215c:	fc 01       	movw	r30, r24
    215e:	e2 54       	subi	r30, 0x42	; 66
    2160:	fc 4f       	sbci	r31, 0xFC	; 252
    2162:	80 81       	ld	r24, Z
    2164:	88 2f       	mov	r24, r24
    2166:	90 e0       	ldi	r25, 0x00	; 0
    2168:	02 97       	sbiw	r24, 0x02	; 2
    216a:	fc 01       	movw	r30, r24
    216c:	80 81       	ld	r24, Z
    216e:	89 83       	std	Y+1, r24	; 0x01
		/* Writing the value into the corresponding port */
		PORTx_R(enuDIOPortNo) = ~u8PortData;
    2170:	8b 81       	ldd	r24, Y+3	; 0x03
    2172:	88 2f       	mov	r24, r24
    2174:	90 e0       	ldi	r25, 0x00	; 0
    2176:	fc 01       	movw	r30, r24
    2178:	e2 54       	subi	r30, 0x42	; 66
    217a:	fc 4f       	sbci	r31, 0xFC	; 252
    217c:	80 81       	ld	r24, Z
    217e:	88 2f       	mov	r24, r24
    2180:	90 e0       	ldi	r25, 0x00	; 0
    2182:	fc 01       	movw	r30, r24
    2184:	89 81       	ldd	r24, Y+1	; 0x01
    2186:	80 95       	com	r24
    2188:	80 83       	st	Z, r24
		enuRetVar = E_OK;
    218a:	81 e0       	ldi	r24, 0x01	; 1
    218c:	8a 83       	std	Y+2, r24	; 0x02
    218e:	01 c0       	rjmp	.+2      	; 0x2192 <DIO_PortToggle+0x5c>
	}
	else
	{
		enuRetVar = E_ERROR;
    2190:	1a 82       	std	Y+2, r1	; 0x02
	}
	return enuRetVar;	
    2192:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2194:	0f 90       	pop	r0
    2196:	0f 90       	pop	r0
    2198:	0f 90       	pop	r0
    219a:	cf 91       	pop	r28
    219c:	df 91       	pop	r29
    219e:	08 95       	ret

000021a0 <ADC_Init>:
* Parameters	: enuADCReferenceSelectionBits, enuADCLeftAdjustResult, enuADCPrescalerSelectBits
* Return Value	: enuErrorStatus_t
* Description  : Initialize ADC module according to the configuration parameters
*************************************************************************************************/
enuErrorStatus_t ADC_Init(enuADCReferenceSelectionBits_t enuADCReferenceSelectionBits, enuADCLeftAdjustResult_t enuADCLeftAdjustResult, enuADCPrescalerSelectBits_t enuADCPrescalerSelectBits)
{
    21a0:	df 93       	push	r29
    21a2:	cf 93       	push	r28
    21a4:	00 d0       	rcall	.+0      	; 0x21a6 <ADC_Init+0x6>
    21a6:	00 d0       	rcall	.+0      	; 0x21a8 <ADC_Init+0x8>
    21a8:	cd b7       	in	r28, 0x3d	; 61
    21aa:	de b7       	in	r29, 0x3e	; 62
    21ac:	8a 83       	std	Y+2, r24	; 0x02
    21ae:	6b 83       	std	Y+3, r22	; 0x03
    21b0:	4c 83       	std	Y+4, r20	; 0x04
	enuErrorStatus_t enuRetVar;
    
	if((enuADCReferenceSelectionBits > ADC_REFERENCE_SELECTION_BITS_MIN_VALUE)				&& (enuADCReferenceSelectionBits < ADC_REFERENCE_SELECTION_BITS_MAX_VALUE) &&
    21b2:	8a 81       	ldd	r24, Y+2	; 0x02
    21b4:	84 30       	cpi	r24, 0x04	; 4
    21b6:	08 f0       	brcs	.+2      	; 0x21ba <ADC_Init+0x1a>
    21b8:	50 c0       	rjmp	.+160    	; 0x225a <ADC_Init+0xba>
    21ba:	8a 81       	ldd	r24, Y+2	; 0x02
    21bc:	82 30       	cpi	r24, 0x02	; 2
    21be:	09 f4       	brne	.+2      	; 0x21c2 <ADC_Init+0x22>
    21c0:	4c c0       	rjmp	.+152    	; 0x225a <ADC_Init+0xba>
    21c2:	8b 81       	ldd	r24, Y+3	; 0x03
    21c4:	82 30       	cpi	r24, 0x02	; 2
    21c6:	08 f0       	brcs	.+2      	; 0x21ca <ADC_Init+0x2a>
    21c8:	48 c0       	rjmp	.+144    	; 0x225a <ADC_Init+0xba>
    21ca:	8c 81       	ldd	r24, Y+4	; 0x04
    21cc:	88 30       	cpi	r24, 0x08	; 8
    21ce:	08 f0       	brcs	.+2      	; 0x21d2 <ADC_Init+0x32>
    21d0:	44 c0       	rjmp	.+136    	; 0x225a <ADC_Init+0xba>
		(enuADCReferenceSelectionBits != ADC_REFERENCE_SELECTION_BITS_NOT_VALID_VALUE)	&& (enuADCLeftAdjustResult > ADC_LEFT_ADJUST_RESULT_MIN_VALUE)					&& 
		(enuADCLeftAdjustResult < ADC_LEFT_ADJUST_RESULT_MAX_VALUE)								&& (enuADCPrescalerSelectBits > ADC_PRESCALER_SELECT_BITS_MIN_VALUE)			&& 
		(enuADCPrescalerSelectBits < ADC_PRESCALER_SELECT_BITS_MAX_VALUE))
	{	   
		/* Selecting whether the voltage reference is AREF, AVCC or Internal VREF */
		ASSIGN_BITS(ADMUX_R, ADC_REFERENCE_SELECT_START_BIT, enuADCReferenceSelectionBits, ADC_REFERENCE_SELECT_MASK);
    21d2:	a7 e2       	ldi	r26, 0x27	; 39
    21d4:	b0 e0       	ldi	r27, 0x00	; 0
    21d6:	e7 e2       	ldi	r30, 0x27	; 39
    21d8:	f0 e0       	ldi	r31, 0x00	; 0
    21da:	80 81       	ld	r24, Z
    21dc:	28 2f       	mov	r18, r24
    21de:	2f 73       	andi	r18, 0x3F	; 63
    21e0:	8a 81       	ldd	r24, Y+2	; 0x02
    21e2:	88 2f       	mov	r24, r24
    21e4:	90 e0       	ldi	r25, 0x00	; 0
    21e6:	00 24       	eor	r0, r0
    21e8:	96 95       	lsr	r25
    21ea:	87 95       	ror	r24
    21ec:	07 94       	ror	r0
    21ee:	96 95       	lsr	r25
    21f0:	87 95       	ror	r24
    21f2:	07 94       	ror	r0
    21f4:	98 2f       	mov	r25, r24
    21f6:	80 2d       	mov	r24, r0
    21f8:	82 2b       	or	r24, r18
    21fa:	8c 93       	st	X, r24
		/* Selecting whether the output is right adjusted or left adjusted */
		ASSIGN_BIT(ADMUX_R, ADC_LEFT_ADJUST_RESULT_BIT, enuADCLeftAdjustResult);
    21fc:	a7 e2       	ldi	r26, 0x27	; 39
    21fe:	b0 e0       	ldi	r27, 0x00	; 0
    2200:	e7 e2       	ldi	r30, 0x27	; 39
    2202:	f0 e0       	ldi	r31, 0x00	; 0
    2204:	80 81       	ld	r24, Z
    2206:	28 2f       	mov	r18, r24
    2208:	2f 7d       	andi	r18, 0xDF	; 223
    220a:	8b 81       	ldd	r24, Y+3	; 0x03
    220c:	88 2f       	mov	r24, r24
    220e:	90 e0       	ldi	r25, 0x00	; 0
    2210:	88 0f       	add	r24, r24
    2212:	99 1f       	adc	r25, r25
    2214:	82 95       	swap	r24
    2216:	92 95       	swap	r25
    2218:	90 7f       	andi	r25, 0xF0	; 240
    221a:	98 27       	eor	r25, r24
    221c:	80 7f       	andi	r24, 0xF0	; 240
    221e:	98 27       	eor	r25, r24
    2220:	82 2b       	or	r24, r18
    2222:	8c 93       	st	X, r24
		/* Saving the state of left adjust result into a temporary variable to be used in the other API */
		enuADCLeftAdjustResultState = enuADCLeftAdjustResult;
    2224:	8b 81       	ldd	r24, Y+3	; 0x03
    2226:	80 93 ee 03 	sts	0x03EE, r24
		/* Selecting the value of the prescaler divisor factor */
		ASSIGN_BITS(ADCSRA_R, ADC_PRESCALER_SELECT_START_BIT, ADC_PRESCALER_SELECT_VALUE(enuADCPrescalerSelectBits), ADC_PRESCALER_SELECT_MASK);
    222a:	a6 e2       	ldi	r26, 0x26	; 38
    222c:	b0 e0       	ldi	r27, 0x00	; 0
    222e:	e6 e2       	ldi	r30, 0x26	; 38
    2230:	f0 e0       	ldi	r31, 0x00	; 0
    2232:	80 81       	ld	r24, Z
    2234:	98 2f       	mov	r25, r24
    2236:	98 7f       	andi	r25, 0xF8	; 248
    2238:	8c 81       	ldd	r24, Y+4	; 0x04
    223a:	8f 5f       	subi	r24, 0xFF	; 255
    223c:	89 2b       	or	r24, r25
    223e:	8c 93       	st	X, r24
		/* Enabling the ADC module */
		SET_BIT(ADCSRA_R, ADC_MODULE_EN_BIT);
    2240:	a6 e2       	ldi	r26, 0x26	; 38
    2242:	b0 e0       	ldi	r27, 0x00	; 0
    2244:	e6 e2       	ldi	r30, 0x26	; 38
    2246:	f0 e0       	ldi	r31, 0x00	; 0
    2248:	80 81       	ld	r24, Z
    224a:	80 68       	ori	r24, 0x80	; 128
    224c:	8c 93       	st	X, r24
		enuADCState = ADC_INIT_DONE;
    224e:	81 e0       	ldi	r24, 0x01	; 1
    2250:	80 93 ed 03 	sts	0x03ED, r24
		enuRetVar = E_OK;
    2254:	81 e0       	ldi	r24, 0x01	; 1
    2256:	89 83       	std	Y+1, r24	; 0x01
    2258:	01 c0       	rjmp	.+2      	; 0x225c <ADC_Init+0xbc>
	}
	else
	{
		enuRetVar = E_ERROR;
    225a:	19 82       	std	Y+1, r1	; 0x01
	}
	return enuRetVar;
    225c:	89 81       	ldd	r24, Y+1	; 0x01
}
    225e:	0f 90       	pop	r0
    2260:	0f 90       	pop	r0
    2262:	0f 90       	pop	r0
    2264:	0f 90       	pop	r0
    2266:	cf 91       	pop	r28
    2268:	df 91       	pop	r29
    226a:	08 95       	ret

0000226c <ADC_ReadChannel>:
* Parameters	: enuAnalogChannel, pu16Data
* Return Value	: enuErrorStatus_t
* Description  : Initiate an analog read from the selected channel
*************************************************************************************************/
enuErrorStatus_t ADC_ReadChannel(enuADCAnalogChannel_t enuAnalogChannel, uint16_t* pu16Data)
{
    226c:	df 93       	push	r29
    226e:	cf 93       	push	r28
    2270:	00 d0       	rcall	.+0      	; 0x2272 <ADC_ReadChannel+0x6>
    2272:	00 d0       	rcall	.+0      	; 0x2274 <ADC_ReadChannel+0x8>
    2274:	cd b7       	in	r28, 0x3d	; 61
    2276:	de b7       	in	r29, 0x3e	; 62
    2278:	8a 83       	std	Y+2, r24	; 0x02
    227a:	7c 83       	std	Y+4, r23	; 0x04
    227c:	6b 83       	std	Y+3, r22	; 0x03
	enuErrorStatus_t enuRetVar;
	
   if(enuADCState == ADC_INIT_DONE)
    227e:	80 91 ed 03 	lds	r24, 0x03ED
    2282:	81 30       	cpi	r24, 0x01	; 1
    2284:	09 f0       	breq	.+2      	; 0x2288 <ADC_ReadChannel+0x1c>
    2286:	66 c0       	rjmp	.+204    	; 0x2354 <ADC_ReadChannel+0xe8>
   {
	   /* Selecting the analog channel(s) used (Single or Differential Input) */
	   ASSIGN_BITS(ADMUX_R, ADC_CHANNEL_SELECT_START_BIT, enuAnalogChannel, ADC_CHANNEL_SELECT_MASK);
    2288:	a7 e2       	ldi	r26, 0x27	; 39
    228a:	b0 e0       	ldi	r27, 0x00	; 0
    228c:	e7 e2       	ldi	r30, 0x27	; 39
    228e:	f0 e0       	ldi	r31, 0x00	; 0
    2290:	80 81       	ld	r24, Z
    2292:	98 2f       	mov	r25, r24
    2294:	90 7e       	andi	r25, 0xE0	; 224
    2296:	8a 81       	ldd	r24, Y+2	; 0x02
    2298:	89 2b       	or	r24, r25
    229a:	8c 93       	st	X, r24
	   /* Starting the conversion process */
	   SET_BIT(ADCSRA_R, ADC_START_CONVERSION_EN_BIT);
    229c:	a6 e2       	ldi	r26, 0x26	; 38
    229e:	b0 e0       	ldi	r27, 0x00	; 0
    22a0:	e6 e2       	ldi	r30, 0x26	; 38
    22a2:	f0 e0       	ldi	r31, 0x00	; 0
    22a4:	80 81       	ld	r24, Z
    22a6:	80 64       	ori	r24, 0x40	; 64
    22a8:	8c 93       	st	X, r24
		/* Waiting for the ADC conversion until it has successfully been completely */
		while(IS_BIT_CLEAR(ADCSRA_R, ADC_CONVERSION_COMPLETE_FLAG_BIT));
    22aa:	e6 e2       	ldi	r30, 0x26	; 38
    22ac:	f0 e0       	ldi	r31, 0x00	; 0
    22ae:	80 81       	ld	r24, Z
    22b0:	88 2f       	mov	r24, r24
    22b2:	90 e0       	ldi	r25, 0x00	; 0
    22b4:	80 71       	andi	r24, 0x10	; 16
    22b6:	90 70       	andi	r25, 0x00	; 0
    22b8:	95 95       	asr	r25
    22ba:	87 95       	ror	r24
    22bc:	95 95       	asr	r25
    22be:	87 95       	ror	r24
    22c0:	95 95       	asr	r25
    22c2:	87 95       	ror	r24
    22c4:	95 95       	asr	r25
    22c6:	87 95       	ror	r24
    22c8:	00 97       	sbiw	r24, 0x00	; 0
    22ca:	79 f3       	breq	.-34     	; 0x22aa <ADC_ReadChannel+0x3e>
		/* Reading the value from the corresponding ADC channel */
		if(enuADCLeftAdjustResultState == ADC_DISABLE_LEFT_ADJUST_RESULT)
    22cc:	80 91 ee 03 	lds	r24, 0x03EE
    22d0:	88 23       	and	r24, r24
    22d2:	a9 f4       	brne	.+42     	; 0x22fe <ADC_ReadChannel+0x92>
		{
			*pu16Data = ADC_VALUE_RIGHT_ADJUSTED;
    22d4:	e4 e2       	ldi	r30, 0x24	; 36
    22d6:	f0 e0       	ldi	r31, 0x00	; 0
    22d8:	80 81       	ld	r24, Z
    22da:	28 2f       	mov	r18, r24
    22dc:	30 e0       	ldi	r19, 0x00	; 0
    22de:	e5 e2       	ldi	r30, 0x25	; 37
    22e0:	f0 e0       	ldi	r31, 0x00	; 0
    22e2:	80 81       	ld	r24, Z
    22e4:	88 2f       	mov	r24, r24
    22e6:	90 e0       	ldi	r25, 0x00	; 0
    22e8:	83 70       	andi	r24, 0x03	; 3
    22ea:	90 70       	andi	r25, 0x00	; 0
    22ec:	98 2f       	mov	r25, r24
    22ee:	88 27       	eor	r24, r24
    22f0:	82 2b       	or	r24, r18
    22f2:	93 2b       	or	r25, r19
    22f4:	eb 81       	ldd	r30, Y+3	; 0x03
    22f6:	fc 81       	ldd	r31, Y+4	; 0x04
    22f8:	91 83       	std	Z+1, r25	; 0x01
    22fa:	80 83       	st	Z, r24
    22fc:	1a c0       	rjmp	.+52     	; 0x2332 <ADC_ReadChannel+0xc6>
		}
		else
		{
			*pu16Data = ADC_VALUE_LEFT_ADJUSTED;
    22fe:	e4 e2       	ldi	r30, 0x24	; 36
    2300:	f0 e0       	ldi	r31, 0x00	; 0
    2302:	80 81       	ld	r24, Z
    2304:	82 95       	swap	r24
    2306:	86 95       	lsr	r24
    2308:	86 95       	lsr	r24
    230a:	83 70       	andi	r24, 0x03	; 3
    230c:	88 2f       	mov	r24, r24
    230e:	90 e0       	ldi	r25, 0x00	; 0
    2310:	9c 01       	movw	r18, r24
    2312:	30 70       	andi	r19, 0x00	; 0
    2314:	e5 e2       	ldi	r30, 0x25	; 37
    2316:	f0 e0       	ldi	r31, 0x00	; 0
    2318:	80 81       	ld	r24, Z
    231a:	88 2f       	mov	r24, r24
    231c:	90 e0       	ldi	r25, 0x00	; 0
    231e:	88 0f       	add	r24, r24
    2320:	99 1f       	adc	r25, r25
    2322:	88 0f       	add	r24, r24
    2324:	99 1f       	adc	r25, r25
    2326:	82 2b       	or	r24, r18
    2328:	93 2b       	or	r25, r19
    232a:	eb 81       	ldd	r30, Y+3	; 0x03
    232c:	fc 81       	ldd	r31, Y+4	; 0x04
    232e:	91 83       	std	Z+1, r25	; 0x01
    2330:	80 83       	st	Z, r24
		}
		/* Clearing the ADC conversion complete flag */
		CLEAR_BIT(ADCSRA_R, ADC_CONVERSION_COMPLETE_FLAG_BIT);
    2332:	a6 e2       	ldi	r26, 0x26	; 38
    2334:	b0 e0       	ldi	r27, 0x00	; 0
    2336:	e6 e2       	ldi	r30, 0x26	; 38
    2338:	f0 e0       	ldi	r31, 0x00	; 0
    233a:	80 81       	ld	r24, Z
    233c:	8f 7e       	andi	r24, 0xEF	; 239
    233e:	8c 93       	st	X, r24
		/* Stopping the conversion process */
		CLEAR_BIT(ADCSRA_R, ADC_START_CONVERSION_EN_BIT);
    2340:	a6 e2       	ldi	r26, 0x26	; 38
    2342:	b0 e0       	ldi	r27, 0x00	; 0
    2344:	e6 e2       	ldi	r30, 0x26	; 38
    2346:	f0 e0       	ldi	r31, 0x00	; 0
    2348:	80 81       	ld	r24, Z
    234a:	8f 7b       	andi	r24, 0xBF	; 191
    234c:	8c 93       	st	X, r24
	   enuRetVar = E_OK;
    234e:	81 e0       	ldi	r24, 0x01	; 1
    2350:	89 83       	std	Y+1, r24	; 0x01
    2352:	01 c0       	rjmp	.+2      	; 0x2356 <ADC_ReadChannel+0xea>
   }
   else
   {
	   enuRetVar = E_ERROR;
    2354:	19 82       	std	Y+1, r1	; 0x01
   }
   return enuRetVar;	
    2356:	89 81       	ldd	r24, Y+1	; 0x01
} 
    2358:	0f 90       	pop	r0
    235a:	0f 90       	pop	r0
    235c:	0f 90       	pop	r0
    235e:	0f 90       	pop	r0
    2360:	cf 91       	pop	r28
    2362:	df 91       	pop	r29
    2364:	08 95       	ret

00002366 <LM35_Init>:
* Parameters	: void
* Return Value	: void
* Description  : Initialize the LM35 sensor with the ADC module
*************************************************************************************************/
void LM35_Init(void)
{
    2366:	df 93       	push	r29
    2368:	cf 93       	push	r28
    236a:	cd b7       	in	r28, 0x3d	; 61
    236c:	de b7       	in	r29, 0x3e	; 62
	/* Initializing the ADC module to start reading from the LM35 sensor */
	ADC_Init(ADC_AVCC, ADC_DISABLE_LEFT_ADJUST_RESULT, ADC_DIVISOR_FACTOR_IS_128);
    236e:	81 e0       	ldi	r24, 0x01	; 1
    2370:	60 e0       	ldi	r22, 0x00	; 0
    2372:	47 e0       	ldi	r20, 0x07	; 7
    2374:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <ADC_Init>
	enuLM35State = LM35_INIT_DONE;
    2378:	81 e0       	ldi	r24, 0x01	; 1
    237a:	80 93 ef 03 	sts	0x03EF, r24
}
    237e:	cf 91       	pop	r28
    2380:	df 91       	pop	r29
    2382:	08 95       	ret

00002384 <LM35_ReadTemperature>:
* Parameters	: pu8Temperature
* Return Value	: enuErrorStatus_t
* Description  : Read the value of the sensor's temperature
*************************************************************************************************/
enuErrorStatus_t LM35_ReadTemperature(uint8_t* pu8Temperature)
{
    2384:	df 93       	push	r29
    2386:	cf 93       	push	r28
    2388:	00 d0       	rcall	.+0      	; 0x238a <LM35_ReadTemperature+0x6>
    238a:	00 d0       	rcall	.+0      	; 0x238c <LM35_ReadTemperature+0x8>
    238c:	0f 92       	push	r0
    238e:	cd b7       	in	r28, 0x3d	; 61
    2390:	de b7       	in	r29, 0x3e	; 62
    2392:	9d 83       	std	Y+5, r25	; 0x05
    2394:	8c 83       	std	Y+4, r24	; 0x04
	enuErrorStatus_t enuRetVar;
	uint16_t u16ADCData;
	
	if(enuLM35State == LM35_INIT_DONE)
    2396:	80 91 ef 03 	lds	r24, 0x03EF
    239a:	81 30       	cpi	r24, 0x01	; 1
    239c:	91 f5       	brne	.+100    	; 0x2402 <LM35_ReadTemperature+0x7e>
	{
		/* Reading the value of the ADC channel connected to the LM35 sensor */
		ADC_ReadChannel(LM35_ANALOG_DATA_PIN_NO, &u16ADCData);
    239e:	9e 01       	movw	r18, r28
    23a0:	2e 5f       	subi	r18, 0xFE	; 254
    23a2:	3f 4f       	sbci	r19, 0xFF	; 255
    23a4:	80 e0       	ldi	r24, 0x00	; 0
    23a6:	b9 01       	movw	r22, r18
    23a8:	0e 94 36 11 	call	0x226c	; 0x226c <ADC_ReadChannel>
		/* Converting the ADC value from voltage to Celsius */
		*pu8Temperature = LM35_CALCULATE_TEMPERATURE(u16ADCData);
    23ac:	8a 81       	ldd	r24, Y+2	; 0x02
    23ae:	9b 81       	ldd	r25, Y+3	; 0x03
    23b0:	cc 01       	movw	r24, r24
    23b2:	a0 e0       	ldi	r26, 0x00	; 0
    23b4:	b0 e0       	ldi	r27, 0x00	; 0
    23b6:	bc 01       	movw	r22, r24
    23b8:	cd 01       	movw	r24, r26
    23ba:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__floatunsisf>
    23be:	dc 01       	movw	r26, r24
    23c0:	cb 01       	movw	r24, r22
    23c2:	bc 01       	movw	r22, r24
    23c4:	cd 01       	movw	r24, r26
    23c6:	20 e0       	ldi	r18, 0x00	; 0
    23c8:	30 e4       	ldi	r19, 0x40	; 64
    23ca:	4c e9       	ldi	r20, 0x9C	; 156
    23cc:	50 e4       	ldi	r21, 0x40	; 64
    23ce:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    23d2:	dc 01       	movw	r26, r24
    23d4:	cb 01       	movw	r24, r22
    23d6:	bc 01       	movw	r22, r24
    23d8:	cd 01       	movw	r24, r26
    23da:	20 e0       	ldi	r18, 0x00	; 0
    23dc:	30 e0       	ldi	r19, 0x00	; 0
    23de:	40 e2       	ldi	r20, 0x20	; 32
    23e0:	51 e4       	ldi	r21, 0x41	; 65
    23e2:	0e 94 37 03 	call	0x66e	; 0x66e <__divsf3>
    23e6:	dc 01       	movw	r26, r24
    23e8:	cb 01       	movw	r24, r22
    23ea:	bc 01       	movw	r22, r24
    23ec:	cd 01       	movw	r24, r26
    23ee:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    23f2:	dc 01       	movw	r26, r24
    23f4:	cb 01       	movw	r24, r22
    23f6:	ec 81       	ldd	r30, Y+4	; 0x04
    23f8:	fd 81       	ldd	r31, Y+5	; 0x05
    23fa:	80 83       	st	Z, r24
		enuRetVar = E_OK;
    23fc:	81 e0       	ldi	r24, 0x01	; 1
    23fe:	89 83       	std	Y+1, r24	; 0x01
    2400:	01 c0       	rjmp	.+2      	; 0x2404 <LM35_ReadTemperature+0x80>
	}
	else
	{
		enuRetVar = E_ERROR;
    2402:	19 82       	std	Y+1, r1	; 0x01
	}
	return enuRetVar;
    2404:	89 81       	ldd	r24, Y+1	; 0x01
}
    2406:	0f 90       	pop	r0
    2408:	0f 90       	pop	r0
    240a:	0f 90       	pop	r0
    240c:	0f 90       	pop	r0
    240e:	0f 90       	pop	r0
    2410:	cf 91       	pop	r28
    2412:	df 91       	pop	r29
    2414:	08 95       	ret

00002416 <LCD_Init>:
* Parameters	: enuLCDDataMode, enuLCDCursorMode
* Return Value	: enuErrorStatus_t
* Description  : Initialize LCD module according to the configuration parameters
*************************************************************************************************/
enuErrorStatus_t LCD_Init(enuLCDDataMode_t enuLCDDataMode, enuLCDCursorMode_t enuLCDCursorMode)
{
    2416:	df 93       	push	r29
    2418:	cf 93       	push	r28
    241a:	00 d0       	rcall	.+0      	; 0x241c <LCD_Init+0x6>
    241c:	00 d0       	rcall	.+0      	; 0x241e <LCD_Init+0x8>
    241e:	cd b7       	in	r28, 0x3d	; 61
    2420:	de b7       	in	r29, 0x3e	; 62
    2422:	8b 83       	std	Y+3, r24	; 0x03
    2424:	6c 83       	std	Y+4, r22	; 0x04
	enuErrorStatus_t enuRetVar;
	uint8_t u8LoopIndex;
	
	if(((enuLCDDataMode == LCD_DATA_FOUR_BIT_MODE)		|| (enuLCDDataMode == LCD_DATA_EIGHT_BIT_MODE))	&&
    2426:	8b 81       	ldd	r24, Y+3	; 0x03
    2428:	84 30       	cpi	r24, 0x04	; 4
    242a:	21 f0       	breq	.+8      	; 0x2434 <LCD_Init+0x1e>
    242c:	8b 81       	ldd	r24, Y+3	; 0x03
    242e:	88 30       	cpi	r24, 0x08	; 8
    2430:	09 f0       	breq	.+2      	; 0x2434 <LCD_Init+0x1e>
    2432:	61 c0       	rjmp	.+194    	; 0x24f6 <LCD_Init+0xe0>
    2434:	8c 81       	ldd	r24, Y+4	; 0x04
    2436:	82 30       	cpi	r24, 0x02	; 2
    2438:	08 f0       	brcs	.+2      	; 0x243c <LCD_Init+0x26>
    243a:	5d c0       	rjmp	.+186    	; 0x24f6 <LCD_Init+0xe0>
		 (enuLCDCursorMode > LCD_CUROSR_MODE_MIN_VALUE)	&& (enuLCDCursorMode < LCD_CUROSR_MODE_MAX_VALUE))
	{
		enuLCDDataModeState = enuLCDDataMode;
    243c:	8b 81       	ldd	r24, Y+3	; 0x03
    243e:	80 93 f1 03 	sts	0x03F1, r24
		/* Initializing RS pin as output */
		DIO_PinInit(LCD_RS_PIN_NO, OUTPUT, NO_CONNECTION);
    2442:	85 e1       	ldi	r24, 0x15	; 21
    2444:	61 e0       	ldi	r22, 0x01	; 1
    2446:	40 e0       	ldi	r20, 0x00	; 0
    2448:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <DIO_PinInit>
		/* Initializing RW pin as output */
		DIO_PinInit(LCD_RW_PIN_NO, OUTPUT, NO_CONNECTION);
    244c:	86 e1       	ldi	r24, 0x16	; 22
    244e:	61 e0       	ldi	r22, 0x01	; 1
    2450:	40 e0       	ldi	r20, 0x00	; 0
    2452:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <DIO_PinInit>
		/* Initializing EN pin as output */
		DIO_PinInit(LCD_EN_PIN_NO, OUTPUT, NO_CONNECTION);
    2456:	87 e1       	ldi	r24, 0x17	; 23
    2458:	61 e0       	ldi	r22, 0x01	; 1
    245a:	40 e0       	ldi	r20, 0x00	; 0
    245c:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <DIO_PinInit>
		/* Selecting whether to interface LCD in 4-bit mode or 8-bit mode */
		if(enuLCDDataMode == LCD_DATA_FOUR_BIT_MODE)
    2460:	8b 81       	ldd	r24, Y+3	; 0x03
    2462:	84 30       	cpi	r24, 0x04	; 4
    2464:	f1 f4       	brne	.+60     	; 0x24a2 <LCD_Init+0x8c>
		{
			/* Initializing all LCD data pins as outputs */
			for(u8LoopIndex = 0; u8LoopIndex < enuLCDDataMode; u8LoopIndex++)
    2466:	19 82       	std	Y+1, r1	; 0x01
    2468:	0e c0       	rjmp	.+28     	; 0x2486 <LCD_Init+0x70>
			{
				DIO_PinInit(au8LCDDataPins4BitMode[u8LoopIndex], OUTPUT, NO_CONNECTION);
    246a:	89 81       	ldd	r24, Y+1	; 0x01
    246c:	88 2f       	mov	r24, r24
    246e:	90 e0       	ldi	r25, 0x00	; 0
    2470:	fc 01       	movw	r30, r24
    2472:	ee 54       	subi	r30, 0x4E	; 78
    2474:	fc 4f       	sbci	r31, 0xFC	; 252
    2476:	80 81       	ld	r24, Z
    2478:	61 e0       	ldi	r22, 0x01	; 1
    247a:	40 e0       	ldi	r20, 0x00	; 0
    247c:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <DIO_PinInit>
		DIO_PinInit(LCD_EN_PIN_NO, OUTPUT, NO_CONNECTION);
		/* Selecting whether to interface LCD in 4-bit mode or 8-bit mode */
		if(enuLCDDataMode == LCD_DATA_FOUR_BIT_MODE)
		{
			/* Initializing all LCD data pins as outputs */
			for(u8LoopIndex = 0; u8LoopIndex < enuLCDDataMode; u8LoopIndex++)
    2480:	89 81       	ldd	r24, Y+1	; 0x01
    2482:	8f 5f       	subi	r24, 0xFF	; 255
    2484:	89 83       	std	Y+1, r24	; 0x01
    2486:	99 81       	ldd	r25, Y+1	; 0x01
    2488:	8b 81       	ldd	r24, Y+3	; 0x03
    248a:	98 17       	cp	r25, r24
    248c:	70 f3       	brcs	.-36     	; 0x246a <LCD_Init+0x54>
			{
				DIO_PinInit(au8LCDDataPins4BitMode[u8LoopIndex], OUTPUT, NO_CONNECTION);
			}
			/* Initializing the LCD module to work as 4-bit data mode */
			LCD_SendCommand(LCD_DATA_FOUR_BIT_MODE_CONFIG_ONE_COMMAND);
    248e:	83 e3       	ldi	r24, 0x33	; 51
    2490:	0e 94 03 13 	call	0x2606	; 0x2606 <LCD_SendCommand>
			LCD_SendCommand(LCD_DATA_FOUR_BIT_MODE_CONFIG_TWO_COMMAND);
    2494:	82 e3       	ldi	r24, 0x32	; 50
    2496:	0e 94 03 13 	call	0x2606	; 0x2606 <LCD_SendCommand>
			LCD_SendCommand(LCD_TWO_LINES_FIVE_TIMES_SEVEN_MATRIX_FOUR_BIT_MODE_COMMAND);
    249a:	88 e2       	ldi	r24, 0x28	; 40
    249c:	0e 94 03 13 	call	0x2606	; 0x2606 <LCD_SendCommand>
    24a0:	17 c0       	rjmp	.+46     	; 0x24d0 <LCD_Init+0xba>
		}
		else
		{
			/* Initializing all LCD data pins as outputs */
			for(u8LoopIndex = 0; u8LoopIndex < enuLCDDataMode; u8LoopIndex++)
    24a2:	19 82       	std	Y+1, r1	; 0x01
    24a4:	0e c0       	rjmp	.+28     	; 0x24c2 <LCD_Init+0xac>
			{
				DIO_PinInit(au8LCDDataPins8BitMode[u8LoopIndex], OUTPUT, NO_CONNECTION);
    24a6:	89 81       	ldd	r24, Y+1	; 0x01
    24a8:	88 2f       	mov	r24, r24
    24aa:	90 e0       	ldi	r25, 0x00	; 0
    24ac:	fc 01       	movw	r30, r24
    24ae:	e6 55       	subi	r30, 0x56	; 86
    24b0:	fc 4f       	sbci	r31, 0xFC	; 252
    24b2:	80 81       	ld	r24, Z
    24b4:	61 e0       	ldi	r22, 0x01	; 1
    24b6:	40 e0       	ldi	r20, 0x00	; 0
    24b8:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <DIO_PinInit>
			LCD_SendCommand(LCD_TWO_LINES_FIVE_TIMES_SEVEN_MATRIX_FOUR_BIT_MODE_COMMAND);
		}
		else
		{
			/* Initializing all LCD data pins as outputs */
			for(u8LoopIndex = 0; u8LoopIndex < enuLCDDataMode; u8LoopIndex++)
    24bc:	89 81       	ldd	r24, Y+1	; 0x01
    24be:	8f 5f       	subi	r24, 0xFF	; 255
    24c0:	89 83       	std	Y+1, r24	; 0x01
    24c2:	99 81       	ldd	r25, Y+1	; 0x01
    24c4:	8b 81       	ldd	r24, Y+3	; 0x03
    24c6:	98 17       	cp	r25, r24
    24c8:	70 f3       	brcs	.-36     	; 0x24a6 <LCD_Init+0x90>
			{
				DIO_PinInit(au8LCDDataPins8BitMode[u8LoopIndex], OUTPUT, NO_CONNECTION);
			}		
			/* Initializing the LCD module to work as 8-bit data mode */
			LCD_SendCommand(LCD_TWO_LINES_FIVE_TIMES_SEVEN_MATRIX_EIGHT_BIT_MODE_COMMAND);
    24ca:	88 e3       	ldi	r24, 0x38	; 56
    24cc:	0e 94 03 13 	call	0x2606	; 0x2606 <LCD_SendCommand>
		}
		/* Selecting whether to turn on/off the blinking cursor */
		if(enuLCDCursorMode == LCD_CURSOR_OFF)
    24d0:	8c 81       	ldd	r24, Y+4	; 0x04
    24d2:	88 23       	and	r24, r24
    24d4:	21 f4       	brne	.+8      	; 0x24de <LCD_Init+0xc8>
		{
			LCD_SendCommand(LCD_DISPLAY_ON_CURSOR_OFF_COMMAND);
    24d6:	8c e0       	ldi	r24, 0x0C	; 12
    24d8:	0e 94 03 13 	call	0x2606	; 0x2606 <LCD_SendCommand>
    24dc:	03 c0       	rjmp	.+6      	; 0x24e4 <LCD_Init+0xce>
		}
		else
		{
			LCD_SendCommand(LCD_DISPLAY_ON_CURSOR_BLINKING_COMMAND);
    24de:	8e e0       	ldi	r24, 0x0E	; 14
    24e0:	0e 94 03 13 	call	0x2606	; 0x2606 <LCD_SendCommand>
		}
		/* Clearing the LCD screen before use */
		LCD_SendCommand(LCD_CLEAR_DISPLAY_SCREEN_COMMAND);
    24e4:	81 e0       	ldi	r24, 0x01	; 1
    24e6:	0e 94 03 13 	call	0x2606	; 0x2606 <LCD_SendCommand>
		enuLCDState = LCD_INIT_DONE;
    24ea:	81 e0       	ldi	r24, 0x01	; 1
    24ec:	80 93 f0 03 	sts	0x03F0, r24
		enuRetVar = E_OK;
    24f0:	81 e0       	ldi	r24, 0x01	; 1
    24f2:	8a 83       	std	Y+2, r24	; 0x02
    24f4:	01 c0       	rjmp	.+2      	; 0x24f8 <LCD_Init+0xe2>
	}
	else
	{
		enuRetVar = E_ERROR;
    24f6:	1a 82       	std	Y+2, r1	; 0x02
	}
	return enuRetVar;
    24f8:	8a 81       	ldd	r24, Y+2	; 0x02
}
    24fa:	0f 90       	pop	r0
    24fc:	0f 90       	pop	r0
    24fe:	0f 90       	pop	r0
    2500:	0f 90       	pop	r0
    2502:	cf 91       	pop	r28
    2504:	df 91       	pop	r29
    2506:	08 95       	ret

00002508 <LCD_Clear>:
* Parameters	: void
* Return Value	: enuErrorStatus_t
* Description  : Clear the LCD scree
*************************************************************************************************/
enuErrorStatus_t LCD_Clear(void)
{
    2508:	df 93       	push	r29
    250a:	cf 93       	push	r28
    250c:	0f 92       	push	r0
    250e:	cd b7       	in	r28, 0x3d	; 61
    2510:	de b7       	in	r29, 0x3e	; 62
	enuErrorStatus_t enuRetVar;
	
	if(enuLCDState == LCD_INIT_DONE)
    2512:	80 91 f0 03 	lds	r24, 0x03F0
    2516:	81 30       	cpi	r24, 0x01	; 1
    2518:	31 f4       	brne	.+12     	; 0x2526 <LCD_Clear+0x1e>
	{
		/* Clearing the screen */
		LCD_SendCommand(LCD_CLEAR_DISPLAY_SCREEN_COMMAND);
    251a:	81 e0       	ldi	r24, 0x01	; 1
    251c:	0e 94 03 13 	call	0x2606	; 0x2606 <LCD_SendCommand>
		enuRetVar = E_OK;
    2520:	81 e0       	ldi	r24, 0x01	; 1
    2522:	89 83       	std	Y+1, r24	; 0x01
    2524:	01 c0       	rjmp	.+2      	; 0x2528 <LCD_Clear+0x20>
	}
	else
	{
		enuRetVar = E_ERROR;
    2526:	19 82       	std	Y+1, r1	; 0x01
	}
	return enuRetVar;
    2528:	89 81       	ldd	r24, Y+1	; 0x01
}
    252a:	0f 90       	pop	r0
    252c:	cf 91       	pop	r28
    252e:	df 91       	pop	r29
    2530:	08 95       	ret

00002532 <LCD_SetCursorPosition>:
* Parameters	: u8Horizontal, u8Vertical
* Return Value	: enuErrorStatus_t
* Description  :  Navigate the cursor to the desired position
*************************************************************************************************/
enuErrorStatus_t LCD_SetCursorPosition(uint8_t u8Horizontal, uint8_t u8Vertical)
{
    2532:	df 93       	push	r29
    2534:	cf 93       	push	r28
    2536:	00 d0       	rcall	.+0      	; 0x2538 <LCD_SetCursorPosition+0x6>
    2538:	0f 92       	push	r0
    253a:	cd b7       	in	r28, 0x3d	; 61
    253c:	de b7       	in	r29, 0x3e	; 62
    253e:	8a 83       	std	Y+2, r24	; 0x02
    2540:	6b 83       	std	Y+3, r22	; 0x03
	enuErrorStatus_t enuRetVar;
	
	if((u8Vertical == 0) && (enuLCDState == LCD_INIT_DONE))
    2542:	8b 81       	ldd	r24, Y+3	; 0x03
    2544:	88 23       	and	r24, r24
    2546:	59 f4       	brne	.+22     	; 0x255e <LCD_SetCursorPosition+0x2c>
    2548:	80 91 f0 03 	lds	r24, 0x03F0
    254c:	81 30       	cpi	r24, 0x01	; 1
    254e:	39 f4       	brne	.+14     	; 0x255e <LCD_SetCursorPosition+0x2c>
	{
		/* Moving the cursor in the selected place in the first row */
		LCD_SendCommand(LCD_FORCE_CURSOR_TO_FIRST_LINE_COMMAND + u8Horizontal);
    2550:	8a 81       	ldd	r24, Y+2	; 0x02
    2552:	80 58       	subi	r24, 0x80	; 128
    2554:	0e 94 03 13 	call	0x2606	; 0x2606 <LCD_SendCommand>
		enuRetVar = E_OK;
    2558:	81 e0       	ldi	r24, 0x01	; 1
    255a:	89 83       	std	Y+1, r24	; 0x01
    255c:	0f c0       	rjmp	.+30     	; 0x257c <LCD_SetCursorPosition+0x4a>
	}
	else if((u8Vertical == 1) && (enuLCDState == LCD_INIT_DONE))
    255e:	8b 81       	ldd	r24, Y+3	; 0x03
    2560:	81 30       	cpi	r24, 0x01	; 1
    2562:	59 f4       	brne	.+22     	; 0x257a <LCD_SetCursorPosition+0x48>
    2564:	80 91 f0 03 	lds	r24, 0x03F0
    2568:	81 30       	cpi	r24, 0x01	; 1
    256a:	39 f4       	brne	.+14     	; 0x257a <LCD_SetCursorPosition+0x48>
	{
		/* Moving the cursor in the selected place in the second row */
		LCD_SendCommand(LCD_FORCE_CURSOR_TO_SECOND_LINE_COMMAND + u8Horizontal);
    256c:	8a 81       	ldd	r24, Y+2	; 0x02
    256e:	80 54       	subi	r24, 0x40	; 64
    2570:	0e 94 03 13 	call	0x2606	; 0x2606 <LCD_SendCommand>
		enuRetVar = E_OK;
    2574:	81 e0       	ldi	r24, 0x01	; 1
    2576:	89 83       	std	Y+1, r24	; 0x01
    2578:	01 c0       	rjmp	.+2      	; 0x257c <LCD_SetCursorPosition+0x4a>
	}
	else
	{
		enuRetVar = E_ERROR;
    257a:	19 82       	std	Y+1, r1	; 0x01
	}
	return enuRetVar;
    257c:	89 81       	ldd	r24, Y+1	; 0x01
}
    257e:	0f 90       	pop	r0
    2580:	0f 90       	pop	r0
    2582:	0f 90       	pop	r0
    2584:	cf 91       	pop	r28
    2586:	df 91       	pop	r29
    2588:	08 95       	ret

0000258a <LCD_DisplayChar>:
* Parameters	: u8Char
* Return Value	: enuErrorStatus_t
* Description  : Display a single character on the LCD screen
*************************************************************************************************/
enuErrorStatus_t LCD_DisplayChar(uint8_t u8Char)
{
    258a:	df 93       	push	r29
    258c:	cf 93       	push	r28
    258e:	00 d0       	rcall	.+0      	; 0x2590 <LCD_DisplayChar+0x6>
    2590:	cd b7       	in	r28, 0x3d	; 61
    2592:	de b7       	in	r29, 0x3e	; 62
    2594:	8a 83       	std	Y+2, r24	; 0x02
	enuErrorStatus_t enuRetVar;
	
	if(enuLCDState == LCD_INIT_DONE)
    2596:	80 91 f0 03 	lds	r24, 0x03F0
    259a:	81 30       	cpi	r24, 0x01	; 1
    259c:	31 f4       	brne	.+12     	; 0x25aa <LCD_DisplayChar+0x20>
	{
		/* Displaying the character data on the LCD */
      LCD_SendData(u8Char);
    259e:	8a 81       	ldd	r24, Y+2	; 0x02
    25a0:	0e 94 9d 13 	call	0x273a	; 0x273a <LCD_SendData>
		enuRetVar = E_OK;
    25a4:	81 e0       	ldi	r24, 0x01	; 1
    25a6:	89 83       	std	Y+1, r24	; 0x01
    25a8:	01 c0       	rjmp	.+2      	; 0x25ac <LCD_DisplayChar+0x22>
	}
	else
	{
		enuRetVar = E_ERROR;
    25aa:	19 82       	std	Y+1, r1	; 0x01
	}
	return enuRetVar;
    25ac:	89 81       	ldd	r24, Y+1	; 0x01
}
    25ae:	0f 90       	pop	r0
    25b0:	0f 90       	pop	r0
    25b2:	cf 91       	pop	r28
    25b4:	df 91       	pop	r29
    25b6:	08 95       	ret

000025b8 <LCD_DisplayString>:
* Parameters	: pu8String
* Return Value	: enuErrorStatus_t
* Description  : Display a string on the LCD screen
*************************************************************************************************/
enuErrorStatus_t LCD_DisplayString(uint8_t* pu8String)
{
    25b8:	df 93       	push	r29
    25ba:	cf 93       	push	r28
    25bc:	00 d0       	rcall	.+0      	; 0x25be <LCD_DisplayString+0x6>
    25be:	0f 92       	push	r0
    25c0:	cd b7       	in	r28, 0x3d	; 61
    25c2:	de b7       	in	r29, 0x3e	; 62
    25c4:	9b 83       	std	Y+3, r25	; 0x03
    25c6:	8a 83       	std	Y+2, r24	; 0x02
	enuErrorStatus_t enuRetVar;
	
	if(enuLCDState == LCD_INIT_DONE)
    25c8:	80 91 f0 03 	lds	r24, 0x03F0
    25cc:	81 30       	cpi	r24, 0x01	; 1
    25ce:	99 f4       	brne	.+38     	; 0x25f6 <LCD_DisplayString+0x3e>
    25d0:	0a c0       	rjmp	.+20     	; 0x25e6 <LCD_DisplayString+0x2e>
	{
		/* Displaying the string data on the LCD */
		while((*pu8String) != '\0')
		{
			LCD_SendData(*pu8String);
    25d2:	ea 81       	ldd	r30, Y+2	; 0x02
    25d4:	fb 81       	ldd	r31, Y+3	; 0x03
    25d6:	80 81       	ld	r24, Z
    25d8:	0e 94 9d 13 	call	0x273a	; 0x273a <LCD_SendData>
			pu8String ++;
    25dc:	8a 81       	ldd	r24, Y+2	; 0x02
    25de:	9b 81       	ldd	r25, Y+3	; 0x03
    25e0:	01 96       	adiw	r24, 0x01	; 1
    25e2:	9b 83       	std	Y+3, r25	; 0x03
    25e4:	8a 83       	std	Y+2, r24	; 0x02
	enuErrorStatus_t enuRetVar;
	
	if(enuLCDState == LCD_INIT_DONE)
	{
		/* Displaying the string data on the LCD */
		while((*pu8String) != '\0')
    25e6:	ea 81       	ldd	r30, Y+2	; 0x02
    25e8:	fb 81       	ldd	r31, Y+3	; 0x03
    25ea:	80 81       	ld	r24, Z
    25ec:	88 23       	and	r24, r24
    25ee:	89 f7       	brne	.-30     	; 0x25d2 <LCD_DisplayString+0x1a>
		{
			LCD_SendData(*pu8String);
			pu8String ++;
		}
		enuRetVar = E_OK;
    25f0:	81 e0       	ldi	r24, 0x01	; 1
    25f2:	89 83       	std	Y+1, r24	; 0x01
    25f4:	01 c0       	rjmp	.+2      	; 0x25f8 <LCD_DisplayString+0x40>
	}
	else
	{
		enuRetVar = E_ERROR;
    25f6:	19 82       	std	Y+1, r1	; 0x01
	}
	return enuRetVar;
    25f8:	89 81       	ldd	r24, Y+1	; 0x01
}
    25fa:	0f 90       	pop	r0
    25fc:	0f 90       	pop	r0
    25fe:	0f 90       	pop	r0
    2600:	cf 91       	pop	r28
    2602:	df 91       	pop	r29
    2604:	08 95       	ret

00002606 <LCD_SendCommand>:
* Parameters	: u8CommandId
* Return Value	: void
* Description  : Send a given Command to the LCD controller
*************************************************************************************************/
static void LCD_SendCommand(uint8_t u8CommandId)
{
    2606:	df 93       	push	r29
    2608:	cf 93       	push	r28
    260a:	00 d0       	rcall	.+0      	; 0x260c <LCD_SendCommand+0x6>
    260c:	00 d0       	rcall	.+0      	; 0x260e <LCD_SendCommand+0x8>
    260e:	cd b7       	in	r28, 0x3d	; 61
    2610:	de b7       	in	r29, 0x3e	; 62
    2612:	8c 83       	std	Y+4, r24	; 0x04
	uint8_t u8LoopIndex;
	uint8_t u8DIOData;
	uint8_t u8Command;

    /* Sending a LOW value on RS to select the u8Command mode on LCD */
	DIO_PinWrite(LCD_RS_PIN_NO, LOW);
    2614:	85 e1       	ldi	r24, 0x15	; 21
    2616:	60 e0       	ldi	r22, 0x00	; 0
    2618:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <DIO_PinWrite>
	/* Sending a LOW value on RW to specify a write to LCD */
   DIO_PinWrite(LCD_RW_PIN_NO, LOW);
    261c:	86 e1       	ldi	r24, 0x16	; 22
    261e:	60 e0       	ldi	r22, 0x00	; 0
    2620:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <DIO_PinWrite>
   /* Sending the 8-bit u8Command on the 8 data pins once */
	if(enuLCDDataModeState == LCD_DATA_EIGHT_BIT_MODE)
    2624:	80 91 f1 03 	lds	r24, 0x03F1
    2628:	88 30       	cpi	r24, 0x08	; 8
    262a:	31 f5       	brne	.+76     	; 0x2678 <LCD_SendCommand+0x72>
	{
		for(u8LoopIndex = 0; u8LoopIndex < enuLCDDataModeState; u8LoopIndex++)
    262c:	1b 82       	std	Y+3, r1	; 0x03
    262e:	16 c0       	rjmp	.+44     	; 0x265c <LCD_SendCommand+0x56>
		{
			/* Getting the LSB of u8CommandId */
         u8DIOData = u8CommandId & 0x01;
    2630:	8c 81       	ldd	r24, Y+4	; 0x04
    2632:	81 70       	andi	r24, 0x01	; 1
    2634:	8a 83       	std	Y+2, r24	; 0x02
         /* Converting from binary value into 8-bit value to be used in DIO_PinWrite() API *
          * e.g: u8DIOData = 0x01 -> u8DIOData = 0xFE + 1 = 0xFF (HIGH)                    *
          *      u8DIOData = 0x00 -> u8DIOData = 0xFF + 1 = 0x00 (LOW)                     */
			u8DIOData = (~u8DIOData)+ 1;
    2636:	8a 81       	ldd	r24, Y+2	; 0x02
    2638:	81 95       	neg	r24
    263a:	8a 83       	std	Y+2, r24	; 0x02
         /* Shifting the u8CommandId variable by one for the next loop iteration */
			u8CommandId = u8CommandId >> 1;
    263c:	8c 81       	ldd	r24, Y+4	; 0x04
    263e:	86 95       	lsr	r24
    2640:	8c 83       	std	Y+4, r24	; 0x04
         /* Writing the selected bit on its corresponding LCD pin */
			DIO_PinWrite(au8LCDDataPins8BitMode[u8LoopIndex], u8DIOData);
    2642:	8b 81       	ldd	r24, Y+3	; 0x03
    2644:	88 2f       	mov	r24, r24
    2646:	90 e0       	ldi	r25, 0x00	; 0
    2648:	fc 01       	movw	r30, r24
    264a:	e6 55       	subi	r30, 0x56	; 86
    264c:	fc 4f       	sbci	r31, 0xFC	; 252
    264e:	80 81       	ld	r24, Z
    2650:	6a 81       	ldd	r22, Y+2	; 0x02
    2652:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <DIO_PinWrite>
	/* Sending a LOW value on RW to specify a write to LCD */
   DIO_PinWrite(LCD_RW_PIN_NO, LOW);
   /* Sending the 8-bit u8Command on the 8 data pins once */
	if(enuLCDDataModeState == LCD_DATA_EIGHT_BIT_MODE)
	{
		for(u8LoopIndex = 0; u8LoopIndex < enuLCDDataModeState; u8LoopIndex++)
    2656:	8b 81       	ldd	r24, Y+3	; 0x03
    2658:	8f 5f       	subi	r24, 0xFF	; 255
    265a:	8b 83       	std	Y+3, r24	; 0x03
    265c:	90 91 f1 03 	lds	r25, 0x03F1
    2660:	8b 81       	ldd	r24, Y+3	; 0x03
    2662:	89 17       	cp	r24, r25
    2664:	28 f3       	brcs	.-54     	; 0x2630 <LCD_SendCommand+0x2a>
			u8CommandId = u8CommandId >> 1;
         /* Writing the selected bit on its corresponding LCD pin */
			DIO_PinWrite(au8LCDDataPins8BitMode[u8LoopIndex], u8DIOData);
		}
      /* Triggering a falling edge on EN pin to send the u8Command */
		DIO_PinWrite(LCD_EN_PIN_NO, HIGH);
    2666:	87 e1       	ldi	r24, 0x17	; 23
    2668:	61 e0       	ldi	r22, 0x01	; 1
    266a:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <DIO_PinWrite>
		DIO_PinWrite(LCD_EN_PIN_NO, LOW);
    266e:	87 e1       	ldi	r24, 0x17	; 23
    2670:	60 e0       	ldi	r22, 0x00	; 0
    2672:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <DIO_PinWrite>
    2676:	5a c0       	rjmp	.+180    	; 0x272c <LCD_SendCommand+0x126>
	}
   /* Sending the 8-bit u8Command on the 4 data pins twice */
	else if(enuLCDDataModeState == LCD_DATA_FOUR_BIT_MODE)
    2678:	80 91 f1 03 	lds	r24, 0x03F1
    267c:	84 30       	cpi	r24, 0x04	; 4
    267e:	09 f0       	breq	.+2      	; 0x2682 <LCD_SendCommand+0x7c>
    2680:	55 c0       	rjmp	.+170    	; 0x272c <LCD_SendCommand+0x126>
	{
		/* Specifying the 4 MSB of the u8CommandId */
      u8Command = (u8CommandId & 0xF0) >> 4;
    2682:	8c 81       	ldd	r24, Y+4	; 0x04
    2684:	82 95       	swap	r24
    2686:	8f 70       	andi	r24, 0x0F	; 15
    2688:	89 83       	std	Y+1, r24	; 0x01
      /* Sending the MSB on the 4-bit data pins */
		for(u8LoopIndex = 0; u8LoopIndex < enuLCDDataModeState; u8LoopIndex++)
    268a:	1b 82       	std	Y+3, r1	; 0x03
    268c:	16 c0       	rjmp	.+44     	; 0x26ba <LCD_SendCommand+0xb4>
		{
			u8DIOData = u8Command & 0x01;
    268e:	89 81       	ldd	r24, Y+1	; 0x01
    2690:	81 70       	andi	r24, 0x01	; 1
    2692:	8a 83       	std	Y+2, r24	; 0x02
			u8DIOData = (~u8DIOData) + 1;
    2694:	8a 81       	ldd	r24, Y+2	; 0x02
    2696:	81 95       	neg	r24
    2698:	8a 83       	std	Y+2, r24	; 0x02
			u8Command = u8Command >> 1;
    269a:	89 81       	ldd	r24, Y+1	; 0x01
    269c:	86 95       	lsr	r24
    269e:	89 83       	std	Y+1, r24	; 0x01
			DIO_PinWrite(au8LCDDataPins4BitMode[u8LoopIndex], u8DIOData);
    26a0:	8b 81       	ldd	r24, Y+3	; 0x03
    26a2:	88 2f       	mov	r24, r24
    26a4:	90 e0       	ldi	r25, 0x00	; 0
    26a6:	fc 01       	movw	r30, r24
    26a8:	ee 54       	subi	r30, 0x4E	; 78
    26aa:	fc 4f       	sbci	r31, 0xFC	; 252
    26ac:	80 81       	ld	r24, Z
    26ae:	6a 81       	ldd	r22, Y+2	; 0x02
    26b0:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <DIO_PinWrite>
	else if(enuLCDDataModeState == LCD_DATA_FOUR_BIT_MODE)
	{
		/* Specifying the 4 MSB of the u8CommandId */
      u8Command = (u8CommandId & 0xF0) >> 4;
      /* Sending the MSB on the 4-bit data pins */
		for(u8LoopIndex = 0; u8LoopIndex < enuLCDDataModeState; u8LoopIndex++)
    26b4:	8b 81       	ldd	r24, Y+3	; 0x03
    26b6:	8f 5f       	subi	r24, 0xFF	; 255
    26b8:	8b 83       	std	Y+3, r24	; 0x03
    26ba:	90 91 f1 03 	lds	r25, 0x03F1
    26be:	8b 81       	ldd	r24, Y+3	; 0x03
    26c0:	89 17       	cp	r24, r25
    26c2:	28 f3       	brcs	.-54     	; 0x268e <LCD_SendCommand+0x88>
			u8DIOData = (~u8DIOData) + 1;
			u8Command = u8Command >> 1;
			DIO_PinWrite(au8LCDDataPins4BitMode[u8LoopIndex], u8DIOData);
		}
      /* Triggering a falling edge on EN pin to send the MSB of the u8Command */
		DIO_PinWrite(LCD_EN_PIN_NO, HIGH);
    26c4:	87 e1       	ldi	r24, 0x17	; 23
    26c6:	61 e0       	ldi	r22, 0x01	; 1
    26c8:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <DIO_PinWrite>
		DIO_PinWrite(LCD_EN_PIN_NO, LOW);
    26cc:	87 e1       	ldi	r24, 0x17	; 23
    26ce:	60 e0       	ldi	r22, 0x00	; 0
    26d0:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <DIO_PinWrite>
      /* Specifying the 4 LSB of the u8CommandId*/
		u8Command = (u8CommandId & 0x0F);
    26d4:	8c 81       	ldd	r24, Y+4	; 0x04
    26d6:	8f 70       	andi	r24, 0x0F	; 15
    26d8:	89 83       	std	Y+1, r24	; 0x01
      /* Sending the LSB on the 4-bit data pins */
		for(u8LoopIndex = 0; u8LoopIndex < enuLCDDataModeState; u8LoopIndex++)
    26da:	1b 82       	std	Y+3, r1	; 0x03
    26dc:	16 c0       	rjmp	.+44     	; 0x270a <LCD_SendCommand+0x104>
		{
			u8DIOData = u8Command & 0x01;
    26de:	89 81       	ldd	r24, Y+1	; 0x01
    26e0:	81 70       	andi	r24, 0x01	; 1
    26e2:	8a 83       	std	Y+2, r24	; 0x02
			u8DIOData = (~u8DIOData) + 1;
    26e4:	8a 81       	ldd	r24, Y+2	; 0x02
    26e6:	81 95       	neg	r24
    26e8:	8a 83       	std	Y+2, r24	; 0x02
			u8Command = u8Command >> 1;
    26ea:	89 81       	ldd	r24, Y+1	; 0x01
    26ec:	86 95       	lsr	r24
    26ee:	89 83       	std	Y+1, r24	; 0x01
			DIO_PinWrite(au8LCDDataPins4BitMode[u8LoopIndex], u8DIOData);
    26f0:	8b 81       	ldd	r24, Y+3	; 0x03
    26f2:	88 2f       	mov	r24, r24
    26f4:	90 e0       	ldi	r25, 0x00	; 0
    26f6:	fc 01       	movw	r30, r24
    26f8:	ee 54       	subi	r30, 0x4E	; 78
    26fa:	fc 4f       	sbci	r31, 0xFC	; 252
    26fc:	80 81       	ld	r24, Z
    26fe:	6a 81       	ldd	r22, Y+2	; 0x02
    2700:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <DIO_PinWrite>
		DIO_PinWrite(LCD_EN_PIN_NO, HIGH);
		DIO_PinWrite(LCD_EN_PIN_NO, LOW);
      /* Specifying the 4 LSB of the u8CommandId*/
		u8Command = (u8CommandId & 0x0F);
      /* Sending the LSB on the 4-bit data pins */
		for(u8LoopIndex = 0; u8LoopIndex < enuLCDDataModeState; u8LoopIndex++)
    2704:	8b 81       	ldd	r24, Y+3	; 0x03
    2706:	8f 5f       	subi	r24, 0xFF	; 255
    2708:	8b 83       	std	Y+3, r24	; 0x03
    270a:	90 91 f1 03 	lds	r25, 0x03F1
    270e:	8b 81       	ldd	r24, Y+3	; 0x03
    2710:	89 17       	cp	r24, r25
    2712:	28 f3       	brcs	.-54     	; 0x26de <LCD_SendCommand+0xd8>
			u8DIOData = (~u8DIOData) + 1;
			u8Command = u8Command >> 1;
			DIO_PinWrite(au8LCDDataPins4BitMode[u8LoopIndex], u8DIOData);
		}
        /* Triggering a falling edge on EN pin to send the LSB of the u8Command */
		DIO_PinWrite(LCD_EN_PIN_NO, HIGH);
    2714:	87 e1       	ldi	r24, 0x17	; 23
    2716:	61 e0       	ldi	r22, 0x01	; 1
    2718:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <DIO_PinWrite>
		DIO_PinWrite(LCD_EN_PIN_NO, LOW);
    271c:	87 e1       	ldi	r24, 0x17	; 23
    271e:	60 e0       	ldi	r22, 0x00	; 0
    2720:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <DIO_PinWrite>
		LCD_Delay(200);
    2724:	88 ec       	ldi	r24, 0xC8	; 200
    2726:	90 e0       	ldi	r25, 0x00	; 0
    2728:	0e 94 47 14 	call	0x288e	; 0x288e <LCD_Delay>
	}
	else
	{
	}
}
    272c:	0f 90       	pop	r0
    272e:	0f 90       	pop	r0
    2730:	0f 90       	pop	r0
    2732:	0f 90       	pop	r0
    2734:	cf 91       	pop	r28
    2736:	df 91       	pop	r29
    2738:	08 95       	ret

0000273a <LCD_SendData>:
* Parameters	: u8DataId
* Return Value	: void
* Description  : Send a given Data to the LCD controller
*************************************************************************************************/
static void LCD_SendData(uint8_t u8DataId)
{
    273a:	df 93       	push	r29
    273c:	cf 93       	push	r28
    273e:	00 d0       	rcall	.+0      	; 0x2740 <LCD_SendData+0x6>
    2740:	00 d0       	rcall	.+0      	; 0x2742 <LCD_SendData+0x8>
    2742:	0f 92       	push	r0
    2744:	cd b7       	in	r28, 0x3d	; 61
    2746:	de b7       	in	r29, 0x3e	; 62
    2748:	8d 83       	std	Y+5, r24	; 0x05
	uint16_t u8LoopIndex;
	uint8_t u8DIOData;
	uint8_t u8Command;

   /* Sending a HIGH value on RS to select the data mode on LCD */
	DIO_PinWrite(LCD_RS_PIN_NO, HIGH);
    274a:	85 e1       	ldi	r24, 0x15	; 21
    274c:	61 e0       	ldi	r22, 0x01	; 1
    274e:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <DIO_PinWrite>
	DIO_PinWrite(LCD_RW_PIN_NO, LOW);
    2752:	86 e1       	ldi	r24, 0x16	; 22
    2754:	60 e0       	ldi	r22, 0x00	; 0
    2756:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <DIO_PinWrite>
	if(enuLCDDataModeState == LCD_DATA_EIGHT_BIT_MODE)
    275a:	80 91 f1 03 	lds	r24, 0x03F1
    275e:	88 30       	cpi	r24, 0x08	; 8
    2760:	61 f5       	brne	.+88     	; 0x27ba <LCD_SendData+0x80>
	{
		for(u8LoopIndex = 0; u8LoopIndex < enuLCDDataModeState; u8LoopIndex++)
    2762:	1c 82       	std	Y+4, r1	; 0x04
    2764:	1b 82       	std	Y+3, r1	; 0x03
    2766:	17 c0       	rjmp	.+46     	; 0x2796 <LCD_SendData+0x5c>
		{
			u8DIOData = u8DataId & 0x01;
    2768:	8d 81       	ldd	r24, Y+5	; 0x05
    276a:	81 70       	andi	r24, 0x01	; 1
    276c:	8a 83       	std	Y+2, r24	; 0x02
			u8DIOData = (~u8DIOData) + 1;
    276e:	8a 81       	ldd	r24, Y+2	; 0x02
    2770:	81 95       	neg	r24
    2772:	8a 83       	std	Y+2, r24	; 0x02
			u8DataId = u8DataId >> 1;
    2774:	8d 81       	ldd	r24, Y+5	; 0x05
    2776:	86 95       	lsr	r24
    2778:	8d 83       	std	Y+5, r24	; 0x05
			DIO_PinWrite(au8LCDDataPins8BitMode[u8LoopIndex], u8DIOData);
    277a:	8b 81       	ldd	r24, Y+3	; 0x03
    277c:	9c 81       	ldd	r25, Y+4	; 0x04
    277e:	fc 01       	movw	r30, r24
    2780:	e6 55       	subi	r30, 0x56	; 86
    2782:	fc 4f       	sbci	r31, 0xFC	; 252
    2784:	80 81       	ld	r24, Z
    2786:	6a 81       	ldd	r22, Y+2	; 0x02
    2788:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <DIO_PinWrite>
   /* Sending a HIGH value on RS to select the data mode on LCD */
	DIO_PinWrite(LCD_RS_PIN_NO, HIGH);
	DIO_PinWrite(LCD_RW_PIN_NO, LOW);
	if(enuLCDDataModeState == LCD_DATA_EIGHT_BIT_MODE)
	{
		for(u8LoopIndex = 0; u8LoopIndex < enuLCDDataModeState; u8LoopIndex++)
    278c:	8b 81       	ldd	r24, Y+3	; 0x03
    278e:	9c 81       	ldd	r25, Y+4	; 0x04
    2790:	01 96       	adiw	r24, 0x01	; 1
    2792:	9c 83       	std	Y+4, r25	; 0x04
    2794:	8b 83       	std	Y+3, r24	; 0x03
    2796:	80 91 f1 03 	lds	r24, 0x03F1
    279a:	28 2f       	mov	r18, r24
    279c:	30 e0       	ldi	r19, 0x00	; 0
    279e:	8b 81       	ldd	r24, Y+3	; 0x03
    27a0:	9c 81       	ldd	r25, Y+4	; 0x04
    27a2:	82 17       	cp	r24, r18
    27a4:	93 07       	cpc	r25, r19
    27a6:	00 f3       	brcs	.-64     	; 0x2768 <LCD_SendData+0x2e>
			u8DIOData = u8DataId & 0x01;
			u8DIOData = (~u8DIOData) + 1;
			u8DataId = u8DataId >> 1;
			DIO_PinWrite(au8LCDDataPins8BitMode[u8LoopIndex], u8DIOData);
		}
		DIO_PinWrite(LCD_EN_PIN_NO, HIGH);
    27a8:	87 e1       	ldi	r24, 0x17	; 23
    27aa:	61 e0       	ldi	r22, 0x01	; 1
    27ac:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <DIO_PinWrite>
		DIO_PinWrite(LCD_EN_PIN_NO, LOW);
    27b0:	87 e1       	ldi	r24, 0x17	; 23
    27b2:	60 e0       	ldi	r22, 0x00	; 0
    27b4:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <DIO_PinWrite>
    27b8:	62 c0       	rjmp	.+196    	; 0x287e <LCD_SendData+0x144>
	}
	else if(enuLCDDataModeState == LCD_DATA_FOUR_BIT_MODE)
    27ba:	80 91 f1 03 	lds	r24, 0x03F1
    27be:	84 30       	cpi	r24, 0x04	; 4
    27c0:	09 f0       	breq	.+2      	; 0x27c4 <LCD_SendData+0x8a>
    27c2:	5d c0       	rjmp	.+186    	; 0x287e <LCD_SendData+0x144>
	{
		u8Command = (u8DataId & 0xF0) >> 4;
    27c4:	8d 81       	ldd	r24, Y+5	; 0x05
    27c6:	82 95       	swap	r24
    27c8:	8f 70       	andi	r24, 0x0F	; 15
    27ca:	89 83       	std	Y+1, r24	; 0x01
		for(u8LoopIndex = 0; u8LoopIndex < enuLCDDataModeState; u8LoopIndex++)
    27cc:	1c 82       	std	Y+4, r1	; 0x04
    27ce:	1b 82       	std	Y+3, r1	; 0x03
    27d0:	17 c0       	rjmp	.+46     	; 0x2800 <LCD_SendData+0xc6>
		{
			u8DIOData = u8Command & 0x01;
    27d2:	89 81       	ldd	r24, Y+1	; 0x01
    27d4:	81 70       	andi	r24, 0x01	; 1
    27d6:	8a 83       	std	Y+2, r24	; 0x02
			u8DIOData = (~u8DIOData) + 1;
    27d8:	8a 81       	ldd	r24, Y+2	; 0x02
    27da:	81 95       	neg	r24
    27dc:	8a 83       	std	Y+2, r24	; 0x02
			u8Command = u8Command >> 1;
    27de:	89 81       	ldd	r24, Y+1	; 0x01
    27e0:	86 95       	lsr	r24
    27e2:	89 83       	std	Y+1, r24	; 0x01
			DIO_PinWrite(au8LCDDataPins4BitMode[u8LoopIndex], u8DIOData);
    27e4:	8b 81       	ldd	r24, Y+3	; 0x03
    27e6:	9c 81       	ldd	r25, Y+4	; 0x04
    27e8:	fc 01       	movw	r30, r24
    27ea:	ee 54       	subi	r30, 0x4E	; 78
    27ec:	fc 4f       	sbci	r31, 0xFC	; 252
    27ee:	80 81       	ld	r24, Z
    27f0:	6a 81       	ldd	r22, Y+2	; 0x02
    27f2:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <DIO_PinWrite>
		DIO_PinWrite(LCD_EN_PIN_NO, LOW);
	}
	else if(enuLCDDataModeState == LCD_DATA_FOUR_BIT_MODE)
	{
		u8Command = (u8DataId & 0xF0) >> 4;
		for(u8LoopIndex = 0; u8LoopIndex < enuLCDDataModeState; u8LoopIndex++)
    27f6:	8b 81       	ldd	r24, Y+3	; 0x03
    27f8:	9c 81       	ldd	r25, Y+4	; 0x04
    27fa:	01 96       	adiw	r24, 0x01	; 1
    27fc:	9c 83       	std	Y+4, r25	; 0x04
    27fe:	8b 83       	std	Y+3, r24	; 0x03
    2800:	80 91 f1 03 	lds	r24, 0x03F1
    2804:	28 2f       	mov	r18, r24
    2806:	30 e0       	ldi	r19, 0x00	; 0
    2808:	8b 81       	ldd	r24, Y+3	; 0x03
    280a:	9c 81       	ldd	r25, Y+4	; 0x04
    280c:	82 17       	cp	r24, r18
    280e:	93 07       	cpc	r25, r19
    2810:	00 f3       	brcs	.-64     	; 0x27d2 <LCD_SendData+0x98>
			u8DIOData = u8Command & 0x01;
			u8DIOData = (~u8DIOData) + 1;
			u8Command = u8Command >> 1;
			DIO_PinWrite(au8LCDDataPins4BitMode[u8LoopIndex], u8DIOData);
		}
		DIO_PinWrite(LCD_EN_PIN_NO, HIGH);
    2812:	87 e1       	ldi	r24, 0x17	; 23
    2814:	61 e0       	ldi	r22, 0x01	; 1
    2816:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <DIO_PinWrite>
		DIO_PinWrite(LCD_EN_PIN_NO, LOW);
    281a:	87 e1       	ldi	r24, 0x17	; 23
    281c:	60 e0       	ldi	r22, 0x00	; 0
    281e:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <DIO_PinWrite>
		u8Command = (u8DataId & 0x0F);
    2822:	8d 81       	ldd	r24, Y+5	; 0x05
    2824:	8f 70       	andi	r24, 0x0F	; 15
    2826:	89 83       	std	Y+1, r24	; 0x01
		for(u8LoopIndex = 0; u8LoopIndex < enuLCDDataModeState; u8LoopIndex++)
    2828:	1c 82       	std	Y+4, r1	; 0x04
    282a:	1b 82       	std	Y+3, r1	; 0x03
    282c:	17 c0       	rjmp	.+46     	; 0x285c <LCD_SendData+0x122>
		{
			u8DIOData = u8Command & 0x01;
    282e:	89 81       	ldd	r24, Y+1	; 0x01
    2830:	81 70       	andi	r24, 0x01	; 1
    2832:	8a 83       	std	Y+2, r24	; 0x02
			u8DIOData = (~u8DIOData) + 1;
    2834:	8a 81       	ldd	r24, Y+2	; 0x02
    2836:	81 95       	neg	r24
    2838:	8a 83       	std	Y+2, r24	; 0x02
			u8Command = u8Command >> 1;
    283a:	89 81       	ldd	r24, Y+1	; 0x01
    283c:	86 95       	lsr	r24
    283e:	89 83       	std	Y+1, r24	; 0x01
			DIO_PinWrite(au8LCDDataPins4BitMode[u8LoopIndex], u8DIOData);
    2840:	8b 81       	ldd	r24, Y+3	; 0x03
    2842:	9c 81       	ldd	r25, Y+4	; 0x04
    2844:	fc 01       	movw	r30, r24
    2846:	ee 54       	subi	r30, 0x4E	; 78
    2848:	fc 4f       	sbci	r31, 0xFC	; 252
    284a:	80 81       	ld	r24, Z
    284c:	6a 81       	ldd	r22, Y+2	; 0x02
    284e:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <DIO_PinWrite>
			DIO_PinWrite(au8LCDDataPins4BitMode[u8LoopIndex], u8DIOData);
		}
		DIO_PinWrite(LCD_EN_PIN_NO, HIGH);
		DIO_PinWrite(LCD_EN_PIN_NO, LOW);
		u8Command = (u8DataId & 0x0F);
		for(u8LoopIndex = 0; u8LoopIndex < enuLCDDataModeState; u8LoopIndex++)
    2852:	8b 81       	ldd	r24, Y+3	; 0x03
    2854:	9c 81       	ldd	r25, Y+4	; 0x04
    2856:	01 96       	adiw	r24, 0x01	; 1
    2858:	9c 83       	std	Y+4, r25	; 0x04
    285a:	8b 83       	std	Y+3, r24	; 0x03
    285c:	80 91 f1 03 	lds	r24, 0x03F1
    2860:	28 2f       	mov	r18, r24
    2862:	30 e0       	ldi	r19, 0x00	; 0
    2864:	8b 81       	ldd	r24, Y+3	; 0x03
    2866:	9c 81       	ldd	r25, Y+4	; 0x04
    2868:	82 17       	cp	r24, r18
    286a:	93 07       	cpc	r25, r19
    286c:	00 f3       	brcs	.-64     	; 0x282e <LCD_SendData+0xf4>
			u8DIOData = u8Command & 0x01;
			u8DIOData = (~u8DIOData) + 1;
			u8Command = u8Command >> 1;
			DIO_PinWrite(au8LCDDataPins4BitMode[u8LoopIndex], u8DIOData);
		}
		DIO_PinWrite(LCD_EN_PIN_NO, HIGH);
    286e:	87 e1       	ldi	r24, 0x17	; 23
    2870:	61 e0       	ldi	r22, 0x01	; 1
    2872:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <DIO_PinWrite>
		DIO_PinWrite(LCD_EN_PIN_NO, LOW);
    2876:	87 e1       	ldi	r24, 0x17	; 23
    2878:	60 e0       	ldi	r22, 0x00	; 0
    287a:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <DIO_PinWrite>
	}
	else
	{
	}
}
    287e:	0f 90       	pop	r0
    2880:	0f 90       	pop	r0
    2882:	0f 90       	pop	r0
    2884:	0f 90       	pop	r0
    2886:	0f 90       	pop	r0
    2888:	cf 91       	pop	r28
    288a:	df 91       	pop	r29
    288c:	08 95       	ret

0000288e <LCD_Delay>:
* Parameters	: u8DelayValue
* Return Value	: void
* Description  : Give the LCD controller sufficient time to receive commands
*************************************************************************************************/
static void LCD_Delay(uint16_t u16DelayValue)
{
    288e:	df 93       	push	r29
    2890:	cf 93       	push	r28
    2892:	00 d0       	rcall	.+0      	; 0x2894 <LCD_Delay+0x6>
    2894:	00 d0       	rcall	.+0      	; 0x2896 <LCD_Delay+0x8>
    2896:	00 d0       	rcall	.+0      	; 0x2898 <LCD_Delay+0xa>
    2898:	cd b7       	in	r28, 0x3d	; 61
    289a:	de b7       	in	r29, 0x3e	; 62
    289c:	9e 83       	std	Y+6, r25	; 0x06
    289e:	8d 83       	std	Y+5, r24	; 0x05
	volatile uint32_t u32LoopIndex;
	for(u32LoopIndex = 0; (u32LoopIndex < (u16DelayValue * 4)); u32LoopIndex++);
    28a0:	19 82       	std	Y+1, r1	; 0x01
    28a2:	1a 82       	std	Y+2, r1	; 0x02
    28a4:	1b 82       	std	Y+3, r1	; 0x03
    28a6:	1c 82       	std	Y+4, r1	; 0x04
    28a8:	0b c0       	rjmp	.+22     	; 0x28c0 <LCD_Delay+0x32>
    28aa:	89 81       	ldd	r24, Y+1	; 0x01
    28ac:	9a 81       	ldd	r25, Y+2	; 0x02
    28ae:	ab 81       	ldd	r26, Y+3	; 0x03
    28b0:	bc 81       	ldd	r27, Y+4	; 0x04
    28b2:	01 96       	adiw	r24, 0x01	; 1
    28b4:	a1 1d       	adc	r26, r1
    28b6:	b1 1d       	adc	r27, r1
    28b8:	89 83       	std	Y+1, r24	; 0x01
    28ba:	9a 83       	std	Y+2, r25	; 0x02
    28bc:	ab 83       	std	Y+3, r26	; 0x03
    28be:	bc 83       	std	Y+4, r27	; 0x04
    28c0:	8d 81       	ldd	r24, Y+5	; 0x05
    28c2:	9e 81       	ldd	r25, Y+6	; 0x06
    28c4:	88 0f       	add	r24, r24
    28c6:	99 1f       	adc	r25, r25
    28c8:	88 0f       	add	r24, r24
    28ca:	99 1f       	adc	r25, r25
    28cc:	9c 01       	movw	r18, r24
    28ce:	40 e0       	ldi	r20, 0x00	; 0
    28d0:	50 e0       	ldi	r21, 0x00	; 0
    28d2:	89 81       	ldd	r24, Y+1	; 0x01
    28d4:	9a 81       	ldd	r25, Y+2	; 0x02
    28d6:	ab 81       	ldd	r26, Y+3	; 0x03
    28d8:	bc 81       	ldd	r27, Y+4	; 0x04
    28da:	82 17       	cp	r24, r18
    28dc:	93 07       	cpc	r25, r19
    28de:	a4 07       	cpc	r26, r20
    28e0:	b5 07       	cpc	r27, r21
    28e2:	18 f3       	brcs	.-58     	; 0x28aa <LCD_Delay+0x1c>
}
    28e4:	26 96       	adiw	r28, 0x06	; 6
    28e6:	0f b6       	in	r0, 0x3f	; 63
    28e8:	f8 94       	cli
    28ea:	de bf       	out	0x3e, r29	; 62
    28ec:	0f be       	out	0x3f, r0	; 63
    28ee:	cd bf       	out	0x3d, r28	; 61
    28f0:	cf 91       	pop	r28
    28f2:	df 91       	pop	r29
    28f4:	08 95       	ret

000028f6 <Keypad_Init>:
* Parameters	: enuKeypadType
* Return Value	: enuErrorStatus_t
* Description  : Initialize the Keypad according to the configuration
*************************************************************************************************/
enuErrorStatus_t Keypad_Init(enuKeypadType_t enuKeypadType)
{
    28f6:	df 93       	push	r29
    28f8:	cf 93       	push	r28
    28fa:	00 d0       	rcall	.+0      	; 0x28fc <Keypad_Init+0x6>
    28fc:	0f 92       	push	r0
    28fe:	cd b7       	in	r28, 0x3d	; 61
    2900:	de b7       	in	r29, 0x3e	; 62
    2902:	8b 83       	std	Y+3, r24	; 0x03
	enuErrorStatus_t enuRetVar;
	uint8_t u8LoopIndex;
	
	if((enuKeypadType > KEYPAD_TYPE_MIN_VALUE) && (enuKeypadType < KEYPAD_TYPE_MAX_VALUE))
    2904:	8b 81       	ldd	r24, Y+3	; 0x03
    2906:	82 30       	cpi	r24, 0x02	; 2
    2908:	08 f0       	brcs	.+2      	; 0x290c <Keypad_Init+0x16>
    290a:	43 c0       	rjmp	.+134    	; 0x2992 <Keypad_Init+0x9c>
	{
		for(u8LoopIndex = 0; (u8LoopIndex < (KEYPAD_COLS_NUMBER - enuKeypadType)); u8LoopIndex++)
    290c:	19 82       	std	Y+1, r1	; 0x01
    290e:	0e c0       	rjmp	.+28     	; 0x292c <Keypad_Init+0x36>
		{
			/* Initializing all col pins as input */
			DIO_PinInit(au8KeypadCols[u8LoopIndex], INPUT, PULL_UP_ENABLE);
    2910:	89 81       	ldd	r24, Y+1	; 0x01
    2912:	88 2f       	mov	r24, r24
    2914:	90 e0       	ldi	r25, 0x00	; 0
    2916:	fc 01       	movw	r30, r24
    2918:	e6 54       	subi	r30, 0x46	; 70
    291a:	fc 4f       	sbci	r31, 0xFC	; 252
    291c:	80 81       	ld	r24, Z
    291e:	60 e0       	ldi	r22, 0x00	; 0
    2920:	41 e0       	ldi	r20, 0x01	; 1
    2922:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <DIO_PinInit>
	enuErrorStatus_t enuRetVar;
	uint8_t u8LoopIndex;
	
	if((enuKeypadType > KEYPAD_TYPE_MIN_VALUE) && (enuKeypadType < KEYPAD_TYPE_MAX_VALUE))
	{
		for(u8LoopIndex = 0; (u8LoopIndex < (KEYPAD_COLS_NUMBER - enuKeypadType)); u8LoopIndex++)
    2926:	89 81       	ldd	r24, Y+1	; 0x01
    2928:	8f 5f       	subi	r24, 0xFF	; 255
    292a:	89 83       	std	Y+1, r24	; 0x01
    292c:	89 81       	ldd	r24, Y+1	; 0x01
    292e:	48 2f       	mov	r20, r24
    2930:	50 e0       	ldi	r21, 0x00	; 0
    2932:	8b 81       	ldd	r24, Y+3	; 0x03
    2934:	28 2f       	mov	r18, r24
    2936:	30 e0       	ldi	r19, 0x00	; 0
    2938:	84 e0       	ldi	r24, 0x04	; 4
    293a:	90 e0       	ldi	r25, 0x00	; 0
    293c:	82 1b       	sub	r24, r18
    293e:	93 0b       	sbc	r25, r19
    2940:	48 17       	cp	r20, r24
    2942:	59 07       	cpc	r21, r25
    2944:	28 f3       	brcs	.-54     	; 0x2910 <Keypad_Init+0x1a>
		{
			/* Initializing all col pins as input */
			DIO_PinInit(au8KeypadCols[u8LoopIndex], INPUT, PULL_UP_ENABLE);
		}
		for(u8LoopIndex = 0; u8LoopIndex < KEYPAD_ROWS_NUMBER; u8LoopIndex++)
    2946:	19 82       	std	Y+1, r1	; 0x01
    2948:	18 c0       	rjmp	.+48     	; 0x297a <Keypad_Init+0x84>
		{
			/* Initializing all row pins as output */
			DIO_PinInit(au8KeypadRows[u8LoopIndex], OUTPUT, NO_CONNECTION);
    294a:	89 81       	ldd	r24, Y+1	; 0x01
    294c:	88 2f       	mov	r24, r24
    294e:	90 e0       	ldi	r25, 0x00	; 0
    2950:	fc 01       	movw	r30, r24
    2952:	ea 54       	subi	r30, 0x4A	; 74
    2954:	fc 4f       	sbci	r31, 0xFC	; 252
    2956:	80 81       	ld	r24, Z
    2958:	61 e0       	ldi	r22, 0x01	; 1
    295a:	40 e0       	ldi	r20, 0x00	; 0
    295c:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <DIO_PinInit>
			/* Initializing all row pins to start detecting a LOW pulse from column pins */
			DIO_PinWrite(au8KeypadRows[u8LoopIndex], HIGH);
    2960:	89 81       	ldd	r24, Y+1	; 0x01
    2962:	88 2f       	mov	r24, r24
    2964:	90 e0       	ldi	r25, 0x00	; 0
    2966:	fc 01       	movw	r30, r24
    2968:	ea 54       	subi	r30, 0x4A	; 74
    296a:	fc 4f       	sbci	r31, 0xFC	; 252
    296c:	80 81       	ld	r24, Z
    296e:	61 e0       	ldi	r22, 0x01	; 1
    2970:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <DIO_PinWrite>
		for(u8LoopIndex = 0; (u8LoopIndex < (KEYPAD_COLS_NUMBER - enuKeypadType)); u8LoopIndex++)
		{
			/* Initializing all col pins as input */
			DIO_PinInit(au8KeypadCols[u8LoopIndex], INPUT, PULL_UP_ENABLE);
		}
		for(u8LoopIndex = 0; u8LoopIndex < KEYPAD_ROWS_NUMBER; u8LoopIndex++)
    2974:	89 81       	ldd	r24, Y+1	; 0x01
    2976:	8f 5f       	subi	r24, 0xFF	; 255
    2978:	89 83       	std	Y+1, r24	; 0x01
    297a:	89 81       	ldd	r24, Y+1	; 0x01
    297c:	84 30       	cpi	r24, 0x04	; 4
    297e:	28 f3       	brcs	.-54     	; 0x294a <Keypad_Init+0x54>
			/* Initializing all row pins as output */
			DIO_PinInit(au8KeypadRows[u8LoopIndex], OUTPUT, NO_CONNECTION);
			/* Initializing all row pins to start detecting a LOW pulse from column pins */
			DIO_PinWrite(au8KeypadRows[u8LoopIndex], HIGH);
		}
		enuKeypadTypeState = enuKeypadType;
    2980:	8b 81       	ldd	r24, Y+3	; 0x03
    2982:	80 93 f3 03 	sts	0x03F3, r24
		enuKeypadState = KEYPAD_INIT_DONE;
    2986:	81 e0       	ldi	r24, 0x01	; 1
    2988:	80 93 f2 03 	sts	0x03F2, r24
		enuRetVar = E_OK;
    298c:	81 e0       	ldi	r24, 0x01	; 1
    298e:	8a 83       	std	Y+2, r24	; 0x02
    2990:	01 c0       	rjmp	.+2      	; 0x2994 <Keypad_Init+0x9e>
	}
	else
	{
		enuRetVar = E_ERROR;
    2992:	1a 82       	std	Y+2, r1	; 0x02
	}
	return enuRetVar;	
    2994:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2996:	0f 90       	pop	r0
    2998:	0f 90       	pop	r0
    299a:	0f 90       	pop	r0
    299c:	cf 91       	pop	r28
    299e:	df 91       	pop	r29
    29a0:	08 95       	ret

000029a2 <Keypad_GetChar>:
* Parameters	: pu8Data
* Return Value	: enuErrorStatus_t
* Description  : Get the current character of the pressed key from the Keypad
*************************************************************************************************/
enuErrorStatus_t Keypad_GetChar(uint8_t* pu8Data)
{
    29a2:	df 93       	push	r29
    29a4:	cf 93       	push	r28
    29a6:	cd b7       	in	r28, 0x3d	; 61
    29a8:	de b7       	in	r29, 0x3e	; 62
    29aa:	27 97       	sbiw	r28, 0x07	; 7
    29ac:	0f b6       	in	r0, 0x3f	; 63
    29ae:	f8 94       	cli
    29b0:	de bf       	out	0x3e, r29	; 62
    29b2:	0f be       	out	0x3f, r0	; 63
    29b4:	cd bf       	out	0x3d, r28	; 61
    29b6:	9f 83       	std	Y+7, r25	; 0x07
    29b8:	8e 83       	std	Y+6, r24	; 0x06
	enuErrorStatus_t enuRetVar;
	enuDigitalStates_t enuDigitalState;
	enuDigitalStates_t u8Flag = LOW;
    29ba:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t u8RowIndex = 0;
    29bc:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t u8ColIndex = 0;
    29be:	19 82       	std	Y+1, r1	; 0x01
	
	if(enuKeypadState == KEYPAD_INIT_DONE)
    29c0:	80 91 f2 03 	lds	r24, 0x03F2
    29c4:	81 30       	cpi	r24, 0x01	; 1
    29c6:	09 f0       	breq	.+2      	; 0x29ca <Keypad_GetChar+0x28>
    29c8:	68 c0       	rjmp	.+208    	; 0x2a9a <Keypad_GetChar+0xf8>
    29ca:	59 c0       	rjmp	.+178    	; 0x2a7e <Keypad_GetChar+0xdc>
	{
		/* Looping until a key is pressed */
		while(u8Flag == LOW)
		{
			for(u8RowIndex = 0; ((u8RowIndex < KEYPAD_ROWS_NUMBER) && (u8Flag == LOW)); u8RowIndex++)
    29cc:	1a 82       	std	Y+2, r1	; 0x02
    29ce:	50 c0       	rjmp	.+160    	; 0x2a70 <Keypad_GetChar+0xce>
			{
				/* Setting the value of one row */
				DIO_PinWrite(au8KeypadRows[u8RowIndex], LOW);
    29d0:	8a 81       	ldd	r24, Y+2	; 0x02
    29d2:	88 2f       	mov	r24, r24
    29d4:	90 e0       	ldi	r25, 0x00	; 0
    29d6:	fc 01       	movw	r30, r24
    29d8:	ea 54       	subi	r30, 0x4A	; 74
    29da:	fc 4f       	sbci	r31, 0xFC	; 252
    29dc:	80 81       	ld	r24, Z
    29de:	60 e0       	ldi	r22, 0x00	; 0
    29e0:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <DIO_PinWrite>
				/* Looping on each column to read their values */
				for(u8ColIndex = 0; ((u8ColIndex < (KEYPAD_COLS_NUMBER - enuKeypadTypeState)) && (u8Flag == LOW)); u8ColIndex++)
    29e4:	19 82       	std	Y+1, r1	; 0x01
    29e6:	26 c0       	rjmp	.+76     	; 0x2a34 <Keypad_GetChar+0x92>
				{
					/* Reading the value of the current column */
					DIO_PinRead(au8KeypadCols[u8ColIndex], &enuDigitalState);
    29e8:	89 81       	ldd	r24, Y+1	; 0x01
    29ea:	88 2f       	mov	r24, r24
    29ec:	90 e0       	ldi	r25, 0x00	; 0
    29ee:	fc 01       	movw	r30, r24
    29f0:	e6 54       	subi	r30, 0x46	; 70
    29f2:	fc 4f       	sbci	r31, 0xFC	; 252
    29f4:	80 81       	ld	r24, Z
    29f6:	9e 01       	movw	r18, r28
    29f8:	2b 5f       	subi	r18, 0xFB	; 251
    29fa:	3f 4f       	sbci	r19, 0xFF	; 255
    29fc:	b9 01       	movw	r22, r18
    29fe:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <DIO_PinRead>
					/* Checking if a column is attached to a row / key is pressed to raise a flag and break the loop */
					if(enuDigitalState == LOW)
    2a02:	8d 81       	ldd	r24, Y+5	; 0x05
    2a04:	88 23       	and	r24, r24
    2a06:	99 f4       	brne	.+38     	; 0x2a2e <Keypad_GetChar+0x8c>
					{
						/* Raising the flag to break the loop after a key is pressed */
						u8Flag = HIGH;
    2a08:	81 e0       	ldi	r24, 0x01	; 1
    2a0a:	8b 83       	std	Y+3, r24	; 0x03
    2a0c:	0d c0       	rjmp	.+26     	; 0x2a28 <Keypad_GetChar+0x86>
						/* Waiting for the key to be released */
						while(enuDigitalState == LOW)
						{
							DIO_PinRead(au8KeypadCols[u8ColIndex], &enuDigitalState);						
    2a0e:	89 81       	ldd	r24, Y+1	; 0x01
    2a10:	88 2f       	mov	r24, r24
    2a12:	90 e0       	ldi	r25, 0x00	; 0
    2a14:	fc 01       	movw	r30, r24
    2a16:	e6 54       	subi	r30, 0x46	; 70
    2a18:	fc 4f       	sbci	r31, 0xFC	; 252
    2a1a:	80 81       	ld	r24, Z
    2a1c:	9e 01       	movw	r18, r28
    2a1e:	2b 5f       	subi	r18, 0xFB	; 251
    2a20:	3f 4f       	sbci	r19, 0xFF	; 255
    2a22:	b9 01       	movw	r22, r18
    2a24:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <DIO_PinRead>
					if(enuDigitalState == LOW)
					{
						/* Raising the flag to break the loop after a key is pressed */
						u8Flag = HIGH;
						/* Waiting for the key to be released */
						while(enuDigitalState == LOW)
    2a28:	8d 81       	ldd	r24, Y+5	; 0x05
    2a2a:	88 23       	and	r24, r24
    2a2c:	81 f3       	breq	.-32     	; 0x2a0e <Keypad_GetChar+0x6c>
			for(u8RowIndex = 0; ((u8RowIndex < KEYPAD_ROWS_NUMBER) && (u8Flag == LOW)); u8RowIndex++)
			{
				/* Setting the value of one row */
				DIO_PinWrite(au8KeypadRows[u8RowIndex], LOW);
				/* Looping on each column to read their values */
				for(u8ColIndex = 0; ((u8ColIndex < (KEYPAD_COLS_NUMBER - enuKeypadTypeState)) && (u8Flag == LOW)); u8ColIndex++)
    2a2e:	89 81       	ldd	r24, Y+1	; 0x01
    2a30:	8f 5f       	subi	r24, 0xFF	; 255
    2a32:	89 83       	std	Y+1, r24	; 0x01
    2a34:	89 81       	ldd	r24, Y+1	; 0x01
    2a36:	48 2f       	mov	r20, r24
    2a38:	50 e0       	ldi	r21, 0x00	; 0
    2a3a:	80 91 f3 03 	lds	r24, 0x03F3
    2a3e:	28 2f       	mov	r18, r24
    2a40:	30 e0       	ldi	r19, 0x00	; 0
    2a42:	84 e0       	ldi	r24, 0x04	; 4
    2a44:	90 e0       	ldi	r25, 0x00	; 0
    2a46:	82 1b       	sub	r24, r18
    2a48:	93 0b       	sbc	r25, r19
    2a4a:	48 17       	cp	r20, r24
    2a4c:	59 07       	cpc	r21, r25
    2a4e:	18 f4       	brcc	.+6      	; 0x2a56 <Keypad_GetChar+0xb4>
    2a50:	8b 81       	ldd	r24, Y+3	; 0x03
    2a52:	88 23       	and	r24, r24
    2a54:	49 f2       	breq	.-110    	; 0x29e8 <Keypad_GetChar+0x46>
					else
					{
					}					
				}
				/* Clearing the value of the already set row */
				DIO_PinWrite(au8KeypadRows[u8RowIndex], HIGH);
    2a56:	8a 81       	ldd	r24, Y+2	; 0x02
    2a58:	88 2f       	mov	r24, r24
    2a5a:	90 e0       	ldi	r25, 0x00	; 0
    2a5c:	fc 01       	movw	r30, r24
    2a5e:	ea 54       	subi	r30, 0x4A	; 74
    2a60:	fc 4f       	sbci	r31, 0xFC	; 252
    2a62:	80 81       	ld	r24, Z
    2a64:	61 e0       	ldi	r22, 0x01	; 1
    2a66:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <DIO_PinWrite>
	if(enuKeypadState == KEYPAD_INIT_DONE)
	{
		/* Looping until a key is pressed */
		while(u8Flag == LOW)
		{
			for(u8RowIndex = 0; ((u8RowIndex < KEYPAD_ROWS_NUMBER) && (u8Flag == LOW)); u8RowIndex++)
    2a6a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a6c:	8f 5f       	subi	r24, 0xFF	; 255
    2a6e:	8a 83       	std	Y+2, r24	; 0x02
    2a70:	8a 81       	ldd	r24, Y+2	; 0x02
    2a72:	84 30       	cpi	r24, 0x04	; 4
    2a74:	20 f4       	brcc	.+8      	; 0x2a7e <Keypad_GetChar+0xdc>
    2a76:	8b 81       	ldd	r24, Y+3	; 0x03
    2a78:	88 23       	and	r24, r24
    2a7a:	09 f4       	brne	.+2      	; 0x2a7e <Keypad_GetChar+0xdc>
    2a7c:	a9 cf       	rjmp	.-174    	; 0x29d0 <Keypad_GetChar+0x2e>
	uint8_t u8ColIndex = 0;
	
	if(enuKeypadState == KEYPAD_INIT_DONE)
	{
		/* Looping until a key is pressed */
		while(u8Flag == LOW)
    2a7e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a80:	88 23       	and	r24, r24
    2a82:	09 f4       	brne	.+2      	; 0x2a86 <Keypad_GetChar+0xe4>
    2a84:	a3 cf       	rjmp	.-186    	; 0x29cc <Keypad_GetChar+0x2a>
				/* Clearing the value of the already set row */
				DIO_PinWrite(au8KeypadRows[u8RowIndex], HIGH);
			}
		}
		/* Mapping the pressed key to get its corresponding value */
		*pu8Data = Keypad_CharMapping(u8ColIndex, u8RowIndex);
    2a86:	89 81       	ldd	r24, Y+1	; 0x01
    2a88:	6a 81       	ldd	r22, Y+2	; 0x02
    2a8a:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <Keypad_CharMapping>
    2a8e:	ee 81       	ldd	r30, Y+6	; 0x06
    2a90:	ff 81       	ldd	r31, Y+7	; 0x07
    2a92:	80 83       	st	Z, r24
		enuRetVar = E_OK;
    2a94:	81 e0       	ldi	r24, 0x01	; 1
    2a96:	8c 83       	std	Y+4, r24	; 0x04
    2a98:	01 c0       	rjmp	.+2      	; 0x2a9c <Keypad_GetChar+0xfa>
	}
	else
	{
		enuRetVar = E_ERROR;
    2a9a:	1c 82       	std	Y+4, r1	; 0x04
	}
	return enuRetVar;
    2a9c:	8c 81       	ldd	r24, Y+4	; 0x04
}
    2a9e:	27 96       	adiw	r28, 0x07	; 7
    2aa0:	0f b6       	in	r0, 0x3f	; 63
    2aa2:	f8 94       	cli
    2aa4:	de bf       	out	0x3e, r29	; 62
    2aa6:	0f be       	out	0x3f, r0	; 63
    2aa8:	cd bf       	out	0x3d, r28	; 61
    2aaa:	cf 91       	pop	r28
    2aac:	df 91       	pop	r29
    2aae:	08 95       	ret

00002ab0 <Keypad_CharMapping>:
* Parameters	: u8ColIndex, u8RowIndex
* Return Value	: uint8_t
* Description  : Calculate the value the corresponds the current row and column indexes
*************************************************************************************************/
static uint8_t Keypad_CharMapping(uint8_t u8ColIndex, uint8_t u8RowIndex)
{
    2ab0:	df 93       	push	r29
    2ab2:	cf 93       	push	r28
    2ab4:	00 d0       	rcall	.+0      	; 0x2ab6 <Keypad_CharMapping+0x6>
    2ab6:	00 d0       	rcall	.+0      	; 0x2ab8 <Keypad_CharMapping+0x8>
    2ab8:	0f 92       	push	r0
    2aba:	cd b7       	in	r28, 0x3d	; 61
    2abc:	de b7       	in	r29, 0x3e	; 62
    2abe:	8a 83       	std	Y+2, r24	; 0x02
    2ac0:	6b 83       	std	Y+3, r22	; 0x03
    uint8_t u8OutChar;
	 
    /* Calculating the value the corresponds the current row and column indexes         *
     * e.g: If 8 is pressed (Row = 2, Col = 1) -> Char = (1 + 1) + (3 * 2) = 2 + 6 = 8  */
    switch(KEYPAD_CALCULATE_CORRESPONDING_KEY_VALUE(u8ColIndex, u8RowIndex))
    2ac2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ac4:	48 2f       	mov	r20, r24
    2ac6:	50 e0       	ldi	r21, 0x00	; 0
    2ac8:	8b 81       	ldd	r24, Y+3	; 0x03
    2aca:	28 2f       	mov	r18, r24
    2acc:	30 e0       	ldi	r19, 0x00	; 0
    2ace:	c9 01       	movw	r24, r18
    2ad0:	88 0f       	add	r24, r24
    2ad2:	99 1f       	adc	r25, r25
    2ad4:	82 0f       	add	r24, r18
    2ad6:	93 1f       	adc	r25, r19
    2ad8:	03 97       	sbiw	r24, 0x03	; 3
    2ada:	9a 01       	movw	r18, r20
    2adc:	28 0f       	add	r18, r24
    2ade:	39 1f       	adc	r19, r25
    2ae0:	3d 83       	std	Y+5, r19	; 0x05
    2ae2:	2c 83       	std	Y+4, r18	; 0x04
    2ae4:	8c 81       	ldd	r24, Y+4	; 0x04
    2ae6:	9d 81       	ldd	r25, Y+5	; 0x05
    2ae8:	87 30       	cpi	r24, 0x07	; 7
    2aea:	91 05       	cpc	r25, r1
    2aec:	09 f4       	brne	.+2      	; 0x2af0 <Keypad_CharMapping+0x40>
    2aee:	68 c0       	rjmp	.+208    	; 0x2bc0 <Keypad_CharMapping+0x110>
    2af0:	2c 81       	ldd	r18, Y+4	; 0x04
    2af2:	3d 81       	ldd	r19, Y+5	; 0x05
    2af4:	28 30       	cpi	r18, 0x08	; 8
    2af6:	31 05       	cpc	r19, r1
    2af8:	24 f5       	brge	.+72     	; 0x2b42 <Keypad_CharMapping+0x92>
    2afa:	8c 81       	ldd	r24, Y+4	; 0x04
    2afc:	9d 81       	ldd	r25, Y+5	; 0x05
    2afe:	83 30       	cpi	r24, 0x03	; 3
    2b00:	91 05       	cpc	r25, r1
    2b02:	09 f4       	brne	.+2      	; 0x2b06 <Keypad_CharMapping+0x56>
    2b04:	4b c0       	rjmp	.+150    	; 0x2b9c <Keypad_CharMapping+0xec>
    2b06:	2c 81       	ldd	r18, Y+4	; 0x04
    2b08:	3d 81       	ldd	r19, Y+5	; 0x05
    2b0a:	24 30       	cpi	r18, 0x04	; 4
    2b0c:	31 05       	cpc	r19, r1
    2b0e:	64 f4       	brge	.+24     	; 0x2b28 <Keypad_CharMapping+0x78>
    2b10:	8c 81       	ldd	r24, Y+4	; 0x04
    2b12:	9d 81       	ldd	r25, Y+5	; 0x05
    2b14:	81 30       	cpi	r24, 0x01	; 1
    2b16:	91 05       	cpc	r25, r1
    2b18:	09 f4       	brne	.+2      	; 0x2b1c <Keypad_CharMapping+0x6c>
    2b1a:	3a c0       	rjmp	.+116    	; 0x2b90 <Keypad_CharMapping+0xe0>
    2b1c:	2c 81       	ldd	r18, Y+4	; 0x04
    2b1e:	3d 81       	ldd	r19, Y+5	; 0x05
    2b20:	22 30       	cpi	r18, 0x02	; 2
    2b22:	31 05       	cpc	r19, r1
    2b24:	c1 f1       	breq	.+112    	; 0x2b96 <Keypad_CharMapping+0xe6>
    2b26:	6d c0       	rjmp	.+218    	; 0x2c02 <Keypad_CharMapping+0x152>
    2b28:	8c 81       	ldd	r24, Y+4	; 0x04
    2b2a:	9d 81       	ldd	r25, Y+5	; 0x05
    2b2c:	85 30       	cpi	r24, 0x05	; 5
    2b2e:	91 05       	cpc	r25, r1
    2b30:	09 f4       	brne	.+2      	; 0x2b34 <Keypad_CharMapping+0x84>
    2b32:	40 c0       	rjmp	.+128    	; 0x2bb4 <Keypad_CharMapping+0x104>
    2b34:	2c 81       	ldd	r18, Y+4	; 0x04
    2b36:	3d 81       	ldd	r19, Y+5	; 0x05
    2b38:	26 30       	cpi	r18, 0x06	; 6
    2b3a:	31 05       	cpc	r19, r1
    2b3c:	0c f0       	brlt	.+2      	; 0x2b40 <Keypad_CharMapping+0x90>
    2b3e:	3d c0       	rjmp	.+122    	; 0x2bba <Keypad_CharMapping+0x10a>
    2b40:	30 c0       	rjmp	.+96     	; 0x2ba2 <Keypad_CharMapping+0xf2>
    2b42:	8c 81       	ldd	r24, Y+4	; 0x04
    2b44:	9d 81       	ldd	r25, Y+5	; 0x05
    2b46:	8a 30       	cpi	r24, 0x0A	; 10
    2b48:	91 05       	cpc	r25, r1
    2b4a:	09 f4       	brne	.+2      	; 0x2b4e <Keypad_CharMapping+0x9e>
    2b4c:	48 c0       	rjmp	.+144    	; 0x2bde <Keypad_CharMapping+0x12e>
    2b4e:	2c 81       	ldd	r18, Y+4	; 0x04
    2b50:	3d 81       	ldd	r19, Y+5	; 0x05
    2b52:	2b 30       	cpi	r18, 0x0B	; 11
    2b54:	31 05       	cpc	r19, r1
    2b56:	5c f4       	brge	.+22     	; 0x2b6e <Keypad_CharMapping+0xbe>
    2b58:	8c 81       	ldd	r24, Y+4	; 0x04
    2b5a:	9d 81       	ldd	r25, Y+5	; 0x05
    2b5c:	88 30       	cpi	r24, 0x08	; 8
    2b5e:	91 05       	cpc	r25, r1
    2b60:	c1 f1       	breq	.+112    	; 0x2bd2 <Keypad_CharMapping+0x122>
    2b62:	2c 81       	ldd	r18, Y+4	; 0x04
    2b64:	3d 81       	ldd	r19, Y+5	; 0x05
    2b66:	29 30       	cpi	r18, 0x09	; 9
    2b68:	31 05       	cpc	r19, r1
    2b6a:	b1 f1       	breq	.+108    	; 0x2bd8 <Keypad_CharMapping+0x128>
    2b6c:	4a c0       	rjmp	.+148    	; 0x2c02 <Keypad_CharMapping+0x152>
    2b6e:	8c 81       	ldd	r24, Y+4	; 0x04
    2b70:	9d 81       	ldd	r25, Y+5	; 0x05
    2b72:	8c 30       	cpi	r24, 0x0C	; 12
    2b74:	91 05       	cpc	r25, r1
    2b76:	09 f4       	brne	.+2      	; 0x2b7a <Keypad_CharMapping+0xca>
    2b78:	3e c0       	rjmp	.+124    	; 0x2bf6 <Keypad_CharMapping+0x146>
    2b7a:	2c 81       	ldd	r18, Y+4	; 0x04
    2b7c:	3d 81       	ldd	r19, Y+5	; 0x05
    2b7e:	2c 30       	cpi	r18, 0x0C	; 12
    2b80:	31 05       	cpc	r19, r1
    2b82:	b4 f1       	brlt	.+108    	; 0x2bf0 <Keypad_CharMapping+0x140>
    2b84:	8c 81       	ldd	r24, Y+4	; 0x04
    2b86:	9d 81       	ldd	r25, Y+5	; 0x05
    2b88:	8d 30       	cpi	r24, 0x0D	; 13
    2b8a:	91 05       	cpc	r25, r1
    2b8c:	b9 f1       	breq	.+110    	; 0x2bfc <Keypad_CharMapping+0x14c>
    2b8e:	39 c0       	rjmp	.+114    	; 0x2c02 <Keypad_CharMapping+0x152>
    {
        case 1:     u8OutChar = '1';
    2b90:	81 e3       	ldi	r24, 0x31	; 49
    2b92:	89 83       	std	Y+1, r24	; 0x01
    2b94:	38 c0       	rjmp	.+112    	; 0x2c06 <Keypad_CharMapping+0x156>
                    break;
        case 2:     u8OutChar = '2';
    2b96:	82 e3       	ldi	r24, 0x32	; 50
    2b98:	89 83       	std	Y+1, r24	; 0x01
    2b9a:	35 c0       	rjmp	.+106    	; 0x2c06 <Keypad_CharMapping+0x156>
                    break;
        case 3:     u8OutChar = '3';
    2b9c:	83 e3       	ldi	r24, 0x33	; 51
    2b9e:	89 83       	std	Y+1, r24	; 0x01
    2ba0:	32 c0       	rjmp	.+100    	; 0x2c06 <Keypad_CharMapping+0x156>
                    break;
        case 4:     (u8ColIndex == 1) ? (u8OutChar = '4') : (u8OutChar = 'A');
    2ba2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ba4:	81 30       	cpi	r24, 0x01	; 1
    2ba6:	19 f4       	brne	.+6      	; 0x2bae <Keypad_CharMapping+0xfe>
    2ba8:	84 e3       	ldi	r24, 0x34	; 52
    2baa:	89 83       	std	Y+1, r24	; 0x01
    2bac:	2c c0       	rjmp	.+88     	; 0x2c06 <Keypad_CharMapping+0x156>
    2bae:	81 e4       	ldi	r24, 0x41	; 65
    2bb0:	89 83       	std	Y+1, r24	; 0x01
    2bb2:	29 c0       	rjmp	.+82     	; 0x2c06 <Keypad_CharMapping+0x156>
                    break;
        case 5:     u8OutChar = '5';
    2bb4:	85 e3       	ldi	r24, 0x35	; 53
    2bb6:	89 83       	std	Y+1, r24	; 0x01
    2bb8:	26 c0       	rjmp	.+76     	; 0x2c06 <Keypad_CharMapping+0x156>
                    break;
        case 6:     u8OutChar = '6';
    2bba:	86 e3       	ldi	r24, 0x36	; 54
    2bbc:	89 83       	std	Y+1, r24	; 0x01
    2bbe:	23 c0       	rjmp	.+70     	; 0x2c06 <Keypad_CharMapping+0x156>
                    break;
        case 7:     (u8ColIndex == 1) ? (u8OutChar = '7') : (u8OutChar = 'B');
    2bc0:	8a 81       	ldd	r24, Y+2	; 0x02
    2bc2:	81 30       	cpi	r24, 0x01	; 1
    2bc4:	19 f4       	brne	.+6      	; 0x2bcc <Keypad_CharMapping+0x11c>
    2bc6:	87 e3       	ldi	r24, 0x37	; 55
    2bc8:	89 83       	std	Y+1, r24	; 0x01
    2bca:	1d c0       	rjmp	.+58     	; 0x2c06 <Keypad_CharMapping+0x156>
    2bcc:	82 e4       	ldi	r24, 0x42	; 66
    2bce:	89 83       	std	Y+1, r24	; 0x01
    2bd0:	1a c0       	rjmp	.+52     	; 0x2c06 <Keypad_CharMapping+0x156>
                    break;
        case 8:     u8OutChar = '8';
    2bd2:	88 e3       	ldi	r24, 0x38	; 56
    2bd4:	89 83       	std	Y+1, r24	; 0x01
    2bd6:	17 c0       	rjmp	.+46     	; 0x2c06 <Keypad_CharMapping+0x156>
                    break;
        case 9:     u8OutChar = '9';
    2bd8:	89 e3       	ldi	r24, 0x39	; 57
    2bda:	89 83       	std	Y+1, r24	; 0x01
    2bdc:	14 c0       	rjmp	.+40     	; 0x2c06 <Keypad_CharMapping+0x156>
                    break;
        case 10:    (u8ColIndex == 1) ? (u8OutChar = '*') : (u8OutChar = 'C');
    2bde:	8a 81       	ldd	r24, Y+2	; 0x02
    2be0:	81 30       	cpi	r24, 0x01	; 1
    2be2:	19 f4       	brne	.+6      	; 0x2bea <Keypad_CharMapping+0x13a>
    2be4:	8a e2       	ldi	r24, 0x2A	; 42
    2be6:	89 83       	std	Y+1, r24	; 0x01
    2be8:	0e c0       	rjmp	.+28     	; 0x2c06 <Keypad_CharMapping+0x156>
    2bea:	83 e4       	ldi	r24, 0x43	; 67
    2bec:	89 83       	std	Y+1, r24	; 0x01
    2bee:	0b c0       	rjmp	.+22     	; 0x2c06 <Keypad_CharMapping+0x156>
                    break;
        case 11:    u8OutChar = '0';
    2bf0:	80 e3       	ldi	r24, 0x30	; 48
    2bf2:	89 83       	std	Y+1, r24	; 0x01
    2bf4:	08 c0       	rjmp	.+16     	; 0x2c06 <Keypad_CharMapping+0x156>
                    break;
        case 12:    u8OutChar = '#';
    2bf6:	83 e2       	ldi	r24, 0x23	; 35
    2bf8:	89 83       	std	Y+1, r24	; 0x01
    2bfa:	05 c0       	rjmp	.+10     	; 0x2c06 <Keypad_CharMapping+0x156>
                    break;
        case 13:    u8OutChar = 'D';
    2bfc:	84 e4       	ldi	r24, 0x44	; 68
    2bfe:	89 83       	std	Y+1, r24	; 0x01
    2c00:	02 c0       	rjmp	.+4      	; 0x2c06 <Keypad_CharMapping+0x156>
                    break;
        default:    u8OutChar = ' ';
    2c02:	80 e2       	ldi	r24, 0x20	; 32
    2c04:	89 83       	std	Y+1, r24	; 0x01
    }
    return u8OutChar;
    2c06:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c08:	0f 90       	pop	r0
    2c0a:	0f 90       	pop	r0
    2c0c:	0f 90       	pop	r0
    2c0e:	0f 90       	pop	r0
    2c10:	0f 90       	pop	r0
    2c12:	cf 91       	pop	r28
    2c14:	df 91       	pop	r29
    2c16:	08 95       	ret

00002c18 <EEPROM_Init>:
* Parameters (out): enuErrorStatus_t
* Return value: 0=ERROR or 1=SUCCESS
* Description: A function to initialize EEPROM device
************************************************************************************/
enuErrorStatus_t EEPROM_Init      (void)
{
    2c18:	df 93       	push	r29
    2c1a:	cf 93       	push	r28
    2c1c:	cd b7       	in	r28, 0x3d	; 61
    2c1e:	de b7       	in	r29, 0x3e	; 62
   //initialize I2C Bus
   I2C_Init();
    2c20:	0e 94 55 0b 	call	0x16aa	; 0x16aa <I2C_Init>
   return E_OK;
    2c24:	81 e0       	ldi	r24, 0x01	; 1
}
    2c26:	cf 91       	pop	r28
    2c28:	df 91       	pop	r29
    2c2a:	08 95       	ret

00002c2c <EEPROM_WriteByte>:
* Parameters (out): enuErrorStatus_t
* Return value: 0=ERROR or 1=SUCCESS
* Description: A function to write a byte in the EEPROM in a specific address
************************************************************************************/
enuErrorStatus_t EEPROM_WriteByte (uint16_t u16ByteAddress,uint8_t u8Data)
{
    2c2c:	df 93       	push	r29
    2c2e:	cf 93       	push	r28
    2c30:	00 d0       	rcall	.+0      	; 0x2c32 <EEPROM_WriteByte+0x6>
    2c32:	00 d0       	rcall	.+0      	; 0x2c34 <EEPROM_WriteByte+0x8>
    2c34:	00 d0       	rcall	.+0      	; 0x2c36 <EEPROM_WriteByte+0xa>
    2c36:	cd b7       	in	r28, 0x3d	; 61
    2c38:	de b7       	in	r29, 0x3e	; 62
    2c3a:	9d 83       	std	Y+5, r25	; 0x05
    2c3c:	8c 83       	std	Y+4, r24	; 0x04
    2c3e:	6e 83       	std	Y+6, r22	; 0x06
   //transform the byte address into a page number and a byte address within the page
   uint8_t u8ByteAddress_Page=(uint8_t)u16ByteAddress;
    2c40:	8c 81       	ldd	r24, Y+4	; 0x04
    2c42:	8b 83       	std	Y+3, r24	; 0x03
   uint8_t u8PageAddress=(u16ByteAddress>>8)& 0b00000111;
    2c44:	8c 81       	ldd	r24, Y+4	; 0x04
    2c46:	9d 81       	ldd	r25, Y+5	; 0x05
    2c48:	89 2f       	mov	r24, r25
    2c4a:	99 27       	eor	r25, r25
    2c4c:	87 70       	andi	r24, 0x07	; 7
    2c4e:	8a 83       	std	Y+2, r24	; 0x02
   //set up the EEPROM page address frame
   uint8_t u8EEPROM_Address= EEPROM_DEVICE_BASE_ADDRESS | u8PageAddress;
    2c50:	8a 81       	ldd	r24, Y+2	; 0x02
    2c52:	80 65       	ori	r24, 0x50	; 80
    2c54:	89 83       	std	Y+1, r24	; 0x01
   
   //send a start condition
   I2C_Start();
    2c56:	0e 94 b1 0b 	call	0x1762	; 0x1762 <I2C_Start>
   //send the EEPROM page address frame
   I2C_SendAddressFrame(u8EEPROM_Address,Write);
    2c5a:	89 81       	ldd	r24, Y+1	; 0x01
    2c5c:	60 e0       	ldi	r22, 0x00	; 0
    2c5e:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <I2C_SendAddressFrame>
   //send the byte address frame
   I2C_SendDataFrame(u8ByteAddress_Page);
    2c62:	8b 81       	ldd	r24, Y+3	; 0x03
    2c64:	0e 94 4b 0c 	call	0x1896	; 0x1896 <I2C_SendDataFrame>
   //send the data
   I2C_SendDataFrame(u8Data);
    2c68:	8e 81       	ldd	r24, Y+6	; 0x06
    2c6a:	0e 94 4b 0c 	call	0x1896	; 0x1896 <I2C_SendDataFrame>
   //send a stop bit
   I2C_Stop();
    2c6e:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <I2C_Stop>
   return E_OK;
    2c72:	81 e0       	ldi	r24, 0x01	; 1
}
    2c74:	26 96       	adiw	r28, 0x06	; 6
    2c76:	0f b6       	in	r0, 0x3f	; 63
    2c78:	f8 94       	cli
    2c7a:	de bf       	out	0x3e, r29	; 62
    2c7c:	0f be       	out	0x3f, r0	; 63
    2c7e:	cd bf       	out	0x3d, r28	; 61
    2c80:	cf 91       	pop	r28
    2c82:	df 91       	pop	r29
    2c84:	08 95       	ret

00002c86 <EEPROM_ReadByte>:
* Parameters (out): enuErrorStatus_t
* Return value: 0=ERROR or 1=SUCCESS
* Description: A function to read a byte from the EEPROM in a specific address
************************************************************************************/
enuErrorStatus_t EEPROM_ReadByte  (uint16_t u16ByteAddress,uint8_t *pu8Data)
{
    2c86:	df 93       	push	r29
    2c88:	cf 93       	push	r28
    2c8a:	cd b7       	in	r28, 0x3d	; 61
    2c8c:	de b7       	in	r29, 0x3e	; 62
    2c8e:	27 97       	sbiw	r28, 0x07	; 7
    2c90:	0f b6       	in	r0, 0x3f	; 63
    2c92:	f8 94       	cli
    2c94:	de bf       	out	0x3e, r29	; 62
    2c96:	0f be       	out	0x3f, r0	; 63
    2c98:	cd bf       	out	0x3d, r28	; 61
    2c9a:	9d 83       	std	Y+5, r25	; 0x05
    2c9c:	8c 83       	std	Y+4, r24	; 0x04
    2c9e:	7f 83       	std	Y+7, r23	; 0x07
    2ca0:	6e 83       	std	Y+6, r22	; 0x06
   //transform the byte address into a page number and a byte address within the page
   uint8_t u8ByteAddress_Page=(uint8_t)u16ByteAddress;
    2ca2:	8c 81       	ldd	r24, Y+4	; 0x04
    2ca4:	8b 83       	std	Y+3, r24	; 0x03
   uint8_t u8PageAddress=(u16ByteAddress>>8)& 0b00000111;
    2ca6:	8c 81       	ldd	r24, Y+4	; 0x04
    2ca8:	9d 81       	ldd	r25, Y+5	; 0x05
    2caa:	89 2f       	mov	r24, r25
    2cac:	99 27       	eor	r25, r25
    2cae:	87 70       	andi	r24, 0x07	; 7
    2cb0:	8a 83       	std	Y+2, r24	; 0x02
   //set up the EEPROM page address frame
   uint8_t u8EEPROM_Address= EEPROM_DEVICE_BASE_ADDRESS | u8PageAddress;
    2cb2:	8a 81       	ldd	r24, Y+2	; 0x02
    2cb4:	80 65       	ori	r24, 0x50	; 80
    2cb6:	89 83       	std	Y+1, r24	; 0x01
   
   //send a start condition
   I2C_Start();
    2cb8:	0e 94 b1 0b 	call	0x1762	; 0x1762 <I2C_Start>
   //send the EEPROM page address frame
   I2C_SendAddressFrame(u8EEPROM_Address,Write);
    2cbc:	89 81       	ldd	r24, Y+1	; 0x01
    2cbe:	60 e0       	ldi	r22, 0x00	; 0
    2cc0:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <I2C_SendAddressFrame>
   //send the byte address frame
   I2C_SendDataFrame(u8ByteAddress_Page);
    2cc4:	8b 81       	ldd	r24, Y+3	; 0x03
    2cc6:	0e 94 4b 0c 	call	0x1896	; 0x1896 <I2C_SendDataFrame>
   //send a repeated start condition
   I2C_Repeated_Start();
    2cca:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <I2C_Repeated_Start>
   //send the EEPROM page address frame
   I2C_SendAddressFrame(u8EEPROM_Address,Read);
    2cce:	89 81       	ldd	r24, Y+1	; 0x01
    2cd0:	61 e0       	ldi	r22, 0x01	; 1
    2cd2:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <I2C_SendAddressFrame>
   //receive the data from the EEPROM and send a NACK condition
   I2C_RecieveDataFrame(pu8Data,NACK);
    2cd6:	8e 81       	ldd	r24, Y+6	; 0x06
    2cd8:	9f 81       	ldd	r25, Y+7	; 0x07
    2cda:	61 e0       	ldi	r22, 0x01	; 1
    2cdc:	0e 94 87 0c 	call	0x190e	; 0x190e <I2C_RecieveDataFrame>
   //send a stop bit
   I2C_Stop();
    2ce0:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <I2C_Stop>
   
   
   return E_OK;
    2ce4:	81 e0       	ldi	r24, 0x01	; 1
}
    2ce6:	27 96       	adiw	r28, 0x07	; 7
    2ce8:	0f b6       	in	r0, 0x3f	; 63
    2cea:	f8 94       	cli
    2cec:	de bf       	out	0x3e, r29	; 62
    2cee:	0f be       	out	0x3f, r0	; 63
    2cf0:	cd bf       	out	0x3d, r28	; 61
    2cf2:	cf 91       	pop	r28
    2cf4:	df 91       	pop	r29
    2cf6:	08 95       	ret

00002cf8 <EEPROM_WriteString>:
* Parameters (out): enuErrorStatus_t
* Return value: 0=ERROR or 1=SUCCESS
* Description: A function to write a string in the EEPROM in a specific address
************************************************************************************/
enuErrorStatus_t EEPROM_WriteString (uint16_t u16ByteAddress,uint16_t u16ByteCount,uint8_t *pu8Data)
{
    2cf8:	df 93       	push	r29
    2cfa:	cf 93       	push	r28
    2cfc:	cd b7       	in	r28, 0x3d	; 61
    2cfe:	de b7       	in	r29, 0x3e	; 62
    2d00:	2c 97       	sbiw	r28, 0x0c	; 12
    2d02:	0f b6       	in	r0, 0x3f	; 63
    2d04:	f8 94       	cli
    2d06:	de bf       	out	0x3e, r29	; 62
    2d08:	0f be       	out	0x3f, r0	; 63
    2d0a:	cd bf       	out	0x3d, r28	; 61
    2d0c:	9f 83       	std	Y+7, r25	; 0x07
    2d0e:	8e 83       	std	Y+6, r24	; 0x06
    2d10:	79 87       	std	Y+9, r23	; 0x09
    2d12:	68 87       	std	Y+8, r22	; 0x08
    2d14:	5b 87       	std	Y+11, r21	; 0x0b
    2d16:	4a 87       	std	Y+10, r20	; 0x0a
	if (pu8Data==NULLPTR)		return E_ERROR;
    2d18:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d1a:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d1c:	00 97       	sbiw	r24, 0x00	; 0
    2d1e:	11 f4       	brne	.+4      	; 0x2d24 <EEPROM_WriteString+0x2c>
    2d20:	1c 86       	std	Y+12, r1	; 0x0c
    2d22:	3d c0       	rjmp	.+122    	; 0x2d9e <EEPROM_WriteString+0xa6>
	//transform the byte address into a page number and a byte address within the page
	uint8_t u8ByteAddress_Page=(uint8_t)u16ByteAddress;
    2d24:	8e 81       	ldd	r24, Y+6	; 0x06
    2d26:	8d 83       	std	Y+5, r24	; 0x05
	uint8_t u8PageAddress=(u16ByteAddress>>8)& 0b00000111;
    2d28:	8e 81       	ldd	r24, Y+6	; 0x06
    2d2a:	9f 81       	ldd	r25, Y+7	; 0x07
    2d2c:	89 2f       	mov	r24, r25
    2d2e:	99 27       	eor	r25, r25
    2d30:	87 70       	andi	r24, 0x07	; 7
    2d32:	8c 83       	std	Y+4, r24	; 0x04
	//set up the EEPROM page address frame
	uint8_t u8EEPROM_Address= EEPROM_DEVICE_BASE_ADDRESS | u8PageAddress;
    2d34:	8c 81       	ldd	r24, Y+4	; 0x04
    2d36:	80 65       	ori	r24, 0x50	; 80
    2d38:	8b 83       	std	Y+3, r24	; 0x03
	
	if (u16ByteAddress+u16ByteCount>2047)
    2d3a:	2e 81       	ldd	r18, Y+6	; 0x06
    2d3c:	3f 81       	ldd	r19, Y+7	; 0x07
    2d3e:	88 85       	ldd	r24, Y+8	; 0x08
    2d40:	99 85       	ldd	r25, Y+9	; 0x09
    2d42:	82 0f       	add	r24, r18
    2d44:	93 1f       	adc	r25, r19
    2d46:	28 e0       	ldi	r18, 0x08	; 8
    2d48:	80 30       	cpi	r24, 0x00	; 0
    2d4a:	92 07       	cpc	r25, r18
    2d4c:	10 f0       	brcs	.+4      	; 0x2d52 <EEPROM_WriteString+0x5a>
	{
		return E_ERROR;
    2d4e:	1c 86       	std	Y+12, r1	; 0x0c
    2d50:	26 c0       	rjmp	.+76     	; 0x2d9e <EEPROM_WriteString+0xa6>
	}
	//send a start condition
	I2C_Start();
    2d52:	0e 94 b1 0b 	call	0x1762	; 0x1762 <I2C_Start>
	//send the EEPROM page address frame
	I2C_SendAddressFrame(u8EEPROM_Address,Write);
    2d56:	8b 81       	ldd	r24, Y+3	; 0x03
    2d58:	60 e0       	ldi	r22, 0x00	; 0
    2d5a:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <I2C_SendAddressFrame>
	//send the byte address frame
	I2C_SendDataFrame(u8ByteAddress_Page);
    2d5e:	8d 81       	ldd	r24, Y+5	; 0x05
    2d60:	0e 94 4b 0c 	call	0x1896	; 0x1896 <I2C_SendDataFrame>
	
	for (uint16_t i=0;i<u16ByteCount;i++)
    2d64:	1a 82       	std	Y+2, r1	; 0x02
    2d66:	19 82       	std	Y+1, r1	; 0x01
    2d68:	0f c0       	rjmp	.+30     	; 0x2d88 <EEPROM_WriteString+0x90>
	{
		//send the data
		I2C_SendDataFrame(pu8Data[i]);
    2d6a:	2a 85       	ldd	r18, Y+10	; 0x0a
    2d6c:	3b 85       	ldd	r19, Y+11	; 0x0b
    2d6e:	89 81       	ldd	r24, Y+1	; 0x01
    2d70:	9a 81       	ldd	r25, Y+2	; 0x02
    2d72:	f9 01       	movw	r30, r18
    2d74:	e8 0f       	add	r30, r24
    2d76:	f9 1f       	adc	r31, r25
    2d78:	80 81       	ld	r24, Z
    2d7a:	0e 94 4b 0c 	call	0x1896	; 0x1896 <I2C_SendDataFrame>
	//send the EEPROM page address frame
	I2C_SendAddressFrame(u8EEPROM_Address,Write);
	//send the byte address frame
	I2C_SendDataFrame(u8ByteAddress_Page);
	
	for (uint16_t i=0;i<u16ByteCount;i++)
    2d7e:	89 81       	ldd	r24, Y+1	; 0x01
    2d80:	9a 81       	ldd	r25, Y+2	; 0x02
    2d82:	01 96       	adiw	r24, 0x01	; 1
    2d84:	9a 83       	std	Y+2, r25	; 0x02
    2d86:	89 83       	std	Y+1, r24	; 0x01
    2d88:	29 81       	ldd	r18, Y+1	; 0x01
    2d8a:	3a 81       	ldd	r19, Y+2	; 0x02
    2d8c:	88 85       	ldd	r24, Y+8	; 0x08
    2d8e:	99 85       	ldd	r25, Y+9	; 0x09
    2d90:	28 17       	cp	r18, r24
    2d92:	39 07       	cpc	r19, r25
    2d94:	50 f3       	brcs	.-44     	; 0x2d6a <EEPROM_WriteString+0x72>
	{
		//send the data
		I2C_SendDataFrame(pu8Data[i]);
	}
	//send a stop bit
	I2C_Stop();
    2d96:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <I2C_Stop>
	return E_OK;
    2d9a:	81 e0       	ldi	r24, 0x01	; 1
    2d9c:	8c 87       	std	Y+12, r24	; 0x0c
    2d9e:	8c 85       	ldd	r24, Y+12	; 0x0c
}
    2da0:	2c 96       	adiw	r28, 0x0c	; 12
    2da2:	0f b6       	in	r0, 0x3f	; 63
    2da4:	f8 94       	cli
    2da6:	de bf       	out	0x3e, r29	; 62
    2da8:	0f be       	out	0x3f, r0	; 63
    2daa:	cd bf       	out	0x3d, r28	; 61
    2dac:	cf 91       	pop	r28
    2dae:	df 91       	pop	r29
    2db0:	08 95       	ret

00002db2 <EEPROM_ReadString>:
* Parameters (out): enuErrorStatus_t
* Return value: 0=ERROR or 1=SUCCESS
* Description: A function to read a string from the EEPROM in a specific address
************************************************************************************/
enuErrorStatus_t EEPROM_ReadString  (uint16_t u16ByteAddress,uint16_t u16ByteCount,uint8_t *pu8Data)
{
    2db2:	df 93       	push	r29
    2db4:	cf 93       	push	r28
    2db6:	cd b7       	in	r28, 0x3d	; 61
    2db8:	de b7       	in	r29, 0x3e	; 62
    2dba:	2b 97       	sbiw	r28, 0x0b	; 11
    2dbc:	0f b6       	in	r0, 0x3f	; 63
    2dbe:	f8 94       	cli
    2dc0:	de bf       	out	0x3e, r29	; 62
    2dc2:	0f be       	out	0x3f, r0	; 63
    2dc4:	cd bf       	out	0x3d, r28	; 61
    2dc6:	9e 83       	std	Y+6, r25	; 0x06
    2dc8:	8d 83       	std	Y+5, r24	; 0x05
    2dca:	78 87       	std	Y+8, r23	; 0x08
    2dcc:	6f 83       	std	Y+7, r22	; 0x07
    2dce:	5a 87       	std	Y+10, r21	; 0x0a
    2dd0:	49 87       	std	Y+9, r20	; 0x09
	if (pu8Data==NULLPTR)		return E_ERROR;
    2dd2:	89 85       	ldd	r24, Y+9	; 0x09
    2dd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dd6:	00 97       	sbiw	r24, 0x00	; 0
    2dd8:	11 f4       	brne	.+4      	; 0x2dde <EEPROM_ReadString+0x2c>
    2dda:	1b 86       	std	Y+11, r1	; 0x0b
    2ddc:	4c c0       	rjmp	.+152    	; 0x2e76 <EEPROM_ReadString+0xc4>
	//transform the byte address into a page number and a byte address within the page
	uint8_t u8ByteAddress_Page=(uint8_t)u16ByteAddress;
    2dde:	8d 81       	ldd	r24, Y+5	; 0x05
    2de0:	8c 83       	std	Y+4, r24	; 0x04
	uint8_t u8PageAddress=(u16ByteAddress>>8)& 0b00000111;
    2de2:	8d 81       	ldd	r24, Y+5	; 0x05
    2de4:	9e 81       	ldd	r25, Y+6	; 0x06
    2de6:	89 2f       	mov	r24, r25
    2de8:	99 27       	eor	r25, r25
    2dea:	87 70       	andi	r24, 0x07	; 7
    2dec:	8b 83       	std	Y+3, r24	; 0x03
	//set up the EEPROM page address frame
	uint8_t u8EEPROM_Address= EEPROM_DEVICE_BASE_ADDRESS | u8PageAddress;
    2dee:	8b 81       	ldd	r24, Y+3	; 0x03
    2df0:	80 65       	ori	r24, 0x50	; 80
    2df2:	8a 83       	std	Y+2, r24	; 0x02
	
	if (u16ByteAddress+u16ByteCount>2047)
    2df4:	2d 81       	ldd	r18, Y+5	; 0x05
    2df6:	3e 81       	ldd	r19, Y+6	; 0x06
    2df8:	8f 81       	ldd	r24, Y+7	; 0x07
    2dfa:	98 85       	ldd	r25, Y+8	; 0x08
    2dfc:	82 0f       	add	r24, r18
    2dfe:	93 1f       	adc	r25, r19
    2e00:	28 e0       	ldi	r18, 0x08	; 8
    2e02:	80 30       	cpi	r24, 0x00	; 0
    2e04:	92 07       	cpc	r25, r18
    2e06:	10 f0       	brcs	.+4      	; 0x2e0c <EEPROM_ReadString+0x5a>
	{
		return E_ERROR;
    2e08:	1b 86       	std	Y+11, r1	; 0x0b
    2e0a:	35 c0       	rjmp	.+106    	; 0x2e76 <EEPROM_ReadString+0xc4>
	}
	
	//send a start condition
	I2C_Start();
    2e0c:	0e 94 b1 0b 	call	0x1762	; 0x1762 <I2C_Start>
	//send the EEPROM page address frame
	I2C_SendAddressFrame(u8EEPROM_Address,Write);
    2e10:	8a 81       	ldd	r24, Y+2	; 0x02
    2e12:	60 e0       	ldi	r22, 0x00	; 0
    2e14:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <I2C_SendAddressFrame>
	//send the byte address frame
	I2C_SendDataFrame(u8ByteAddress_Page);
    2e18:	8c 81       	ldd	r24, Y+4	; 0x04
    2e1a:	0e 94 4b 0c 	call	0x1896	; 0x1896 <I2C_SendDataFrame>
	//send a repeated start condition
	I2C_Repeated_Start();
    2e1e:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <I2C_Repeated_Start>
	//send the EEPROM page address frame
	I2C_SendAddressFrame(u8EEPROM_Address,Read);
    2e22:	8a 81       	ldd	r24, Y+2	; 0x02
    2e24:	61 e0       	ldi	r22, 0x01	; 1
    2e26:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <I2C_SendAddressFrame>
	uint8_t i;
	for (i=0;i<u16ByteCount-1;i++)
    2e2a:	19 82       	std	Y+1, r1	; 0x01
    2e2c:	0d c0       	rjmp	.+26     	; 0x2e48 <EEPROM_ReadString+0x96>
	{
		//receive the data from the EEPROM and send a ACK condition
		I2C_RecieveDataFrame(&pu8Data[i],ACK);
    2e2e:	89 81       	ldd	r24, Y+1	; 0x01
    2e30:	28 2f       	mov	r18, r24
    2e32:	30 e0       	ldi	r19, 0x00	; 0
    2e34:	89 85       	ldd	r24, Y+9	; 0x09
    2e36:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e38:	82 0f       	add	r24, r18
    2e3a:	93 1f       	adc	r25, r19
    2e3c:	60 e0       	ldi	r22, 0x00	; 0
    2e3e:	0e 94 87 0c 	call	0x190e	; 0x190e <I2C_RecieveDataFrame>
	//send a repeated start condition
	I2C_Repeated_Start();
	//send the EEPROM page address frame
	I2C_SendAddressFrame(u8EEPROM_Address,Read);
	uint8_t i;
	for (i=0;i<u16ByteCount-1;i++)
    2e42:	89 81       	ldd	r24, Y+1	; 0x01
    2e44:	8f 5f       	subi	r24, 0xFF	; 255
    2e46:	89 83       	std	Y+1, r24	; 0x01
    2e48:	89 81       	ldd	r24, Y+1	; 0x01
    2e4a:	28 2f       	mov	r18, r24
    2e4c:	30 e0       	ldi	r19, 0x00	; 0
    2e4e:	8f 81       	ldd	r24, Y+7	; 0x07
    2e50:	98 85       	ldd	r25, Y+8	; 0x08
    2e52:	01 97       	sbiw	r24, 0x01	; 1
    2e54:	28 17       	cp	r18, r24
    2e56:	39 07       	cpc	r19, r25
    2e58:	50 f3       	brcs	.-44     	; 0x2e2e <EEPROM_ReadString+0x7c>
	{
		//receive the data from the EEPROM and send a ACK condition
		I2C_RecieveDataFrame(&pu8Data[i],ACK);
	}	
	//receive the data from the EEPROM and send a NACK condition
	I2C_RecieveDataFrame(&pu8Data[i],NACK);
    2e5a:	89 81       	ldd	r24, Y+1	; 0x01
    2e5c:	28 2f       	mov	r18, r24
    2e5e:	30 e0       	ldi	r19, 0x00	; 0
    2e60:	89 85       	ldd	r24, Y+9	; 0x09
    2e62:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e64:	82 0f       	add	r24, r18
    2e66:	93 1f       	adc	r25, r19
    2e68:	61 e0       	ldi	r22, 0x01	; 1
    2e6a:	0e 94 87 0c 	call	0x190e	; 0x190e <I2C_RecieveDataFrame>
	//send a stop bit
	I2C_Stop();
    2e6e:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <I2C_Stop>
	return E_OK;
    2e72:	81 e0       	ldi	r24, 0x01	; 1
    2e74:	8b 87       	std	Y+11, r24	; 0x0b
    2e76:	8b 85       	ldd	r24, Y+11	; 0x0b

}
    2e78:	2b 96       	adiw	r28, 0x0b	; 11
    2e7a:	0f b6       	in	r0, 0x3f	; 63
    2e7c:	f8 94       	cli
    2e7e:	de bf       	out	0x3e, r29	; 62
    2e80:	0f be       	out	0x3f, r0	; 63
    2e82:	cd bf       	out	0x3d, r28	; 61
    2e84:	cf 91       	pop	r28
    2e86:	df 91       	pop	r29
    2e88:	08 95       	ret

00002e8a <DCFan_Init>:
* Parameters	: enuDIOPinNo
* Return Value	: void
* Description  : Initialize the DC Fan data pin
*************************************************************************************************/
void DCFan_Init(enuDIOPinNo_t enuDIOPinNo)
{	
    2e8a:	df 93       	push	r29
    2e8c:	cf 93       	push	r28
    2e8e:	0f 92       	push	r0
    2e90:	cd b7       	in	r28, 0x3d	; 61
    2e92:	de b7       	in	r29, 0x3e	; 62
    2e94:	89 83       	std	Y+1, r24	; 0x01
	/* Initializing the DC Fan data pin as output */
	DIO_PinInit(enuDIOPinNo, OUTPUT, NO_CONNECTION);
    2e96:	89 81       	ldd	r24, Y+1	; 0x01
    2e98:	61 e0       	ldi	r22, 0x01	; 1
    2e9a:	40 e0       	ldi	r20, 0x00	; 0
    2e9c:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <DIO_PinInit>
	/* Stopping the DC Fan before the system starts */
	DIO_PinWrite(enuDIOPinNo, LOW);
    2ea0:	89 81       	ldd	r24, Y+1	; 0x01
    2ea2:	60 e0       	ldi	r22, 0x00	; 0
    2ea4:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <DIO_PinWrite>
	enuDCFanState[enuDIOPinNo] = DCFAN_INIT_DONE;
    2ea8:	89 81       	ldd	r24, Y+1	; 0x01
    2eaa:	88 2f       	mov	r24, r24
    2eac:	90 e0       	ldi	r25, 0x00	; 0
    2eae:	fc 01       	movw	r30, r24
    2eb0:	ec 50       	subi	r30, 0x0C	; 12
    2eb2:	fc 4f       	sbci	r31, 0xFC	; 252
    2eb4:	81 e0       	ldi	r24, 0x01	; 1
    2eb6:	80 83       	st	Z, r24
}
    2eb8:	0f 90       	pop	r0
    2eba:	cf 91       	pop	r28
    2ebc:	df 91       	pop	r29
    2ebe:	08 95       	ret

00002ec0 <DCFan_Start>:
* Parameters	: enuDIOPinNo
* Return Value	: enuErrorStatus_t
* Description  : Start the DC Fan to rotate
*************************************************************************************************/
enuErrorStatus_t DCFan_Start(enuDIOPinNo_t enuDIOPinNo)
{
    2ec0:	df 93       	push	r29
    2ec2:	cf 93       	push	r28
    2ec4:	00 d0       	rcall	.+0      	; 0x2ec6 <DCFan_Start+0x6>
    2ec6:	cd b7       	in	r28, 0x3d	; 61
    2ec8:	de b7       	in	r29, 0x3e	; 62
    2eca:	8a 83       	std	Y+2, r24	; 0x02
	enuErrorStatus_t enuRetVar;
	
	if(enuDCFanState[enuDIOPinNo] == DCFAN_INIT_DONE)
    2ecc:	8a 81       	ldd	r24, Y+2	; 0x02
    2ece:	88 2f       	mov	r24, r24
    2ed0:	90 e0       	ldi	r25, 0x00	; 0
    2ed2:	fc 01       	movw	r30, r24
    2ed4:	ec 50       	subi	r30, 0x0C	; 12
    2ed6:	fc 4f       	sbci	r31, 0xFC	; 252
    2ed8:	80 81       	ld	r24, Z
    2eda:	81 30       	cpi	r24, 0x01	; 1
    2edc:	39 f4       	brne	.+14     	; 0x2eec <DCFan_Start+0x2c>
	{
		/* Starting the DC Fan */
		DIO_PinWrite(enuDIOPinNo, HIGH);
    2ede:	8a 81       	ldd	r24, Y+2	; 0x02
    2ee0:	61 e0       	ldi	r22, 0x01	; 1
    2ee2:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <DIO_PinWrite>
		enuRetVar = E_OK;
    2ee6:	81 e0       	ldi	r24, 0x01	; 1
    2ee8:	89 83       	std	Y+1, r24	; 0x01
    2eea:	01 c0       	rjmp	.+2      	; 0x2eee <DCFan_Start+0x2e>
	}
	else
	{
		enuRetVar = E_ERROR;
    2eec:	19 82       	std	Y+1, r1	; 0x01
	}
	return enuRetVar;
    2eee:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ef0:	0f 90       	pop	r0
    2ef2:	0f 90       	pop	r0
    2ef4:	cf 91       	pop	r28
    2ef6:	df 91       	pop	r29
    2ef8:	08 95       	ret

00002efa <DCFan_Stop>:
* Parameters	: enuDIOPinNo
* Return Value	: enuErrorStatus_t
* Description  : Stop the DC Fan
*************************************************************************************************/
enuErrorStatus_t DCFan_Stop(enuDIOPinNo_t enuDIOPinNo)
{
    2efa:	df 93       	push	r29
    2efc:	cf 93       	push	r28
    2efe:	00 d0       	rcall	.+0      	; 0x2f00 <DCFan_Stop+0x6>
    2f00:	cd b7       	in	r28, 0x3d	; 61
    2f02:	de b7       	in	r29, 0x3e	; 62
    2f04:	8a 83       	std	Y+2, r24	; 0x02
	enuErrorStatus_t enuRetVar;
	
	if(enuDCFanState[enuDIOPinNo] == DCFAN_INIT_DONE)
    2f06:	8a 81       	ldd	r24, Y+2	; 0x02
    2f08:	88 2f       	mov	r24, r24
    2f0a:	90 e0       	ldi	r25, 0x00	; 0
    2f0c:	fc 01       	movw	r30, r24
    2f0e:	ec 50       	subi	r30, 0x0C	; 12
    2f10:	fc 4f       	sbci	r31, 0xFC	; 252
    2f12:	80 81       	ld	r24, Z
    2f14:	81 30       	cpi	r24, 0x01	; 1
    2f16:	39 f4       	brne	.+14     	; 0x2f26 <DCFan_Stop+0x2c>
	{
		/* Stopping the DC Fan */
		DIO_PinWrite(enuDIOPinNo, LOW);
    2f18:	8a 81       	ldd	r24, Y+2	; 0x02
    2f1a:	60 e0       	ldi	r22, 0x00	; 0
    2f1c:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <DIO_PinWrite>
		enuRetVar = E_OK;
    2f20:	81 e0       	ldi	r24, 0x01	; 1
    2f22:	89 83       	std	Y+1, r24	; 0x01
    2f24:	01 c0       	rjmp	.+2      	; 0x2f28 <DCFan_Stop+0x2e>
	}
	else
	{
		enuRetVar = E_ERROR;
    2f26:	19 82       	std	Y+1, r1	; 0x01
	}
	return enuRetVar;	
    2f28:	89 81       	ldd	r24, Y+1	; 0x01
}
    2f2a:	0f 90       	pop	r0
    2f2c:	0f 90       	pop	r0
    2f2e:	cf 91       	pop	r28
    2f30:	df 91       	pop	r29
    2f32:	08 95       	ret

00002f34 <Button_Init>:
* Parameters	: enuDIOPinNo, enuButtonConnectionType
* Return Value	: enuErrorStatus_t
* Description  : Initialize the button according to the configuration
*************************************************************************************************/
enuErrorStatus_t Button_Init(enuDIOPinNo_t enuDIOPinNo, enuButtonConnectionType_t enuButtonConnectionType)
{
    2f34:	df 93       	push	r29
    2f36:	cf 93       	push	r28
    2f38:	00 d0       	rcall	.+0      	; 0x2f3a <Button_Init+0x6>
    2f3a:	00 d0       	rcall	.+0      	; 0x2f3c <Button_Init+0x8>
    2f3c:	cd b7       	in	r28, 0x3d	; 61
    2f3e:	de b7       	in	r29, 0x3e	; 62
    2f40:	8b 83       	std	Y+3, r24	; 0x03
    2f42:	6c 83       	std	Y+4, r22	; 0x04
   enuErrorStatus_t enuRetVar;
   uint8_t u8Data;
   
	if((enuButtonConnectionType > BUTTON_CONNECTION_TYPE_MIN_VALUE) && (enuButtonConnectionType < BUTTON_CONNECTION_TYPE_MAX_VALUE))
    2f44:	8c 81       	ldd	r24, Y+4	; 0x04
    2f46:	82 30       	cpi	r24, 0x02	; 2
    2f48:	d8 f5       	brcc	.+118    	; 0x2fc0 <Button_Init+0x8c>
	{
		/* Initialize the button with the connected DIO pin */
		DIO_PinInit(enuDIOPinNo, INPUT, enuButtonConnectionType);
    2f4a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f4c:	60 e0       	ldi	r22, 0x00	; 0
    2f4e:	4c 81       	ldd	r20, Y+4	; 0x04
    2f50:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <DIO_PinInit>
		/* Reading the current state of the button */
		DIO_PinRead(enuDIOPinNo, &u8Data);
    2f54:	9e 01       	movw	r18, r28
    2f56:	2e 5f       	subi	r18, 0xFE	; 254
    2f58:	3f 4f       	sbci	r19, 0xFF	; 255
    2f5a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f5c:	b9 01       	movw	r22, r18
    2f5e:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <DIO_PinRead>
		/* Checking if the current state of the button according to the configuration is true */
		if(((u8Data == LOW) && (enuButtonConnectionType == BUTTON_ACTIVE_HIGH)) || ((u8Data == HIGH) && (enuButtonConnectionType == BUTTON_ACTIVE_LOW)))
    2f62:	8a 81       	ldd	r24, Y+2	; 0x02
    2f64:	88 23       	and	r24, r24
    2f66:	19 f4       	brne	.+6      	; 0x2f6e <Button_Init+0x3a>
    2f68:	8c 81       	ldd	r24, Y+4	; 0x04
    2f6a:	88 23       	and	r24, r24
    2f6c:	31 f0       	breq	.+12     	; 0x2f7a <Button_Init+0x46>
    2f6e:	8a 81       	ldd	r24, Y+2	; 0x02
    2f70:	81 30       	cpi	r24, 0x01	; 1
    2f72:	59 f4       	brne	.+22     	; 0x2f8a <Button_Init+0x56>
    2f74:	8c 81       	ldd	r24, Y+4	; 0x04
    2f76:	81 30       	cpi	r24, 0x01	; 1
    2f78:	41 f4       	brne	.+16     	; 0x2f8a <Button_Init+0x56>
		{
			enuButtonStates[enuDIOPinNo] = BUTTON_OFF;
    2f7a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f7c:	88 2f       	mov	r24, r24
    2f7e:	90 e0       	ldi	r25, 0x00	; 0
    2f80:	fc 01       	movw	r30, r24
    2f82:	ee 50       	subi	r30, 0x0E	; 14
    2f84:	fa 4f       	sbci	r31, 0xFA	; 250
    2f86:	10 82       	st	Z, r1
    2f88:	08 c0       	rjmp	.+16     	; 0x2f9a <Button_Init+0x66>
		}
		else
		{
			enuButtonStates[enuDIOPinNo] = BUTTON_ON;
    2f8a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f8c:	88 2f       	mov	r24, r24
    2f8e:	90 e0       	ldi	r25, 0x00	; 0
    2f90:	fc 01       	movw	r30, r24
    2f92:	ee 50       	subi	r30, 0x0E	; 14
    2f94:	fa 4f       	sbci	r31, 0xFA	; 250
    2f96:	83 e0       	ldi	r24, 0x03	; 3
    2f98:	80 83       	st	Z, r24
		}
		enuButtonConnectionTypeState[enuDIOPinNo] = enuButtonConnectionType;
    2f9a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f9c:	88 2f       	mov	r24, r24
    2f9e:	90 e0       	ldi	r25, 0x00	; 0
    2fa0:	fc 01       	movw	r30, r24
    2fa2:	ef 50       	subi	r30, 0x0F	; 15
    2fa4:	f9 4f       	sbci	r31, 0xF9	; 249
    2fa6:	8c 81       	ldd	r24, Y+4	; 0x04
    2fa8:	80 83       	st	Z, r24
		enuButtonState[enuDIOPinNo] = BUTTON_INIT_DONE;
    2faa:	8b 81       	ldd	r24, Y+3	; 0x03
    2fac:	88 2f       	mov	r24, r24
    2fae:	90 e0       	ldi	r25, 0x00	; 0
    2fb0:	fc 01       	movw	r30, r24
    2fb2:	ed 50       	subi	r30, 0x0D	; 13
    2fb4:	fb 4f       	sbci	r31, 0xFB	; 251
    2fb6:	81 e0       	ldi	r24, 0x01	; 1
    2fb8:	80 83       	st	Z, r24
		enuRetVar = E_OK;		
    2fba:	81 e0       	ldi	r24, 0x01	; 1
    2fbc:	89 83       	std	Y+1, r24	; 0x01
    2fbe:	01 c0       	rjmp	.+2      	; 0x2fc2 <Button_Init+0x8e>
	}	
	else
	{
		enuRetVar = E_ERROR;
    2fc0:	19 82       	std	Y+1, r1	; 0x01
	}
   return enuRetVar;	
    2fc2:	89 81       	ldd	r24, Y+1	; 0x01
}
    2fc4:	0f 90       	pop	r0
    2fc6:	0f 90       	pop	r0
    2fc8:	0f 90       	pop	r0
    2fca:	0f 90       	pop	r0
    2fcc:	cf 91       	pop	r28
    2fce:	df 91       	pop	r29
    2fd0:	08 95       	ret

00002fd2 <Button_GetState>:
* Parameters	: enuDIOPinNo, penuButtonStates
* Return Value	: enuErrorStatus_t
* Description  : Read the current state of the button
*************************************************************************************************/
enuErrorStatus_t Button_GetState(enuDIOPinNo_t enuDIOPinNo, enuButtonStates_t* penuButtonStates)
{
    2fd2:	df 93       	push	r29
    2fd4:	cf 93       	push	r28
    2fd6:	cd b7       	in	r28, 0x3d	; 61
    2fd8:	de b7       	in	r29, 0x3e	; 62
    2fda:	27 97       	sbiw	r28, 0x07	; 7
    2fdc:	0f b6       	in	r0, 0x3f	; 63
    2fde:	f8 94       	cli
    2fe0:	de bf       	out	0x3e, r29	; 62
    2fe2:	0f be       	out	0x3f, r0	; 63
    2fe4:	cd bf       	out	0x3d, r28	; 61
    2fe6:	8b 83       	std	Y+3, r24	; 0x03
    2fe8:	7d 83       	std	Y+5, r23	; 0x05
    2fea:	6c 83       	std	Y+4, r22	; 0x04
   enuErrorStatus_t enuRetVar;
   uint8_t u8Data;
    
   if(enuButtonState[enuDIOPinNo] == BUTTON_INIT_DONE)
    2fec:	8b 81       	ldd	r24, Y+3	; 0x03
    2fee:	88 2f       	mov	r24, r24
    2ff0:	90 e0       	ldi	r25, 0x00	; 0
    2ff2:	fc 01       	movw	r30, r24
    2ff4:	ed 50       	subi	r30, 0x0D	; 13
    2ff6:	fb 4f       	sbci	r31, 0xFB	; 251
    2ff8:	80 81       	ld	r24, Z
    2ffa:	81 30       	cpi	r24, 0x01	; 1
    2ffc:	09 f0       	breq	.+2      	; 0x3000 <Button_GetState+0x2e>
    2ffe:	02 c1       	rjmp	.+516    	; 0x3204 <Button_GetState+0x232>
   {
	   /* Reading the current state of the required BUTTON group */
	   DIO_PinRead(enuDIOPinNo, &u8Data);
    3000:	9e 01       	movw	r18, r28
    3002:	2e 5f       	subi	r18, 0xFE	; 254
    3004:	3f 4f       	sbci	r19, 0xFF	; 255
    3006:	8b 81       	ldd	r24, Y+3	; 0x03
    3008:	b9 01       	movw	r22, r18
    300a:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <DIO_PinRead>
	   /* Changing the current state of the required BUTTON group according to the action taken */
	   switch(enuButtonStates[enuDIOPinNo])
    300e:	8b 81       	ldd	r24, Y+3	; 0x03
    3010:	88 2f       	mov	r24, r24
    3012:	90 e0       	ldi	r25, 0x00	; 0
    3014:	fc 01       	movw	r30, r24
    3016:	ee 50       	subi	r30, 0x0E	; 14
    3018:	fa 4f       	sbci	r31, 0xFA	; 250
    301a:	80 81       	ld	r24, Z
    301c:	28 2f       	mov	r18, r24
    301e:	30 e0       	ldi	r19, 0x00	; 0
    3020:	3f 83       	std	Y+7, r19	; 0x07
    3022:	2e 83       	std	Y+6, r18	; 0x06
    3024:	8e 81       	ldd	r24, Y+6	; 0x06
    3026:	9f 81       	ldd	r25, Y+7	; 0x07
    3028:	81 30       	cpi	r24, 0x01	; 1
    302a:	91 05       	cpc	r25, r1
    302c:	d1 f1       	breq	.+116    	; 0x30a2 <Button_GetState+0xd0>
    302e:	2e 81       	ldd	r18, Y+6	; 0x06
    3030:	3f 81       	ldd	r19, Y+7	; 0x07
    3032:	22 30       	cpi	r18, 0x02	; 2
    3034:	31 05       	cpc	r19, r1
    3036:	2c f4       	brge	.+10     	; 0x3042 <Button_GetState+0x70>
    3038:	8e 81       	ldd	r24, Y+6	; 0x06
    303a:	9f 81       	ldd	r25, Y+7	; 0x07
    303c:	00 97       	sbiw	r24, 0x00	; 0
    303e:	71 f0       	breq	.+28     	; 0x305c <Button_GetState+0x8a>
    3040:	d4 c0       	rjmp	.+424    	; 0x31ea <Button_GetState+0x218>
    3042:	2e 81       	ldd	r18, Y+6	; 0x06
    3044:	3f 81       	ldd	r19, Y+7	; 0x07
    3046:	22 30       	cpi	r18, 0x02	; 2
    3048:	31 05       	cpc	r19, r1
    304a:	09 f4       	brne	.+2      	; 0x304e <Button_GetState+0x7c>
    304c:	6d c0       	rjmp	.+218    	; 0x3128 <Button_GetState+0x156>
    304e:	8e 81       	ldd	r24, Y+6	; 0x06
    3050:	9f 81       	ldd	r25, Y+7	; 0x07
    3052:	83 30       	cpi	r24, 0x03	; 3
    3054:	91 05       	cpc	r25, r1
    3056:	09 f4       	brne	.+2      	; 0x305a <Button_GetState+0x88>
    3058:	a8 c0       	rjmp	.+336    	; 0x31aa <Button_GetState+0x1d8>
    305a:	c7 c0       	rjmp	.+398    	; 0x31ea <Button_GetState+0x218>
	   {
		   case BUTTON_OFF:
		   {
			   if(((u8Data == HIGH) && (enuButtonConnectionTypeState[enuDIOPinNo] == BUTTON_ACTIVE_HIGH)) || ((u8Data == LOW) && (enuButtonConnectionTypeState[enuDIOPinNo] == BUTTON_ACTIVE_LOW)))
    305c:	8a 81       	ldd	r24, Y+2	; 0x02
    305e:	81 30       	cpi	r24, 0x01	; 1
    3060:	49 f4       	brne	.+18     	; 0x3074 <Button_GetState+0xa2>
    3062:	8b 81       	ldd	r24, Y+3	; 0x03
    3064:	88 2f       	mov	r24, r24
    3066:	90 e0       	ldi	r25, 0x00	; 0
    3068:	fc 01       	movw	r30, r24
    306a:	ef 50       	subi	r30, 0x0F	; 15
    306c:	f9 4f       	sbci	r31, 0xF9	; 249
    306e:	80 81       	ld	r24, Z
    3070:	88 23       	and	r24, r24
    3072:	71 f0       	breq	.+28     	; 0x3090 <Button_GetState+0xbe>
    3074:	8a 81       	ldd	r24, Y+2	; 0x02
    3076:	88 23       	and	r24, r24
    3078:	09 f0       	breq	.+2      	; 0x307c <Button_GetState+0xaa>
    307a:	b7 c0       	rjmp	.+366    	; 0x31ea <Button_GetState+0x218>
    307c:	8b 81       	ldd	r24, Y+3	; 0x03
    307e:	88 2f       	mov	r24, r24
    3080:	90 e0       	ldi	r25, 0x00	; 0
    3082:	fc 01       	movw	r30, r24
    3084:	ef 50       	subi	r30, 0x0F	; 15
    3086:	f9 4f       	sbci	r31, 0xF9	; 249
    3088:	80 81       	ld	r24, Z
    308a:	81 30       	cpi	r24, 0x01	; 1
    308c:	09 f0       	breq	.+2      	; 0x3090 <Button_GetState+0xbe>
    308e:	ad c0       	rjmp	.+346    	; 0x31ea <Button_GetState+0x218>
			   {
				   enuButtonStates[enuDIOPinNo] = BUTTON_PRESSED;
    3090:	8b 81       	ldd	r24, Y+3	; 0x03
    3092:	88 2f       	mov	r24, r24
    3094:	90 e0       	ldi	r25, 0x00	; 0
    3096:	fc 01       	movw	r30, r24
    3098:	ee 50       	subi	r30, 0x0E	; 14
    309a:	fa 4f       	sbci	r31, 0xFA	; 250
    309c:	81 e0       	ldi	r24, 0x01	; 1
    309e:	80 83       	st	Z, r24
    30a0:	a4 c0       	rjmp	.+328    	; 0x31ea <Button_GetState+0x218>
			   }
		   }
		   break;
		   case BUTTON_PRESSED:
		   {
			   if(((u8Data == HIGH) && (enuButtonConnectionTypeState[enuDIOPinNo] == BUTTON_ACTIVE_HIGH)) || ((u8Data == LOW) && (enuButtonConnectionTypeState[enuDIOPinNo] == BUTTON_ACTIVE_LOW)))
    30a2:	8a 81       	ldd	r24, Y+2	; 0x02
    30a4:	81 30       	cpi	r24, 0x01	; 1
    30a6:	49 f4       	brne	.+18     	; 0x30ba <Button_GetState+0xe8>
    30a8:	8b 81       	ldd	r24, Y+3	; 0x03
    30aa:	88 2f       	mov	r24, r24
    30ac:	90 e0       	ldi	r25, 0x00	; 0
    30ae:	fc 01       	movw	r30, r24
    30b0:	ef 50       	subi	r30, 0x0F	; 15
    30b2:	f9 4f       	sbci	r31, 0xF9	; 249
    30b4:	80 81       	ld	r24, Z
    30b6:	88 23       	and	r24, r24
    30b8:	61 f0       	breq	.+24     	; 0x30d2 <Button_GetState+0x100>
    30ba:	8a 81       	ldd	r24, Y+2	; 0x02
    30bc:	88 23       	and	r24, r24
    30be:	91 f4       	brne	.+36     	; 0x30e4 <Button_GetState+0x112>
    30c0:	8b 81       	ldd	r24, Y+3	; 0x03
    30c2:	88 2f       	mov	r24, r24
    30c4:	90 e0       	ldi	r25, 0x00	; 0
    30c6:	fc 01       	movw	r30, r24
    30c8:	ef 50       	subi	r30, 0x0F	; 15
    30ca:	f9 4f       	sbci	r31, 0xF9	; 249
    30cc:	80 81       	ld	r24, Z
    30ce:	81 30       	cpi	r24, 0x01	; 1
    30d0:	49 f4       	brne	.+18     	; 0x30e4 <Button_GetState+0x112>
			   {
				   enuButtonStates[enuDIOPinNo] = BUTTON_ON;
    30d2:	8b 81       	ldd	r24, Y+3	; 0x03
    30d4:	88 2f       	mov	r24, r24
    30d6:	90 e0       	ldi	r25, 0x00	; 0
    30d8:	fc 01       	movw	r30, r24
    30da:	ee 50       	subi	r30, 0x0E	; 14
    30dc:	fa 4f       	sbci	r31, 0xFA	; 250
    30de:	83 e0       	ldi	r24, 0x03	; 3
    30e0:	80 83       	st	Z, r24
    30e2:	83 c0       	rjmp	.+262    	; 0x31ea <Button_GetState+0x218>
			   }
			   else if(((u8Data == HIGH) && (enuButtonConnectionTypeState[enuDIOPinNo] == BUTTON_ACTIVE_LOW)) || ((u8Data == LOW) && (enuButtonConnectionTypeState[enuDIOPinNo] == BUTTON_ACTIVE_HIGH)))
    30e4:	8a 81       	ldd	r24, Y+2	; 0x02
    30e6:	81 30       	cpi	r24, 0x01	; 1
    30e8:	49 f4       	brne	.+18     	; 0x30fc <Button_GetState+0x12a>
    30ea:	8b 81       	ldd	r24, Y+3	; 0x03
    30ec:	88 2f       	mov	r24, r24
    30ee:	90 e0       	ldi	r25, 0x00	; 0
    30f0:	fc 01       	movw	r30, r24
    30f2:	ef 50       	subi	r30, 0x0F	; 15
    30f4:	f9 4f       	sbci	r31, 0xF9	; 249
    30f6:	80 81       	ld	r24, Z
    30f8:	81 30       	cpi	r24, 0x01	; 1
    30fa:	71 f0       	breq	.+28     	; 0x3118 <Button_GetState+0x146>
    30fc:	8a 81       	ldd	r24, Y+2	; 0x02
    30fe:	88 23       	and	r24, r24
    3100:	09 f0       	breq	.+2      	; 0x3104 <Button_GetState+0x132>
    3102:	73 c0       	rjmp	.+230    	; 0x31ea <Button_GetState+0x218>
    3104:	8b 81       	ldd	r24, Y+3	; 0x03
    3106:	88 2f       	mov	r24, r24
    3108:	90 e0       	ldi	r25, 0x00	; 0
    310a:	fc 01       	movw	r30, r24
    310c:	ef 50       	subi	r30, 0x0F	; 15
    310e:	f9 4f       	sbci	r31, 0xF9	; 249
    3110:	80 81       	ld	r24, Z
    3112:	88 23       	and	r24, r24
    3114:	09 f0       	breq	.+2      	; 0x3118 <Button_GetState+0x146>
    3116:	69 c0       	rjmp	.+210    	; 0x31ea <Button_GetState+0x218>
			   {
				   enuButtonStates[enuDIOPinNo] = BUTTON_OFF;
    3118:	8b 81       	ldd	r24, Y+3	; 0x03
    311a:	88 2f       	mov	r24, r24
    311c:	90 e0       	ldi	r25, 0x00	; 0
    311e:	fc 01       	movw	r30, r24
    3120:	ee 50       	subi	r30, 0x0E	; 14
    3122:	fa 4f       	sbci	r31, 0xFA	; 250
    3124:	10 82       	st	Z, r1
    3126:	61 c0       	rjmp	.+194    	; 0x31ea <Button_GetState+0x218>
			   }
		   }
		   break;
		   case BUTTON_RELEASED:
		   {
			   if(((u8Data == HIGH) && (enuButtonConnectionTypeState[enuDIOPinNo] == BUTTON_ACTIVE_HIGH)) || ((u8Data == LOW) && (enuButtonConnectionTypeState[enuDIOPinNo] == BUTTON_ACTIVE_LOW)))
    3128:	8a 81       	ldd	r24, Y+2	; 0x02
    312a:	81 30       	cpi	r24, 0x01	; 1
    312c:	49 f4       	brne	.+18     	; 0x3140 <Button_GetState+0x16e>
    312e:	8b 81       	ldd	r24, Y+3	; 0x03
    3130:	88 2f       	mov	r24, r24
    3132:	90 e0       	ldi	r25, 0x00	; 0
    3134:	fc 01       	movw	r30, r24
    3136:	ef 50       	subi	r30, 0x0F	; 15
    3138:	f9 4f       	sbci	r31, 0xF9	; 249
    313a:	80 81       	ld	r24, Z
    313c:	88 23       	and	r24, r24
    313e:	61 f0       	breq	.+24     	; 0x3158 <Button_GetState+0x186>
    3140:	8a 81       	ldd	r24, Y+2	; 0x02
    3142:	88 23       	and	r24, r24
    3144:	91 f4       	brne	.+36     	; 0x316a <Button_GetState+0x198>
    3146:	8b 81       	ldd	r24, Y+3	; 0x03
    3148:	88 2f       	mov	r24, r24
    314a:	90 e0       	ldi	r25, 0x00	; 0
    314c:	fc 01       	movw	r30, r24
    314e:	ef 50       	subi	r30, 0x0F	; 15
    3150:	f9 4f       	sbci	r31, 0xF9	; 249
    3152:	80 81       	ld	r24, Z
    3154:	81 30       	cpi	r24, 0x01	; 1
    3156:	49 f4       	brne	.+18     	; 0x316a <Button_GetState+0x198>
			   {
				   enuButtonStates[enuDIOPinNo] = BUTTON_ON;
    3158:	8b 81       	ldd	r24, Y+3	; 0x03
    315a:	88 2f       	mov	r24, r24
    315c:	90 e0       	ldi	r25, 0x00	; 0
    315e:	fc 01       	movw	r30, r24
    3160:	ee 50       	subi	r30, 0x0E	; 14
    3162:	fa 4f       	sbci	r31, 0xFA	; 250
    3164:	83 e0       	ldi	r24, 0x03	; 3
    3166:	80 83       	st	Z, r24
    3168:	40 c0       	rjmp	.+128    	; 0x31ea <Button_GetState+0x218>
			   }
			   else if(((u8Data == HIGH) && (enuButtonConnectionTypeState[enuDIOPinNo] == BUTTON_ACTIVE_LOW)) || ((u8Data == LOW) && (enuButtonConnectionTypeState[enuDIOPinNo] == BUTTON_ACTIVE_HIGH)))
    316a:	8a 81       	ldd	r24, Y+2	; 0x02
    316c:	81 30       	cpi	r24, 0x01	; 1
    316e:	49 f4       	brne	.+18     	; 0x3182 <Button_GetState+0x1b0>
    3170:	8b 81       	ldd	r24, Y+3	; 0x03
    3172:	88 2f       	mov	r24, r24
    3174:	90 e0       	ldi	r25, 0x00	; 0
    3176:	fc 01       	movw	r30, r24
    3178:	ef 50       	subi	r30, 0x0F	; 15
    317a:	f9 4f       	sbci	r31, 0xF9	; 249
    317c:	80 81       	ld	r24, Z
    317e:	81 30       	cpi	r24, 0x01	; 1
    3180:	61 f0       	breq	.+24     	; 0x319a <Button_GetState+0x1c8>
    3182:	8a 81       	ldd	r24, Y+2	; 0x02
    3184:	88 23       	and	r24, r24
    3186:	89 f5       	brne	.+98     	; 0x31ea <Button_GetState+0x218>
    3188:	8b 81       	ldd	r24, Y+3	; 0x03
    318a:	88 2f       	mov	r24, r24
    318c:	90 e0       	ldi	r25, 0x00	; 0
    318e:	fc 01       	movw	r30, r24
    3190:	ef 50       	subi	r30, 0x0F	; 15
    3192:	f9 4f       	sbci	r31, 0xF9	; 249
    3194:	80 81       	ld	r24, Z
    3196:	88 23       	and	r24, r24
    3198:	41 f5       	brne	.+80     	; 0x31ea <Button_GetState+0x218>
			   {
				   enuButtonStates[enuDIOPinNo] = BUTTON_OFF;
    319a:	8b 81       	ldd	r24, Y+3	; 0x03
    319c:	88 2f       	mov	r24, r24
    319e:	90 e0       	ldi	r25, 0x00	; 0
    31a0:	fc 01       	movw	r30, r24
    31a2:	ee 50       	subi	r30, 0x0E	; 14
    31a4:	fa 4f       	sbci	r31, 0xFA	; 250
    31a6:	10 82       	st	Z, r1
    31a8:	20 c0       	rjmp	.+64     	; 0x31ea <Button_GetState+0x218>
			   }
		   }
		   break;
		   case BUTTON_ON:
		   {
			   if(((u8Data == HIGH) && (enuButtonConnectionTypeState[enuDIOPinNo] == BUTTON_ACTIVE_LOW)) || ((u8Data == LOW) && (enuButtonConnectionTypeState[enuDIOPinNo] == BUTTON_ACTIVE_HIGH)))
    31aa:	8a 81       	ldd	r24, Y+2	; 0x02
    31ac:	81 30       	cpi	r24, 0x01	; 1
    31ae:	49 f4       	brne	.+18     	; 0x31c2 <Button_GetState+0x1f0>
    31b0:	8b 81       	ldd	r24, Y+3	; 0x03
    31b2:	88 2f       	mov	r24, r24
    31b4:	90 e0       	ldi	r25, 0x00	; 0
    31b6:	fc 01       	movw	r30, r24
    31b8:	ef 50       	subi	r30, 0x0F	; 15
    31ba:	f9 4f       	sbci	r31, 0xF9	; 249
    31bc:	80 81       	ld	r24, Z
    31be:	81 30       	cpi	r24, 0x01	; 1
    31c0:	61 f0       	breq	.+24     	; 0x31da <Button_GetState+0x208>
    31c2:	8a 81       	ldd	r24, Y+2	; 0x02
    31c4:	88 23       	and	r24, r24
    31c6:	89 f4       	brne	.+34     	; 0x31ea <Button_GetState+0x218>
    31c8:	8b 81       	ldd	r24, Y+3	; 0x03
    31ca:	88 2f       	mov	r24, r24
    31cc:	90 e0       	ldi	r25, 0x00	; 0
    31ce:	fc 01       	movw	r30, r24
    31d0:	ef 50       	subi	r30, 0x0F	; 15
    31d2:	f9 4f       	sbci	r31, 0xF9	; 249
    31d4:	80 81       	ld	r24, Z
    31d6:	88 23       	and	r24, r24
    31d8:	41 f4       	brne	.+16     	; 0x31ea <Button_GetState+0x218>
			   {
				   enuButtonStates[enuDIOPinNo] = BUTTON_RELEASED;
    31da:	8b 81       	ldd	r24, Y+3	; 0x03
    31dc:	88 2f       	mov	r24, r24
    31de:	90 e0       	ldi	r25, 0x00	; 0
    31e0:	fc 01       	movw	r30, r24
    31e2:	ee 50       	subi	r30, 0x0E	; 14
    31e4:	fa 4f       	sbci	r31, 0xFA	; 250
    31e6:	82 e0       	ldi	r24, 0x02	; 2
    31e8:	80 83       	st	Z, r24
			   {
			   }
		   }
		   break;
	   }
	   *penuButtonStates = enuButtonStates[enuDIOPinNo];
    31ea:	8b 81       	ldd	r24, Y+3	; 0x03
    31ec:	88 2f       	mov	r24, r24
    31ee:	90 e0       	ldi	r25, 0x00	; 0
    31f0:	fc 01       	movw	r30, r24
    31f2:	ee 50       	subi	r30, 0x0E	; 14
    31f4:	fa 4f       	sbci	r31, 0xFA	; 250
    31f6:	80 81       	ld	r24, Z
    31f8:	ec 81       	ldd	r30, Y+4	; 0x04
    31fa:	fd 81       	ldd	r31, Y+5	; 0x05
    31fc:	80 83       	st	Z, r24
	   enuRetVar = E_OK;
    31fe:	81 e0       	ldi	r24, 0x01	; 1
    3200:	89 83       	std	Y+1, r24	; 0x01
    3202:	01 c0       	rjmp	.+2      	; 0x3206 <Button_GetState+0x234>
   }
   else
   {
	   enuRetVar = E_ERROR;
    3204:	19 82       	std	Y+1, r1	; 0x01
   }
   return enuRetVar;
    3206:	89 81       	ldd	r24, Y+1	; 0x01
}
    3208:	27 96       	adiw	r28, 0x07	; 7
    320a:	0f b6       	in	r0, 0x3f	; 63
    320c:	f8 94       	cli
    320e:	de bf       	out	0x3e, r29	; 62
    3210:	0f be       	out	0x3f, r0	; 63
    3212:	cd bf       	out	0x3d, r28	; 61
    3214:	cf 91       	pop	r28
    3216:	df 91       	pop	r29
    3218:	08 95       	ret

0000321a <APP_Init>:
static void APP_Delay(void);
static void doubletostr (double num, char* str, int precision);


void APP_Init(void)
{
    321a:	df 93       	push	r29
    321c:	cf 93       	push	r28
    321e:	cd b7       	in	r28, 0x3d	; 61
    3220:	de b7       	in	r29, 0x3e	; 62
	/* Initializing the UART MCAL driver */
	UART_Init();
    3222:	0e 94 63 07 	call	0xec6	; 0xec6 <UART_Init>
	/* Initializing the SPI MCAL driver */
	SPI_init();
    3226:	0e 94 a4 0a 	call	0x1548	; 0x1548 <SPI_init>
	/* Initializing the LCD ECUAL driver */
	LCD_Init(LCD_DATA_FOUR_BIT_MODE, LCD_CURSOR_OFF);
    322a:	84 e0       	ldi	r24, 0x04	; 4
    322c:	60 e0       	ldi	r22, 0x00	; 0
    322e:	0e 94 0b 12 	call	0x2416	; 0x2416 <LCD_Init>
	/* Initializing the Keypad ECUAL driver */
	Keypad_Init(KEYPAD_4X3);
    3232:	81 e0       	ldi	r24, 0x01	; 1
    3234:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <Keypad_Init>
	/* Initializing the Button ECUAL driver */
	Button_Init(PB2, BUTTON_ACTIVE_HIGH);
    3238:	8a e0       	ldi	r24, 0x0A	; 10
    323a:	60 e0       	ldi	r22, 0x00	; 0
    323c:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <Button_Init>
	/* Initializing the DC Fan ECUAL driver */
	DCFan_Init(PB1);
    3240:	89 e0       	ldi	r24, 0x09	; 9
    3242:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <DCFan_Init>
	/* Initializing the LM35 ECUAL driver */
	LM35_Init();
    3246:	0e 94 b3 11 	call	0x2366	; 0x2366 <LM35_Init>
	/* Initializing the EEPROM ECUAL driver */
	EEPROM_Init();
    324a:	0e 94 0c 16 	call	0x2c18	; 0x2c18 <EEPROM_Init>

	/* Setting the SS pin to stop any incoming transmission/reception process */
	DIO_PinWrite(PB4, HIGH);
    324e:	8c e0       	ldi	r24, 0x0C	; 12
    3250:	61 e0       	ldi	r22, 0x01	; 1
    3252:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <DIO_PinWrite>
	/* Writing "admin" inside the EEPROM */
	EEPROM_WriteString(APP_EPPROM_ADMIN_PASSWORD_ADDRESS, 5, (uint8_t*)"admin");
    3256:	20 e6       	ldi	r18, 0x60	; 96
    3258:	30 e0       	ldi	r19, 0x00	; 0
    325a:	80 e0       	ldi	r24, 0x00	; 0
    325c:	90 e0       	ldi	r25, 0x00	; 0
    325e:	65 e0       	ldi	r22, 0x05	; 5
    3260:	70 e0       	ldi	r23, 0x00	; 0
    3262:	a9 01       	movw	r20, r18
    3264:	0e 94 7c 16 	call	0x2cf8	; 0x2cf8 <EEPROM_WriteString>
}
    3268:	cf 91       	pop	r28
    326a:	df 91       	pop	r29
    326c:	08 95       	ret

0000326e <APP_Update>:

void APP_Update()
{
    326e:	df 93       	push	r29
    3270:	cf 93       	push	r28
    3272:	cd b7       	in	r28, 0x3d	; 61
    3274:	de b7       	in	r29, 0x3e	; 62
    3276:	c8 55       	subi	r28, 0x58	; 88
    3278:	d0 40       	sbci	r29, 0x00	; 0
    327a:	0f b6       	in	r0, 0x3f	; 63
    327c:	f8 94       	cli
    327e:	de bf       	out	0x3e, r29	; 62
    3280:	0f be       	out	0x3f, r0	; 63
    3282:	cd bf       	out	0x3d, r28	; 61
	uint8_t au8AdminPassword[6];
	uint8_t au8EEPROMAdminPassword[6];
	uint8_t au8KeypadPIN[4];
	uint8_t au8Temperature[2];
	uint8_t u8KeypadChar;
	uint8_t u8Temperature = 0;
    3284:	fe 01       	movw	r30, r28
    3286:	e8 5a       	subi	r30, 0xA8	; 168
    3288:	ff 4f       	sbci	r31, 0xFF	; 255
    328a:	10 82       	st	Z, r1
	static uint8_t u8Flag = LOW;

	/* Checking if the system is blocked or not */
	if(u8Flag == LOW)
    328c:	80 91 f0 07 	lds	r24, 0x07F0
    3290:	88 23       	and	r24, r24
    3292:	09 f0       	breq	.+2      	; 0x3296 <APP_Update+0x28>
    3294:	53 c3       	rjmp	.+1702   	; 0x393c <APP_Update+0x6ce>
	{
		/* Clearing the LCD screen */
		LCD_Clear();
    3296:	0e 94 84 12 	call	0x2508	; 0x2508 <LCD_Clear>
		/* Displaying "Welcome to" on the LCD screen */
		LCD_DisplayString((uint8_t*)"   Welcome to");
    329a:	86 e6       	ldi	r24, 0x66	; 102
    329c:	90 e0       	ldi	r25, 0x00	; 0
    329e:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <LCD_DisplayString>
		/* Setting the position of the cursor at the second row of the LCD screen */
		LCD_SetCursorPosition(0, 1);
    32a2:	80 e0       	ldi	r24, 0x00	; 0
    32a4:	61 e0       	ldi	r22, 0x01	; 1
    32a6:	0e 94 99 12 	call	0x2532	; 0x2532 <LCD_SetCursorPosition>
		/* Displaying "ATM System" on the LCD screen */
		LCD_DisplayString((uint8_t*)"   ATM System");
    32aa:	84 e7       	ldi	r24, 0x74	; 116
    32ac:	90 e0       	ldi	r25, 0x00	; 0
    32ae:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <LCD_DisplayString>
		/* Sending "Enter the used mode (ADMIN - USER):" on the terminal by UART */
		UART_SendString((uint8_t*)"Enter the used mode (ADMIN - USER):\r");
    32b2:	82 e8       	ldi	r24, 0x82	; 130
    32b4:	90 e0       	ldi	r25, 0x00	; 0
    32b6:	0e 94 c9 08 	call	0x1192	; 0x1192 <UART_SendString>
		/* Receiving the entered mode from the terminal by UART */
		UART_ReceiveString(au8Mode, MAX_LEN);
    32ba:	ce 01       	movw	r24, r28
    32bc:	cf 96       	adiw	r24, 0x3f	; 63
    32be:	6f ef       	ldi	r22, 0xFF	; 255
    32c0:	0e 94 06 09 	call	0x120c	; 0x120c <UART_ReceiveString>
		/* Sending new line on the terminal by UART */
		UART_SendData((uint8_t)'\r');
    32c4:	8d e0       	ldi	r24, 0x0D	; 13
    32c6:	90 e0       	ldi	r25, 0x00	; 0
    32c8:	0e 94 39 08 	call	0x1072	; 0x1072 <UART_SendData>
		/* Checking if the received mode is ADMIN mode */
		if((au8Mode[0] == 'A') && (au8Mode[1] == 'D') && (au8Mode[2] == 'M') &&
    32cc:	8f ad       	ldd	r24, Y+63	; 0x3f
    32ce:	81 34       	cpi	r24, 0x41	; 65
    32d0:	09 f0       	breq	.+2      	; 0x32d4 <APP_Update+0x66>
    32d2:	e3 c0       	rjmp	.+454    	; 0x349a <APP_Update+0x22c>
    32d4:	fe 01       	movw	r30, r28
    32d6:	e0 5c       	subi	r30, 0xC0	; 192
    32d8:	ff 4f       	sbci	r31, 0xFF	; 255
    32da:	80 81       	ld	r24, Z
    32dc:	84 34       	cpi	r24, 0x44	; 68
    32de:	09 f0       	breq	.+2      	; 0x32e2 <APP_Update+0x74>
    32e0:	dc c0       	rjmp	.+440    	; 0x349a <APP_Update+0x22c>
    32e2:	fe 01       	movw	r30, r28
    32e4:	ef 5b       	subi	r30, 0xBF	; 191
    32e6:	ff 4f       	sbci	r31, 0xFF	; 255
    32e8:	80 81       	ld	r24, Z
    32ea:	8d 34       	cpi	r24, 0x4D	; 77
    32ec:	09 f0       	breq	.+2      	; 0x32f0 <APP_Update+0x82>
    32ee:	d5 c0       	rjmp	.+426    	; 0x349a <APP_Update+0x22c>
    32f0:	fe 01       	movw	r30, r28
    32f2:	ee 5b       	subi	r30, 0xBE	; 190
    32f4:	ff 4f       	sbci	r31, 0xFF	; 255
    32f6:	80 81       	ld	r24, Z
    32f8:	89 34       	cpi	r24, 0x49	; 73
    32fa:	09 f0       	breq	.+2      	; 0x32fe <APP_Update+0x90>
    32fc:	ce c0       	rjmp	.+412    	; 0x349a <APP_Update+0x22c>
    32fe:	fe 01       	movw	r30, r28
    3300:	ed 5b       	subi	r30, 0xBD	; 189
    3302:	ff 4f       	sbci	r31, 0xFF	; 255
    3304:	80 81       	ld	r24, Z
    3306:	8e 34       	cpi	r24, 0x4E	; 78
    3308:	09 f0       	breq	.+2      	; 0x330c <APP_Update+0x9e>
    330a:	c7 c0       	rjmp	.+398    	; 0x349a <APP_Update+0x22c>
		   (au8Mode[3] == 'I') && (au8Mode[4] == 'N'))
		{
			/* Clearing the LCD screen */
			LCD_Clear();
    330c:	0e 94 84 12 	call	0x2508	; 0x2508 <LCD_Clear>
			/* Displaying "ADMIN MODE" on the LCD screen */
			LCD_DisplayString((uint8_t*)"   ADMIN MODE");
    3310:	87 ea       	ldi	r24, 0xA7	; 167
    3312:	90 e0       	ldi	r25, 0x00	; 0
    3314:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <LCD_DisplayString>
			/* Sending "Enter Password:" on the terminal by UART */
			UART_SendString((uint8_t*)"Enter Password:\r");
    3318:	85 eb       	ldi	r24, 0xB5	; 181
    331a:	90 e0       	ldi	r25, 0x00	; 0
    331c:	0e 94 c9 08 	call	0x1192	; 0x1192 <UART_SendString>
			/* Receiving the entered admin password from the terminal by UART */
			UART_ReceiveString(au8AdminPassword, MAX_LEN);
    3320:	ce 01       	movw	r24, r28
    3322:	8b 5b       	subi	r24, 0xBB	; 187
    3324:	9f 4f       	sbci	r25, 0xFF	; 255
    3326:	6f ef       	ldi	r22, 0xFF	; 255
    3328:	0e 94 06 09 	call	0x120c	; 0x120c <UART_ReceiveString>
			/* Reading the stored admin password "admin" from EEPROM */
			EEPROM_ReadString(APP_EPPROM_ADMIN_PASSWORD_ADDRESS, 5, au8EEPROMAdminPassword);
    332c:	9e 01       	movw	r18, r28
    332e:	25 5b       	subi	r18, 0xB5	; 181
    3330:	3f 4f       	sbci	r19, 0xFF	; 255
    3332:	80 e0       	ldi	r24, 0x00	; 0
    3334:	90 e0       	ldi	r25, 0x00	; 0
    3336:	65 e0       	ldi	r22, 0x05	; 5
    3338:	70 e0       	ldi	r23, 0x00	; 0
    333a:	a9 01       	movw	r20, r18
    333c:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <EEPROM_ReadString>
			/* Checking if the entered admin password is the same as the stored admin password in EEPROM */
			if((au8AdminPassword[0] == au8EEPROMAdminPassword[0]) && (au8AdminPassword[1] == au8EEPROMAdminPassword[1]) &&
    3340:	fe 01       	movw	r30, r28
    3342:	eb 5b       	subi	r30, 0xBB	; 187
    3344:	ff 4f       	sbci	r31, 0xFF	; 255
    3346:	90 81       	ld	r25, Z
    3348:	fe 01       	movw	r30, r28
    334a:	e5 5b       	subi	r30, 0xB5	; 181
    334c:	ff 4f       	sbci	r31, 0xFF	; 255
    334e:	80 81       	ld	r24, Z
    3350:	98 17       	cp	r25, r24
    3352:	09 f0       	breq	.+2      	; 0x3356 <APP_Update+0xe8>
    3354:	97 c0       	rjmp	.+302    	; 0x3484 <APP_Update+0x216>
    3356:	fe 01       	movw	r30, r28
    3358:	eb 5b       	subi	r30, 0xBB	; 187
    335a:	ff 4f       	sbci	r31, 0xFF	; 255
    335c:	91 81       	ldd	r25, Z+1	; 0x01
    335e:	fe 01       	movw	r30, r28
    3360:	e5 5b       	subi	r30, 0xB5	; 181
    3362:	ff 4f       	sbci	r31, 0xFF	; 255
    3364:	81 81       	ldd	r24, Z+1	; 0x01
    3366:	98 17       	cp	r25, r24
    3368:	09 f0       	breq	.+2      	; 0x336c <APP_Update+0xfe>
    336a:	8c c0       	rjmp	.+280    	; 0x3484 <APP_Update+0x216>
    336c:	fe 01       	movw	r30, r28
    336e:	eb 5b       	subi	r30, 0xBB	; 187
    3370:	ff 4f       	sbci	r31, 0xFF	; 255
    3372:	92 81       	ldd	r25, Z+2	; 0x02
    3374:	fe 01       	movw	r30, r28
    3376:	e5 5b       	subi	r30, 0xB5	; 181
    3378:	ff 4f       	sbci	r31, 0xFF	; 255
    337a:	82 81       	ldd	r24, Z+2	; 0x02
    337c:	98 17       	cp	r25, r24
    337e:	09 f0       	breq	.+2      	; 0x3382 <APP_Update+0x114>
    3380:	81 c0       	rjmp	.+258    	; 0x3484 <APP_Update+0x216>
    3382:	fe 01       	movw	r30, r28
    3384:	eb 5b       	subi	r30, 0xBB	; 187
    3386:	ff 4f       	sbci	r31, 0xFF	; 255
    3388:	93 81       	ldd	r25, Z+3	; 0x03
    338a:	fe 01       	movw	r30, r28
    338c:	e5 5b       	subi	r30, 0xB5	; 181
    338e:	ff 4f       	sbci	r31, 0xFF	; 255
    3390:	83 81       	ldd	r24, Z+3	; 0x03
    3392:	98 17       	cp	r25, r24
    3394:	09 f0       	breq	.+2      	; 0x3398 <APP_Update+0x12a>
    3396:	76 c0       	rjmp	.+236    	; 0x3484 <APP_Update+0x216>
    3398:	fe 01       	movw	r30, r28
    339a:	eb 5b       	subi	r30, 0xBB	; 187
    339c:	ff 4f       	sbci	r31, 0xFF	; 255
    339e:	94 81       	ldd	r25, Z+4	; 0x04
    33a0:	fe 01       	movw	r30, r28
    33a2:	e5 5b       	subi	r30, 0xB5	; 181
    33a4:	ff 4f       	sbci	r31, 0xFF	; 255
    33a6:	84 81       	ldd	r24, Z+4	; 0x04
    33a8:	98 17       	cp	r25, r24
    33aa:	09 f0       	breq	.+2      	; 0x33ae <APP_Update+0x140>
    33ac:	6b c0       	rjmp	.+214    	; 0x3484 <APP_Update+0x216>
			{
				/* Breaking the loop process if Exit (3) is inserted */
				do
				{
					/* Sending new line on the terminal by UART */
					UART_SendData((uint8_t)'\r');
    33ae:	8d e0       	ldi	r24, 0x0D	; 13
    33b0:	90 e0       	ldi	r25, 0x00	; 0
    33b2:	0e 94 39 08 	call	0x1072	; 0x1072 <UART_SendData>
					/* Sending "Please select one of the following:" on the terminal by UART */
					UART_SendString((uint8_t*)"Please select one of the following:\r");
    33b6:	86 ec       	ldi	r24, 0xC6	; 198
    33b8:	90 e0       	ldi	r25, 0x00	; 0
    33ba:	0e 94 c9 08 	call	0x1192	; 0x1192 <UART_SendString>
					/* Sending "1- Customer Data" on the terminal by UART */
					UART_SendString((uint8_t*)"1- Customer Data\r");
    33be:	8b ee       	ldi	r24, 0xEB	; 235
    33c0:	90 e0       	ldi	r25, 0x00	; 0
    33c2:	0e 94 c9 08 	call	0x1192	; 0x1192 <UART_SendString>
					/* Sending "2- Maximum Amount" on the terminal by UART */
					UART_SendString((uint8_t*)"2- Maximum Amount\r");
    33c6:	8d ef       	ldi	r24, 0xFD	; 253
    33c8:	90 e0       	ldi	r25, 0x00	; 0
    33ca:	0e 94 c9 08 	call	0x1192	; 0x1192 <UART_SendString>
					/* Sending "3- Exit\r" on the terminal by UART */
					UART_SendString((uint8_t*)"3- Exit\r");
    33ce:	80 e1       	ldi	r24, 0x10	; 16
    33d0:	91 e0       	ldi	r25, 0x01	; 1
    33d2:	0e 94 c9 08 	call	0x1192	; 0x1192 <UART_SendString>
					/* Sending new line on the terminal by UART */
					UART_SendData((uint8_t)'\r');
    33d6:	8d e0       	ldi	r24, 0x0D	; 13
    33d8:	90 e0       	ldi	r25, 0x00	; 0
    33da:	0e 94 39 08 	call	0x1072	; 0x1072 <UART_SendData>
					/* Getting the selected mode from the keypad */
					Keypad_GetChar(&u8KeypadChar);
    33de:	ce 01       	movw	r24, r28
    33e0:	89 5a       	subi	r24, 0xA9	; 169
    33e2:	9f 4f       	sbci	r25, 0xFF	; 255
    33e4:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <Keypad_GetChar>
					/* Checking if the selected mode is "Customer Data" */
					if(u8KeypadChar == '1')
    33e8:	fe 01       	movw	r30, r28
    33ea:	e9 5a       	subi	r30, 0xA9	; 169
    33ec:	ff 4f       	sbci	r31, 0xFF	; 255
    33ee:	80 81       	ld	r24, Z
    33f0:	81 33       	cpi	r24, 0x31	; 49
    33f2:	39 f5       	brne	.+78     	; 0x3442 <APP_Update+0x1d4>
					{
						/* Sending "Please enter PAN:" on the terminal by UART */
						UART_SendString((uint8_t*)"Please enter PAN:\r");
    33f4:	89 e1       	ldi	r24, 0x19	; 25
    33f6:	91 e0       	ldi	r25, 0x01	; 1
    33f8:	0e 94 c9 08 	call	0x1192	; 0x1192 <UART_SendString>
						/* Receiving the entered PAN from the terminal by UART */
						UART_ReceiveString(au8PAN, MAX_LEN);
    33fc:	ce 01       	movw	r24, r28
    33fe:	4e 96       	adiw	r24, 0x1e	; 30
    3400:	6f ef       	ldi	r22, 0xFF	; 255
    3402:	0e 94 06 09 	call	0x120c	; 0x120c <UART_ReceiveString>
						/* Writing the PAN inside the EEPROM */
						EEPROM_WriteString(APP_EEPROM_PAN_ADDRESS, 9, au8PAN);
    3406:	9e 01       	movw	r18, r28
    3408:	22 5e       	subi	r18, 0xE2	; 226
    340a:	3f 4f       	sbci	r19, 0xFF	; 255
    340c:	84 e1       	ldi	r24, 0x14	; 20
    340e:	90 e0       	ldi	r25, 0x00	; 0
    3410:	69 e0       	ldi	r22, 0x09	; 9
    3412:	70 e0       	ldi	r23, 0x00	; 0
    3414:	a9 01       	movw	r20, r18
    3416:	0e 94 7c 16 	call	0x2cf8	; 0x2cf8 <EEPROM_WriteString>
						/* Sending "Please enter balance:" on the terminal by UART */
						UART_SendString((uint8_t*)"Please enter balance:\r");
    341a:	8c e2       	ldi	r24, 0x2C	; 44
    341c:	91 e0       	ldi	r25, 0x01	; 1
    341e:	0e 94 c9 08 	call	0x1192	; 0x1192 <UART_SendString>
						/* Receiving the entered balance from the terminal by UART */
						UART_ReceiveString(au8Balance, MAX_LEN);
    3422:	ce 01       	movw	r24, r28
    3424:	88 96       	adiw	r24, 0x28	; 40
    3426:	6f ef       	ldi	r22, 0xFF	; 255
    3428:	0e 94 06 09 	call	0x120c	; 0x120c <UART_ReceiveString>
						/* Writing the balance inside the EEPROM */
						EEPROM_WriteString(APP_EEPROM_BALANCE_ADDRESS, 9, au8Balance);
    342c:	9e 01       	movw	r18, r28
    342e:	28 5d       	subi	r18, 0xD8	; 216
    3430:	3f 4f       	sbci	r19, 0xFF	; 255
    3432:	88 e2       	ldi	r24, 0x28	; 40
    3434:	90 e0       	ldi	r25, 0x00	; 0
    3436:	69 e0       	ldi	r22, 0x09	; 9
    3438:	70 e0       	ldi	r23, 0x00	; 0
    343a:	a9 01       	movw	r20, r18
    343c:	0e 94 7c 16 	call	0x2cf8	; 0x2cf8 <EEPROM_WriteString>
    3440:	19 c0       	rjmp	.+50     	; 0x3474 <APP_Update+0x206>
					}
					/* Checking if the selected mode is "Maximum Amount" */
					else if(u8KeypadChar == '2')
    3442:	fe 01       	movw	r30, r28
    3444:	e9 5a       	subi	r30, 0xA9	; 169
    3446:	ff 4f       	sbci	r31, 0xFF	; 255
    3448:	80 81       	ld	r24, Z
    344a:	82 33       	cpi	r24, 0x32	; 50
    344c:	99 f4       	brne	.+38     	; 0x3474 <APP_Update+0x206>
					{
						/* Sending "Please enter maximum amount:" on the terminal by UART */
						UART_SendString((uint8_t*)"Please enter maximum amount:\r");
    344e:	83 e4       	ldi	r24, 0x43	; 67
    3450:	91 e0       	ldi	r25, 0x01	; 1
    3452:	0e 94 c9 08 	call	0x1192	; 0x1192 <UART_SendString>
						/* Receiving the entered maximmum amount from the terminal by UART */
						UART_ReceiveString(au8MaxAmount, MAX_LEN);
    3456:	ce 01       	movw	r24, r28
    3458:	c0 96       	adiw	r24, 0x30	; 48
    345a:	6f ef       	ldi	r22, 0xFF	; 255
    345c:	0e 94 06 09 	call	0x120c	; 0x120c <UART_ReceiveString>
						/* Writing the maximum amount inside the EEPROM */
						EEPROM_WriteString(APP_EEPROM_MAX_AMOUNT_ADDRESS, 7, au8MaxAmount);
    3460:	9e 01       	movw	r18, r28
    3462:	20 5d       	subi	r18, 0xD0	; 208
    3464:	3f 4f       	sbci	r19, 0xFF	; 255
    3466:	8c e3       	ldi	r24, 0x3C	; 60
    3468:	90 e0       	ldi	r25, 0x00	; 0
    346a:	67 e0       	ldi	r22, 0x07	; 7
    346c:	70 e0       	ldi	r23, 0x00	; 0
    346e:	a9 01       	movw	r20, r18
    3470:	0e 94 7c 16 	call	0x2cf8	; 0x2cf8 <EEPROM_WriteString>
					}
					else
					{
					}
				} while(u8KeypadChar != '3');
    3474:	fe 01       	movw	r30, r28
    3476:	e9 5a       	subi	r30, 0xA9	; 169
    3478:	ff 4f       	sbci	r31, 0xFF	; 255
    347a:	80 81       	ld	r24, Z
    347c:	83 33       	cpi	r24, 0x33	; 51
    347e:	09 f0       	breq	.+2      	; 0x3482 <APP_Update+0x214>
    3480:	96 cf       	rjmp	.-212    	; 0x33ae <APP_Update+0x140>
    3482:	08 c0       	rjmp	.+16     	; 0x3494 <APP_Update+0x226>
			}
			else
			{
				/* Sending "Invalid Password" on the terminal by UART if wrong admin password is inserted */
				UART_SendString((uint8_t*)"Invalid Password\r");
    3484:	81 e6       	ldi	r24, 0x61	; 97
    3486:	91 e0       	ldi	r25, 0x01	; 1
    3488:	0e 94 c9 08 	call	0x1192	; 0x1192 <UART_SendString>
				/* Sending new line on the terminal by UART */
				UART_SendData((uint8_t)'\r');
    348c:	8d e0       	ldi	r24, 0x0D	; 13
    348e:	90 e0       	ldi	r25, 0x00	; 0
    3490:	0e 94 39 08 	call	0x1072	; 0x1072 <UART_SendData>
			}
			u8Flag = LOW;
    3494:	10 92 f0 07 	sts	0x07F0, r1
    3498:	51 c2       	rjmp	.+1186   	; 0x393c <APP_Update+0x6ce>
		}
		/* Checking if the received mode is USER mode */
		else if((au8Mode[0] == 'U') && (au8Mode[1] == 'S') &&
    349a:	8f ad       	ldd	r24, Y+63	; 0x3f
    349c:	85 35       	cpi	r24, 0x55	; 85
    349e:	09 f0       	breq	.+2      	; 0x34a2 <APP_Update+0x234>
    34a0:	45 c2       	rjmp	.+1162   	; 0x392c <APP_Update+0x6be>
    34a2:	fe 01       	movw	r30, r28
    34a4:	e0 5c       	subi	r30, 0xC0	; 192
    34a6:	ff 4f       	sbci	r31, 0xFF	; 255
    34a8:	80 81       	ld	r24, Z
    34aa:	83 35       	cpi	r24, 0x53	; 83
    34ac:	09 f0       	breq	.+2      	; 0x34b0 <APP_Update+0x242>
    34ae:	3e c2       	rjmp	.+1148   	; 0x392c <APP_Update+0x6be>
    34b0:	fe 01       	movw	r30, r28
    34b2:	ef 5b       	subi	r30, 0xBF	; 191
    34b4:	ff 4f       	sbci	r31, 0xFF	; 255
    34b6:	80 81       	ld	r24, Z
    34b8:	85 34       	cpi	r24, 0x45	; 69
    34ba:	09 f0       	breq	.+2      	; 0x34be <APP_Update+0x250>
    34bc:	37 c2       	rjmp	.+1134   	; 0x392c <APP_Update+0x6be>
    34be:	fe 01       	movw	r30, r28
    34c0:	ee 5b       	subi	r30, 0xBE	; 190
    34c2:	ff 4f       	sbci	r31, 0xFF	; 255
    34c4:	80 81       	ld	r24, Z
    34c6:	82 35       	cpi	r24, 0x52	; 82
    34c8:	09 f0       	breq	.+2      	; 0x34cc <APP_Update+0x25e>
    34ca:	30 c2       	rjmp	.+1120   	; 0x392c <APP_Update+0x6be>
				(au8Mode[2] == 'E') && (au8Mode[3] == 'R'))
		{
			u8Flag = LOW;
    34cc:	10 92 f0 07 	sts	0x07F0, r1
    34d0:	27 c2       	rjmp	.+1102   	; 0x3920 <APP_Update+0x6b2>
			while(u8Flag == LOW)
			{
				/* Clearing the LCD screen */
				LCD_Clear();
    34d2:	0e 94 84 12 	call	0x2508	; 0x2508 <LCD_Clear>
				/* Displaying "1- Insert a Card" on the LCD screen */
				LCD_DisplayString((uint8_t*)"1- Insert a Card");
    34d6:	83 e7       	ldi	r24, 0x73	; 115
    34d8:	91 e0       	ldi	r25, 0x01	; 1
    34da:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <LCD_DisplayString>
				/* Setting the position of the cursor at the second row of the LCD screen */
				LCD_SetCursorPosition(0, 1);
    34de:	80 e0       	ldi	r24, 0x00	; 0
    34e0:	61 e0       	ldi	r22, 0x01	; 1
    34e2:	0e 94 99 12 	call	0x2532	; 0x2532 <LCD_SetCursorPosition>
				/* Displaying "2- Display Temp" on the LCD screen */
				LCD_DisplayString((uint8_t*)"2- Display Temp");
    34e6:	84 e8       	ldi	r24, 0x84	; 132
    34e8:	91 e0       	ldi	r25, 0x01	; 1
    34ea:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <LCD_DisplayString>
				/* Getting the selected mode from the keypad */
				Keypad_GetChar(&u8KeypadChar);
    34ee:	ce 01       	movw	r24, r28
    34f0:	89 5a       	subi	r24, 0xA9	; 169
    34f2:	9f 4f       	sbci	r25, 0xFF	; 255
    34f4:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <Keypad_GetChar>
				/* Checking if the selected mode is to use the ATM */
				if(u8KeypadChar == '1')
    34f8:	fe 01       	movw	r30, r28
    34fa:	e9 5a       	subi	r30, 0xA9	; 169
    34fc:	ff 4f       	sbci	r31, 0xFF	; 255
    34fe:	80 81       	ld	r24, Z
    3500:	81 33       	cpi	r24, 0x31	; 49
    3502:	09 f0       	breq	.+2      	; 0x3506 <APP_Update+0x298>
    3504:	be c1       	rjmp	.+892    	; 0x3882 <APP_Update+0x614>
				{
					/* Clearing the LCD screen */
					LCD_Clear();
    3506:	0e 94 84 12 	call	0x2508	; 0x2508 <LCD_Clear>
					/* Displaying "Please Enter" on the LCD screen */
					LCD_DisplayString((uint8_t*)"  Please Enter");
    350a:	84 e9       	ldi	r24, 0x94	; 148
    350c:	91 e0       	ldi	r25, 0x01	; 1
    350e:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <LCD_DisplayString>
					/* Setting the position of the cursor at the second row of the LCD screen */
					LCD_SetCursorPosition(0, 1);
    3512:	80 e0       	ldi	r24, 0x00	; 0
    3514:	61 e0       	ldi	r22, 0x01	; 1
    3516:	0e 94 99 12 	call	0x2532	; 0x2532 <LCD_SetCursorPosition>
					/* Displaying "Your Card!" on the LCD screen */
					LCD_DisplayString((uint8_t*)"   Your Card!");
    351a:	83 ea       	ldi	r24, 0xA3	; 163
    351c:	91 e0       	ldi	r25, 0x01	; 1
    351e:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <LCD_DisplayString>
					/* Waiting for the card to be inserted by using the push button */
					do
					{
						/* Reading the current value of the button */
						Button_GetState(PB2, &enuButtonStates);
    3522:	9e 01       	movw	r18, r28
    3524:	23 5f       	subi	r18, 0xF3	; 243
    3526:	3f 4f       	sbci	r19, 0xFF	; 255
    3528:	8a e0       	ldi	r24, 0x0A	; 10
    352a:	b9 01       	movw	r22, r18
    352c:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <Button_GetState>
					} while(enuButtonStates == LOW);
    3530:	8d 85       	ldd	r24, Y+13	; 0x0d
    3532:	88 23       	and	r24, r24
    3534:	b1 f3       	breq	.-20     	; 0x3522 <APP_Update+0x2b4>
					/* Checking if the button is pressed (card has been inserted) */
					if(enuButtonStates == BUTTON_PRESSED)
    3536:	8d 85       	ldd	r24, Y+13	; 0x0d
    3538:	81 30       	cpi	r24, 0x01	; 1
    353a:	09 f0       	breq	.+2      	; 0x353e <APP_Update+0x2d0>
    353c:	f1 c1       	rjmp	.+994    	; 0x3920 <APP_Update+0x6b2>
					{
						/* Clearing the SS pin to start reception */
						DIO_PinWrite(PB4, LOW);
    353e:	8c e0       	ldi	r24, 0x0C	; 12
    3540:	60 e0       	ldi	r22, 0x00	; 0
    3542:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <DIO_PinWrite>
						/* Reading from the CARD slave the card data */
						SPI_receiveString(au8CardData, 15);
    3546:	ce 01       	movw	r24, r28
    3548:	0e 96       	adiw	r24, 0x0e	; 14
    354a:	6f e0       	ldi	r22, 0x0F	; 15
    354c:	0e 94 1d 0b 	call	0x163a	; 0x163a <SPI_receiveString>
						/* Clearing the SS pin to stop reception */
						DIO_PinWrite(PB4, HIGH);
    3550:	8c e0       	ldi	r24, 0x0C	; 12
    3552:	61 e0       	ldi	r22, 0x01	; 1
    3554:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <DIO_PinWrite>

						/* Reading the stored PAN from EEPROM */
						EEPROM_ReadString(APP_EEPROM_PAN_ADDRESS, 9, au8PAN);
    3558:	9e 01       	movw	r18, r28
    355a:	22 5e       	subi	r18, 0xE2	; 226
    355c:	3f 4f       	sbci	r19, 0xFF	; 255
    355e:	84 e1       	ldi	r24, 0x14	; 20
    3560:	90 e0       	ldi	r25, 0x00	; 0
    3562:	69 e0       	ldi	r22, 0x09	; 9
    3564:	70 e0       	ldi	r23, 0x00	; 0
    3566:	a9 01       	movw	r20, r18
    3568:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <EEPROM_ReadString>
						/* Checking if the PAN of the card is similar to the stored PAN in EEPROM */
						if((au8CardData[0] == au8PAN[0]) && (au8CardData[1] == au8PAN[1]) && (au8CardData[2] == au8PAN[2]) &&
    356c:	9e 85       	ldd	r25, Y+14	; 0x0e
    356e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3570:	98 17       	cp	r25, r24
    3572:	09 f0       	breq	.+2      	; 0x3576 <APP_Update+0x308>
    3574:	73 c1       	rjmp	.+742    	; 0x385c <APP_Update+0x5ee>
    3576:	9f 85       	ldd	r25, Y+15	; 0x0f
    3578:	8f 8d       	ldd	r24, Y+31	; 0x1f
    357a:	98 17       	cp	r25, r24
    357c:	09 f0       	breq	.+2      	; 0x3580 <APP_Update+0x312>
    357e:	6e c1       	rjmp	.+732    	; 0x385c <APP_Update+0x5ee>
    3580:	98 89       	ldd	r25, Y+16	; 0x10
    3582:	88 a1       	ldd	r24, Y+32	; 0x20
    3584:	98 17       	cp	r25, r24
    3586:	09 f0       	breq	.+2      	; 0x358a <APP_Update+0x31c>
    3588:	69 c1       	rjmp	.+722    	; 0x385c <APP_Update+0x5ee>
    358a:	99 89       	ldd	r25, Y+17	; 0x11
    358c:	89 a1       	ldd	r24, Y+33	; 0x21
    358e:	98 17       	cp	r25, r24
    3590:	09 f0       	breq	.+2      	; 0x3594 <APP_Update+0x326>
    3592:	64 c1       	rjmp	.+712    	; 0x385c <APP_Update+0x5ee>
    3594:	9a 89       	ldd	r25, Y+18	; 0x12
    3596:	8a a1       	ldd	r24, Y+34	; 0x22
    3598:	98 17       	cp	r25, r24
    359a:	09 f0       	breq	.+2      	; 0x359e <APP_Update+0x330>
    359c:	5f c1       	rjmp	.+702    	; 0x385c <APP_Update+0x5ee>
    359e:	9b 89       	ldd	r25, Y+19	; 0x13
    35a0:	8b a1       	ldd	r24, Y+35	; 0x23
    35a2:	98 17       	cp	r25, r24
    35a4:	09 f0       	breq	.+2      	; 0x35a8 <APP_Update+0x33a>
    35a6:	5a c1       	rjmp	.+692    	; 0x385c <APP_Update+0x5ee>
    35a8:	9c 89       	ldd	r25, Y+20	; 0x14
    35aa:	8c a1       	ldd	r24, Y+36	; 0x24
    35ac:	98 17       	cp	r25, r24
    35ae:	09 f0       	breq	.+2      	; 0x35b2 <APP_Update+0x344>
    35b0:	55 c1       	rjmp	.+682    	; 0x385c <APP_Update+0x5ee>
    35b2:	9d 89       	ldd	r25, Y+21	; 0x15
    35b4:	8d a1       	ldd	r24, Y+37	; 0x25
    35b6:	98 17       	cp	r25, r24
    35b8:	09 f0       	breq	.+2      	; 0x35bc <APP_Update+0x34e>
    35ba:	50 c1       	rjmp	.+672    	; 0x385c <APP_Update+0x5ee>
    35bc:	9e 89       	ldd	r25, Y+22	; 0x16
    35be:	8e a1       	ldd	r24, Y+38	; 0x26
    35c0:	98 17       	cp	r25, r24
    35c2:	09 f0       	breq	.+2      	; 0x35c6 <APP_Update+0x358>
    35c4:	4b c1       	rjmp	.+662    	; 0x385c <APP_Update+0x5ee>
						   (au8CardData[3] == au8PAN[3]) && (au8CardData[4] == au8PAN[4]) && (au8CardData[5] == au8PAN[5]) &&
						   (au8CardData[6] == au8PAN[6]) && (au8CardData[7] == au8PAN[7]) && (au8CardData[8] == au8PAN[8]))
						{
							/* Clearing the LCD screen */
							LCD_Clear();
    35c6:	0e 94 84 12 	call	0x2508	; 0x2508 <LCD_Clear>
							/* Displaying "Enter PIN:" on the LCD screen */
							LCD_DisplayString((uint8_t*)"Enter PIN:");
    35ca:	81 eb       	ldi	r24, 0xB1	; 177
    35cc:	91 e0       	ldi	r25, 0x01	; 1
    35ce:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <LCD_DisplayString>
							/* Setting the position of the cursor at the second row of the LCD screen */
							LCD_SetCursorPosition(0, 1);
    35d2:	80 e0       	ldi	r24, 0x00	; 0
    35d4:	61 e0       	ldi	r22, 0x01	; 1
    35d6:	0e 94 99 12 	call	0x2532	; 0x2532 <LCD_SetCursorPosition>
							/* Getting the first PIN value from the keypad */
							Keypad_GetChar(&au8KeypadPIN[0]);
    35da:	ce 01       	movw	r24, r28
    35dc:	8f 5a       	subi	r24, 0xAF	; 175
    35de:	9f 4f       	sbci	r25, 0xFF	; 255
    35e0:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <Keypad_GetChar>
							/* Displaying '*' on the LCD screen */
							LCD_DisplayChar('*');
    35e4:	8a e2       	ldi	r24, 0x2A	; 42
    35e6:	0e 94 c5 12 	call	0x258a	; 0x258a <LCD_DisplayChar>
							/* Getting the second PIN value from the keypad */
							Keypad_GetChar(&au8KeypadPIN[1]);
    35ea:	ce 01       	movw	r24, r28
    35ec:	8f 5a       	subi	r24, 0xAF	; 175
    35ee:	9f 4f       	sbci	r25, 0xFF	; 255
    35f0:	01 96       	adiw	r24, 0x01	; 1
    35f2:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <Keypad_GetChar>
							/* Displaying '*' on the LCD screen */
							LCD_DisplayChar('*');
    35f6:	8a e2       	ldi	r24, 0x2A	; 42
    35f8:	0e 94 c5 12 	call	0x258a	; 0x258a <LCD_DisplayChar>
							/* Getting the third PIN value from the keypad */
							Keypad_GetChar(&au8KeypadPIN[2]);
    35fc:	ce 01       	movw	r24, r28
    35fe:	8f 5a       	subi	r24, 0xAF	; 175
    3600:	9f 4f       	sbci	r25, 0xFF	; 255
    3602:	02 96       	adiw	r24, 0x02	; 2
    3604:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <Keypad_GetChar>
							/* Displaying '*' on the LCD screen */
							LCD_DisplayChar('*');
    3608:	8a e2       	ldi	r24, 0x2A	; 42
    360a:	0e 94 c5 12 	call	0x258a	; 0x258a <LCD_DisplayChar>
							/* Getting the forth PIN value from the keypad */
							Keypad_GetChar(&au8KeypadPIN[3]);
    360e:	ce 01       	movw	r24, r28
    3610:	8f 5a       	subi	r24, 0xAF	; 175
    3612:	9f 4f       	sbci	r25, 0xFF	; 255
    3614:	03 96       	adiw	r24, 0x03	; 3
    3616:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <Keypad_GetChar>
							/* Displaying '*' on the LCD screen */
							LCD_DisplayChar('*');
    361a:	8a e2       	ldi	r24, 0x2A	; 42
    361c:	0e 94 c5 12 	call	0x258a	; 0x258a <LCD_DisplayChar>
							/* Checking if the PIN of the card is similar to the entered PIN from the keypad */
							if((au8CardData[10] == au8KeypadPIN[0]) && (au8CardData[11] == au8KeypadPIN[1]) &&
    3620:	98 8d       	ldd	r25, Y+24	; 0x18
    3622:	fe 01       	movw	r30, r28
    3624:	ef 5a       	subi	r30, 0xAF	; 175
    3626:	ff 4f       	sbci	r31, 0xFF	; 255
    3628:	80 81       	ld	r24, Z
    362a:	98 17       	cp	r25, r24
    362c:	09 f0       	breq	.+2      	; 0x3630 <APP_Update+0x3c2>
    362e:	03 c1       	rjmp	.+518    	; 0x3836 <APP_Update+0x5c8>
    3630:	89 8d       	ldd	r24, Y+25	; 0x19
    3632:	fe 01       	movw	r30, r28
    3634:	ef 5a       	subi	r30, 0xAF	; 175
    3636:	ff 4f       	sbci	r31, 0xFF	; 255
    3638:	91 81       	ldd	r25, Z+1	; 0x01
    363a:	89 17       	cp	r24, r25
    363c:	09 f0       	breq	.+2      	; 0x3640 <APP_Update+0x3d2>
    363e:	fb c0       	rjmp	.+502    	; 0x3836 <APP_Update+0x5c8>
    3640:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3642:	fe 01       	movw	r30, r28
    3644:	ef 5a       	subi	r30, 0xAF	; 175
    3646:	ff 4f       	sbci	r31, 0xFF	; 255
    3648:	92 81       	ldd	r25, Z+2	; 0x02
    364a:	89 17       	cp	r24, r25
    364c:	09 f0       	breq	.+2      	; 0x3650 <APP_Update+0x3e2>
    364e:	f3 c0       	rjmp	.+486    	; 0x3836 <APP_Update+0x5c8>
    3650:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3652:	fe 01       	movw	r30, r28
    3654:	ef 5a       	subi	r30, 0xAF	; 175
    3656:	ff 4f       	sbci	r31, 0xFF	; 255
    3658:	93 81       	ldd	r25, Z+3	; 0x03
    365a:	89 17       	cp	r24, r25
    365c:	09 f0       	breq	.+2      	; 0x3660 <APP_Update+0x3f2>
    365e:	eb c0       	rjmp	.+470    	; 0x3836 <APP_Update+0x5c8>
							   (au8CardData[12] == au8KeypadPIN[2]) && (au8CardData[13] == au8KeypadPIN[3]))
							{
								/* Clearing the LCD screen */
								LCD_Clear();
    3660:	0e 94 84 12 	call	0x2508	; 0x2508 <LCD_Clear>
								/* Displaying "Enter amount:" on the LCD screen */
								LCD_DisplayString((uint8_t*)"Enter amount:");
    3664:	8c eb       	ldi	r24, 0xBC	; 188
    3666:	91 e0       	ldi	r25, 0x01	; 1
    3668:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <LCD_DisplayString>
								/* Setting the position of the cursor at the second row of the LCD screen */
								LCD_SetCursorPosition(0, 1);
    366c:	80 e0       	ldi	r24, 0x00	; 0
    366e:	61 e0       	ldi	r22, 0x01	; 1
    3670:	0e 94 99 12 	call	0x2532	; 0x2532 <LCD_SetCursorPosition>
								/* Getting the thousands amount value from the keypad */
								Keypad_GetChar(&au8KeypadAmount[0]);
    3674:	ce 01       	movw	r24, r28
    3676:	c8 96       	adiw	r24, 0x38	; 56
    3678:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <Keypad_GetChar>
								/* Displaying the thousands amount value on the LCD screen */
								LCD_DisplayChar(au8KeypadAmount[0]);
    367c:	88 ad       	ldd	r24, Y+56	; 0x38
    367e:	0e 94 c5 12 	call	0x258a	; 0x258a <LCD_DisplayChar>
								/* Getting the hundreds amount value from the keypad */
								Keypad_GetChar(&au8KeypadAmount[1]);
    3682:	ce 01       	movw	r24, r28
    3684:	c8 96       	adiw	r24, 0x38	; 56
    3686:	01 96       	adiw	r24, 0x01	; 1
    3688:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <Keypad_GetChar>
								/* Displaying the hundreds amount value on the LCD screen */
								LCD_DisplayChar(au8KeypadAmount[1]);
    368c:	89 ad       	ldd	r24, Y+57	; 0x39
    368e:	0e 94 c5 12 	call	0x258a	; 0x258a <LCD_DisplayChar>
								/* Getting the tens amount value from the keypad */
								Keypad_GetChar(&au8KeypadAmount[2]);
    3692:	ce 01       	movw	r24, r28
    3694:	c8 96       	adiw	r24, 0x38	; 56
    3696:	02 96       	adiw	r24, 0x02	; 2
    3698:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <Keypad_GetChar>
								/* Displaying the tens amount value on the LCD screen */
								LCD_DisplayChar(au8KeypadAmount[2]);
    369c:	8a ad       	ldd	r24, Y+58	; 0x3a
    369e:	0e 94 c5 12 	call	0x258a	; 0x258a <LCD_DisplayChar>
								/* Getting the units amount value from the keypad */
								Keypad_GetChar(&au8KeypadAmount[3]);
    36a2:	ce 01       	movw	r24, r28
    36a4:	c8 96       	adiw	r24, 0x38	; 56
    36a6:	03 96       	adiw	r24, 0x03	; 3
    36a8:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <Keypad_GetChar>
								/* Displaying the units amount value on the LCD screen */
								LCD_DisplayChar(au8KeypadAmount[3]);
    36ac:	8b ad       	ldd	r24, Y+59	; 0x3b
    36ae:	0e 94 c5 12 	call	0x258a	; 0x258a <LCD_DisplayChar>
								/* Displaying the decimal point of amount value on the LCD screen */
								au8KeypadAmount[4]='.';
    36b2:	8e e2       	ldi	r24, 0x2E	; 46
    36b4:	8c af       	std	Y+60, r24	; 0x3c
								/* Displaying the decimal point on the LCD screen */
								LCD_DisplayChar(au8KeypadAmount[4]);
    36b6:	8c ad       	ldd	r24, Y+60	; 0x3c
    36b8:	0e 94 c5 12 	call	0x258a	; 0x258a <LCD_DisplayChar>
								/* Getting the tenths amount value from the keypad */
								Keypad_GetChar(&au8KeypadAmount[5]);
    36bc:	ce 01       	movw	r24, r28
    36be:	c8 96       	adiw	r24, 0x38	; 56
    36c0:	05 96       	adiw	r24, 0x05	; 5
    36c2:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <Keypad_GetChar>
								/* Displaying the tenths amount value on the LCD screen */
								LCD_DisplayChar(au8KeypadAmount[5]);
    36c6:	8d ad       	ldd	r24, Y+61	; 0x3d
    36c8:	0e 94 c5 12 	call	0x258a	; 0x258a <LCD_DisplayChar>
								/* Getting the hundredths amount value from the keypad */
								Keypad_GetChar(&au8KeypadAmount[6]);
    36cc:	ce 01       	movw	r24, r28
    36ce:	c8 96       	adiw	r24, 0x38	; 56
    36d0:	06 96       	adiw	r24, 0x06	; 6
    36d2:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <Keypad_GetChar>
								/* Displaying the hundredths amount value on the LCD screen */
								LCD_DisplayChar(au8KeypadAmount[6]);
    36d6:	8e ad       	ldd	r24, Y+62	; 0x3e
    36d8:	0e 94 c5 12 	call	0x258a	; 0x258a <LCD_DisplayChar>
								/* Converting the entered amount value from ASCII characters to double */
								dKeypadAmount = atof((char*)au8KeypadAmount);
    36dc:	ce 01       	movw	r24, r28
    36de:	c8 96       	adiw	r24, 0x38	; 56
    36e0:	0e 94 c3 1e 	call	0x3d86	; 0x3d86 <atof>
    36e4:	dc 01       	movw	r26, r24
    36e6:	cb 01       	movw	r24, r22
    36e8:	89 87       	std	Y+9, r24	; 0x09
    36ea:	9a 87       	std	Y+10, r25	; 0x0a
    36ec:	ab 87       	std	Y+11, r26	; 0x0b
    36ee:	bc 87       	std	Y+12, r27	; 0x0c
								/* Reading the stored maximum amount value from EEPROM */
								EEPROM_ReadString(APP_EEPROM_MAX_AMOUNT_ADDRESS, 7, au8MaxAmount);
    36f0:	9e 01       	movw	r18, r28
    36f2:	20 5d       	subi	r18, 0xD0	; 208
    36f4:	3f 4f       	sbci	r19, 0xFF	; 255
    36f6:	8c e3       	ldi	r24, 0x3C	; 60
    36f8:	90 e0       	ldi	r25, 0x00	; 0
    36fa:	67 e0       	ldi	r22, 0x07	; 7
    36fc:	70 e0       	ldi	r23, 0x00	; 0
    36fe:	a9 01       	movw	r20, r18
    3700:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <EEPROM_ReadString>
								/* Converting the stored maximum amount value from ASCII characters to double */
								dMaxAmount = atof((char*)au8MaxAmount);
    3704:	ce 01       	movw	r24, r28
    3706:	c0 96       	adiw	r24, 0x30	; 48
    3708:	0e 94 c3 1e 	call	0x3d86	; 0x3d86 <atof>
    370c:	dc 01       	movw	r26, r24
    370e:	cb 01       	movw	r24, r22
    3710:	8d 83       	std	Y+5, r24	; 0x05
    3712:	9e 83       	std	Y+6, r25	; 0x06
    3714:	af 83       	std	Y+7, r26	; 0x07
    3716:	b8 87       	std	Y+8, r27	; 0x08
								/* Reading the stored balance value from EEPROM */
								EEPROM_ReadString(APP_EEPROM_BALANCE_ADDRESS, 9, au8Balance);
    3718:	9e 01       	movw	r18, r28
    371a:	28 5d       	subi	r18, 0xD8	; 216
    371c:	3f 4f       	sbci	r19, 0xFF	; 255
    371e:	88 e2       	ldi	r24, 0x28	; 40
    3720:	90 e0       	ldi	r25, 0x00	; 0
    3722:	69 e0       	ldi	r22, 0x09	; 9
    3724:	70 e0       	ldi	r23, 0x00	; 0
    3726:	a9 01       	movw	r20, r18
    3728:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <EEPROM_ReadString>
								/* Converting the stored balance value from ASCII characters to double */
								dBalance = atof((char*)au8Balance);
    372c:	ce 01       	movw	r24, r28
    372e:	88 96       	adiw	r24, 0x28	; 40
    3730:	0e 94 c3 1e 	call	0x3d86	; 0x3d86 <atof>
    3734:	dc 01       	movw	r26, r24
    3736:	cb 01       	movw	r24, r22
    3738:	89 83       	std	Y+1, r24	; 0x01
    373a:	9a 83       	std	Y+2, r25	; 0x02
    373c:	ab 83       	std	Y+3, r26	; 0x03
    373e:	bc 83       	std	Y+4, r27	; 0x04
								/* Clearing the LCD screen */
								LCD_Clear();
    3740:	0e 94 84 12 	call	0x2508	; 0x2508 <LCD_Clear>
								/* Checking if the entered amount is greater than the stored maximum amount */
								if(dKeypadAmount > dMaxAmount)
    3744:	69 85       	ldd	r22, Y+9	; 0x09
    3746:	7a 85       	ldd	r23, Y+10	; 0x0a
    3748:	8b 85       	ldd	r24, Y+11	; 0x0b
    374a:	9c 85       	ldd	r25, Y+12	; 0x0c
    374c:	2d 81       	ldd	r18, Y+5	; 0x05
    374e:	3e 81       	ldd	r19, Y+6	; 0x06
    3750:	4f 81       	ldd	r20, Y+7	; 0x07
    3752:	58 85       	ldd	r21, Y+8	; 0x08
    3754:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__gtsf2>
    3758:	18 16       	cp	r1, r24
    375a:	8c f4       	brge	.+34     	; 0x377e <APP_Update+0x510>
								{
									/* Displaying "Maximum Amount" on the LCD screen */
									LCD_DisplayString((uint8_t*)" Maximum Amount");
    375c:	8a ec       	ldi	r24, 0xCA	; 202
    375e:	91 e0       	ldi	r25, 0x01	; 1
    3760:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <LCD_DisplayString>
									/* Setting the position of the cursor at the second row of the LCD screen */
									LCD_SetCursorPosition(0, 1);
    3764:	80 e0       	ldi	r24, 0x00	; 0
    3766:	61 e0       	ldi	r22, 0x01	; 1
    3768:	0e 94 99 12 	call	0x2532	; 0x2532 <LCD_SetCursorPosition>
									/* Displaying "Exceeded" on the LCD screen */
									LCD_DisplayString((uint8_t*)"    Exceeded");
    376c:	8a ed       	ldi	r24, 0xDA	; 218
    376e:	91 e0       	ldi	r25, 0x01	; 1
    3770:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <LCD_DisplayString>
									/* Giving a sufficient time delay to show the message on the LCD screen */
									APP_Delay();
    3774:	0e 94 a8 1c 	call	0x3950	; 0x3950 <APP_Delay>
									u8Flag = LOW;
    3778:	10 92 f0 07 	sts	0x07F0, r1
    377c:	d1 c0       	rjmp	.+418    	; 0x3920 <APP_Update+0x6b2>
								}
								/* Checking if the entered amount is greater than the stored balance */
								else if(dKeypadAmount > dBalance)
    377e:	69 85       	ldd	r22, Y+9	; 0x09
    3780:	7a 85       	ldd	r23, Y+10	; 0x0a
    3782:	8b 85       	ldd	r24, Y+11	; 0x0b
    3784:	9c 85       	ldd	r25, Y+12	; 0x0c
    3786:	29 81       	ldd	r18, Y+1	; 0x01
    3788:	3a 81       	ldd	r19, Y+2	; 0x02
    378a:	4b 81       	ldd	r20, Y+3	; 0x03
    378c:	5c 81       	ldd	r21, Y+4	; 0x04
    378e:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__gtsf2>
    3792:	18 16       	cp	r1, r24
    3794:	8c f4       	brge	.+34     	; 0x37b8 <APP_Update+0x54a>
								{
									/* Displaying "Insufficient" on the LCD screen */
									LCD_DisplayString((uint8_t*)"  Insufficient");
    3796:	87 ee       	ldi	r24, 0xE7	; 231
    3798:	91 e0       	ldi	r25, 0x01	; 1
    379a:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <LCD_DisplayString>
									/* Setting the position of the cursor at the second row of the LCD screen */
									LCD_SetCursorPosition(0, 1);
    379e:	80 e0       	ldi	r24, 0x00	; 0
    37a0:	61 e0       	ldi	r22, 0x01	; 1
    37a2:	0e 94 99 12 	call	0x2532	; 0x2532 <LCD_SetCursorPosition>
									/* Displaying "Fund" on the LCD screen */
									LCD_DisplayString((uint8_t*)"      Fund");
    37a6:	86 ef       	ldi	r24, 0xF6	; 246
    37a8:	91 e0       	ldi	r25, 0x01	; 1
    37aa:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <LCD_DisplayString>
									/* Giving a sufficient time delay to show the message on the LCD screen */
									APP_Delay();
    37ae:	0e 94 a8 1c 	call	0x3950	; 0x3950 <APP_Delay>
									u8Flag = LOW;
    37b2:	10 92 f0 07 	sts	0x07F0, r1
    37b6:	b4 c0       	rjmp	.+360    	; 0x3920 <APP_Update+0x6b2>
								}
								else
								{
									/* Displaying "Transaction" on the LCD screen */
									LCD_DisplayString((uint8_t*)"  Transaction");
    37b8:	81 e0       	ldi	r24, 0x01	; 1
    37ba:	92 e0       	ldi	r25, 0x02	; 2
    37bc:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <LCD_DisplayString>
									/* Setting the position of the cursor at the second row of the LCD screen */
									LCD_SetCursorPosition(0, 1);
    37c0:	80 e0       	ldi	r24, 0x00	; 0
    37c2:	61 e0       	ldi	r22, 0x01	; 1
    37c4:	0e 94 99 12 	call	0x2532	; 0x2532 <LCD_SetCursorPosition>
									/* Displaying "APPROVED" on the LCD screen */
									LCD_DisplayString((uint8_t*)"    Approved");
    37c8:	8f e0       	ldi	r24, 0x0F	; 15
    37ca:	92 e0       	ldi	r25, 0x02	; 2
    37cc:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <LCD_DisplayString>
									/* Subtracting the withdrawn money after the transaction has successfully completed */
									dBalance -= dKeypadAmount;
    37d0:	69 81       	ldd	r22, Y+1	; 0x01
    37d2:	7a 81       	ldd	r23, Y+2	; 0x02
    37d4:	8b 81       	ldd	r24, Y+3	; 0x03
    37d6:	9c 81       	ldd	r25, Y+4	; 0x04
    37d8:	29 85       	ldd	r18, Y+9	; 0x09
    37da:	3a 85       	ldd	r19, Y+10	; 0x0a
    37dc:	4b 85       	ldd	r20, Y+11	; 0x0b
    37de:	5c 85       	ldd	r21, Y+12	; 0x0c
    37e0:	0e 94 df 01 	call	0x3be	; 0x3be <__subsf3>
    37e4:	dc 01       	movw	r26, r24
    37e6:	cb 01       	movw	r24, r22
    37e8:	89 83       	std	Y+1, r24	; 0x01
    37ea:	9a 83       	std	Y+2, r25	; 0x02
    37ec:	ab 83       	std	Y+3, r26	; 0x03
    37ee:	bc 83       	std	Y+4, r27	; 0x04
									/* Converting the balance from double to ASCII characters */
									//ftoa(dBalance, (char*)au8Balance, 2);
									//au8Balance = gcvt(dBalance, 6, (char*)au8Balance);
									doubletostr(dBalance, (char*)au8Balance, 2);
    37f0:	89 81       	ldd	r24, Y+1	; 0x01
    37f2:	9a 81       	ldd	r25, Y+2	; 0x02
    37f4:	ab 81       	ldd	r26, Y+3	; 0x03
    37f6:	bc 81       	ldd	r27, Y+4	; 0x04
    37f8:	9e 01       	movw	r18, r28
    37fa:	28 5d       	subi	r18, 0xD8	; 216
    37fc:	3f 4f       	sbci	r19, 0xFF	; 255
    37fe:	bc 01       	movw	r22, r24
    3800:	cd 01       	movw	r24, r26
    3802:	a9 01       	movw	r20, r18
    3804:	22 e0       	ldi	r18, 0x02	; 2
    3806:	30 e0       	ldi	r19, 0x00	; 0
    3808:	0e 94 d1 1c 	call	0x39a2	; 0x39a2 <doubletostr>
									/* Writing the balance inside the EEPROM */
									EEPROM_WriteString(APP_EEPROM_BALANCE_ADDRESS, 9, au8Balance);
    380c:	9e 01       	movw	r18, r28
    380e:	28 5d       	subi	r18, 0xD8	; 216
    3810:	3f 4f       	sbci	r19, 0xFF	; 255
    3812:	88 e2       	ldi	r24, 0x28	; 40
    3814:	90 e0       	ldi	r25, 0x00	; 0
    3816:	69 e0       	ldi	r22, 0x09	; 9
    3818:	70 e0       	ldi	r23, 0x00	; 0
    381a:	a9 01       	movw	r20, r18
    381c:	0e 94 7c 16 	call	0x2cf8	; 0x2cf8 <EEPROM_WriteString>
									/* Starting the DC fan to run */
									DCFan_Start(PB1);
    3820:	89 e0       	ldi	r24, 0x09	; 9
    3822:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <DCFan_Start>
									/* Giving a sufficient time delay to make the DC fan run */
									APP_Delay();
    3826:	0e 94 a8 1c 	call	0x3950	; 0x3950 <APP_Delay>
									/* Stopping the DC Fan */
									DCFan_Stop(PB1);
    382a:	89 e0       	ldi	r24, 0x09	; 9
    382c:	0e 94 7d 17 	call	0x2efa	; 0x2efa <DCFan_Stop>
									u8Flag = LOW;
    3830:	10 92 f0 07 	sts	0x07F0, r1
    3834:	75 c0       	rjmp	.+234    	; 0x3920 <APP_Update+0x6b2>
								}
							}
							else
							{
								/* Clearing the LCD screen */
								LCD_Clear();
    3836:	0e 94 84 12 	call	0x2508	; 0x2508 <LCD_Clear>
								/* Displaying "Incorrect PIN" on the LCD screen */
								LCD_DisplayString((uint8_t*)" Incorrect PIN");
    383a:	8c e1       	ldi	r24, 0x1C	; 28
    383c:	92 e0       	ldi	r25, 0x02	; 2
    383e:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <LCD_DisplayString>
								/* Setting the position of the cursor at the second row of the LCD screen */
								LCD_SetCursorPosition(0, 1);
    3842:	80 e0       	ldi	r24, 0x00	; 0
    3844:	61 e0       	ldi	r22, 0x01	; 1
    3846:	0e 94 99 12 	call	0x2532	; 0x2532 <LCD_SetCursorPosition>
								/* Displaying "Card is ejected" on the LCD screen */
								LCD_DisplayString((uint8_t*)"Card is ejected");
    384a:	8b e2       	ldi	r24, 0x2B	; 43
    384c:	92 e0       	ldi	r25, 0x02	; 2
    384e:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <LCD_DisplayString>
								/* Giving a sufficient time delay to show the message on the LCD screen */
								APP_Delay();
    3852:	0e 94 a8 1c 	call	0x3950	; 0x3950 <APP_Delay>
								u8Flag = LOW;
    3856:	10 92 f0 07 	sts	0x07F0, r1
    385a:	62 c0       	rjmp	.+196    	; 0x3920 <APP_Update+0x6b2>
							}
						}
						else
						{
							/* Clearing the LCD screen */
							LCD_Clear();
    385c:	0e 94 84 12 	call	0x2508	; 0x2508 <LCD_Clear>
							/* Displaying "Invalid Card" on the LCD screen */
							LCD_DisplayString((uint8_t*)"  Invalid Card");
    3860:	8b e3       	ldi	r24, 0x3B	; 59
    3862:	92 e0       	ldi	r25, 0x02	; 2
    3864:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <LCD_DisplayString>
							/* Setting the position of the cursor at the second row of the LCD screen */
							LCD_SetCursorPosition(0, 1);
    3868:	80 e0       	ldi	r24, 0x00	; 0
    386a:	61 e0       	ldi	r22, 0x01	; 1
    386c:	0e 94 99 12 	call	0x2532	; 0x2532 <LCD_SetCursorPosition>
							/* Displaying "Card is ejected" on the LCD screen */
							LCD_DisplayString((uint8_t*)"Card is ejected");
    3870:	8b e2       	ldi	r24, 0x2B	; 43
    3872:	92 e0       	ldi	r25, 0x02	; 2
    3874:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <LCD_DisplayString>
							/* Giving a sufficient time delay to show the message on the LCD screen */
							APP_Delay();
    3878:	0e 94 a8 1c 	call	0x3950	; 0x3950 <APP_Delay>
							u8Flag = LOW;
    387c:	10 92 f0 07 	sts	0x07F0, r1
    3880:	4f c0       	rjmp	.+158    	; 0x3920 <APP_Update+0x6b2>
					{
						/* No card is inserted */
					}
				}
				/* Checking if the selected mode is to display the temperature */
				else if(u8KeypadChar == '2')
    3882:	fe 01       	movw	r30, r28
    3884:	e9 5a       	subi	r30, 0xA9	; 169
    3886:	ff 4f       	sbci	r31, 0xFF	; 255
    3888:	80 81       	ld	r24, Z
    388a:	82 33       	cpi	r24, 0x32	; 50
    388c:	09 f0       	breq	.+2      	; 0x3890 <APP_Update+0x622>
    388e:	46 c0       	rjmp	.+140    	; 0x391c <APP_Update+0x6ae>
				{
					/* Reading the current temperature of the LM35 sensor */
					LM35_ReadTemperature(&u8Temperature);
    3890:	ce 01       	movw	r24, r28
    3892:	88 5a       	subi	r24, 0xA8	; 168
    3894:	9f 4f       	sbci	r25, 0xFF	; 255
    3896:	0e 94 c2 11 	call	0x2384	; 0x2384 <LM35_ReadTemperature>
					/* Clearing the LCD screen */
					LCD_Clear();
    389a:	0e 94 84 12 	call	0x2508	; 0x2508 <LCD_Clear>
					/* Displaying "Current Temp: " on the LCD screen */
					LCD_DisplayString((uint8_t*)"Current Temp: ");
    389e:	8a e4       	ldi	r24, 0x4A	; 74
    38a0:	92 e0       	ldi	r25, 0x02	; 2
    38a2:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <LCD_DisplayString>
					/* Converting the temperature read from the LM35 sensor from integer to array of ASCII characters */
					itoa(u8Temperature, (char*)au8Temperature, 10);
    38a6:	fe 01       	movw	r30, r28
    38a8:	e8 5a       	subi	r30, 0xA8	; 168
    38aa:	ff 4f       	sbci	r31, 0xFF	; 255
    38ac:	80 81       	ld	r24, Z
    38ae:	88 2f       	mov	r24, r24
    38b0:	90 e0       	ldi	r25, 0x00	; 0
    38b2:	9e 01       	movw	r18, r28
    38b4:	2b 5a       	subi	r18, 0xAB	; 171
    38b6:	3f 4f       	sbci	r19, 0xFF	; 255
    38b8:	b9 01       	movw	r22, r18
    38ba:	4a e0       	ldi	r20, 0x0A	; 10
    38bc:	50 e0       	ldi	r21, 0x00	; 0
    38be:	0e 94 c7 1e 	call	0x3d8e	; 0x3d8e <itoa>
					/* Displaying the temperature read from the LM35 sensor on the LCD screen */
					LCD_DisplayString(au8Temperature);
    38c2:	ce 01       	movw	r24, r28
    38c4:	8b 5a       	subi	r24, 0xAB	; 171
    38c6:	9f 4f       	sbci	r25, 0xFF	; 255
    38c8:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <LCD_DisplayString>
					/* Checking if the temperature read from the LM35 sensor is greater than 50 */
					if(u8Temperature > 50)
    38cc:	fe 01       	movw	r30, r28
    38ce:	e8 5a       	subi	r30, 0xA8	; 168
    38d0:	ff 4f       	sbci	r31, 0xFF	; 255
    38d2:	80 81       	ld	r24, Z
    38d4:	83 33       	cpi	r24, 0x33	; 51
    38d6:	90 f0       	brcs	.+36     	; 0x38fc <APP_Update+0x68e>
					{
						/* Clearing the LCD screen */
						LCD_Clear();
    38d8:	0e 94 84 12 	call	0x2508	; 0x2508 <LCD_Clear>
						/* Displaying "System blocked!" on the LCD screen */
						LCD_DisplayString((uint8_t*)"System blocked!");
    38dc:	89 e5       	ldi	r24, 0x59	; 89
    38de:	92 e0       	ldi	r25, 0x02	; 2
    38e0:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <LCD_DisplayString>
						/* Setting the position of the cursor at the second row of the LCD screen */
						LCD_SetCursorPosition(0, 1);
    38e4:	80 e0       	ldi	r24, 0x00	; 0
    38e6:	61 e0       	ldi	r22, 0x01	; 1
    38e8:	0e 94 99 12 	call	0x2532	; 0x2532 <LCD_SetCursorPosition>
						/* Displaying "Temp is above 50" on the LCD screen */
						LCD_DisplayString((uint8_t*)"Temp is above 50");
    38ec:	89 e6       	ldi	r24, 0x69	; 105
    38ee:	92 e0       	ldi	r25, 0x02	; 2
    38f0:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <LCD_DisplayString>
						/* Setting the system block flag to one to block the whole system */
						u8Flag = HIGH;
    38f4:	81 e0       	ldi	r24, 0x01	; 1
    38f6:	80 93 f0 07 	sts	0x07F0, r24
    38fa:	12 c0       	rjmp	.+36     	; 0x3920 <APP_Update+0x6b2>
					}
					else
					{
						/* Setting the position of the cursor at the second row of the LCD screen */
						LCD_SetCursorPosition(0, 1);
    38fc:	80 e0       	ldi	r24, 0x00	; 0
    38fe:	61 e0       	ldi	r22, 0x01	; 1
    3900:	0e 94 99 12 	call	0x2532	; 0x2532 <LCD_SetCursorPosition>
						/* Displaying "Press any key" on the LCD screen */
						LCD_DisplayString((uint8_t*)"Press any key");
    3904:	8a e7       	ldi	r24, 0x7A	; 122
    3906:	92 e0       	ldi	r25, 0x02	; 2
    3908:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <LCD_DisplayString>
						/* Waiting for any key to be pressed from the keypad */
						Keypad_GetChar(&u8KeypadChar);
    390c:	ce 01       	movw	r24, r28
    390e:	89 5a       	subi	r24, 0xA9	; 169
    3910:	9f 4f       	sbci	r25, 0xFF	; 255
    3912:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <Keypad_GetChar>
						u8Flag = LOW;
    3916:	10 92 f0 07 	sts	0x07F0, r1
    391a:	02 c0       	rjmp	.+4      	; 0x3920 <APP_Update+0x6b2>
					}
				}
				else
				{
					/* Invalid keypad input, 1 or 2 must be inserted */
					u8Flag = LOW;
    391c:	10 92 f0 07 	sts	0x07F0, r1
		/* Checking if the received mode is USER mode */
		else if((au8Mode[0] == 'U') && (au8Mode[1] == 'S') &&
				(au8Mode[2] == 'E') && (au8Mode[3] == 'R'))
		{
			u8Flag = LOW;
			while(u8Flag == LOW)
    3920:	80 91 f0 07 	lds	r24, 0x07F0
    3924:	88 23       	and	r24, r24
    3926:	09 f4       	brne	.+2      	; 0x392a <APP_Update+0x6bc>
    3928:	d4 cd       	rjmp	.-1112   	; 0x34d2 <APP_Update+0x264>
    392a:	08 c0       	rjmp	.+16     	; 0x393c <APP_Update+0x6ce>
			}
		}
		else
		{
			/* Sending "Invalid mode is inserted" on the terminal by UART */
			UART_SendString((uint8_t*)"Invalid mode is inserted\r");
    392c:	88 e8       	ldi	r24, 0x88	; 136
    392e:	92 e0       	ldi	r25, 0x02	; 2
    3930:	0e 94 c9 08 	call	0x1192	; 0x1192 <UART_SendString>
			/* Sending new line on the terminal by UART */
			UART_SendData((uint8_t)'\r');
    3934:	8d e0       	ldi	r24, 0x0D	; 13
    3936:	90 e0       	ldi	r25, 0x00	; 0
    3938:	0e 94 39 08 	call	0x1072	; 0x1072 <UART_SendData>
	}
	else
	{
		/* System is blocked */
	}
}
    393c:	c8 5a       	subi	r28, 0xA8	; 168
    393e:	df 4f       	sbci	r29, 0xFF	; 255
    3940:	0f b6       	in	r0, 0x3f	; 63
    3942:	f8 94       	cli
    3944:	de bf       	out	0x3e, r29	; 62
    3946:	0f be       	out	0x3f, r0	; 63
    3948:	cd bf       	out	0x3d, r28	; 61
    394a:	cf 91       	pop	r28
    394c:	df 91       	pop	r29
    394e:	08 95       	ret

00003950 <APP_Delay>:


static void APP_Delay(void)
{
    3950:	df 93       	push	r29
    3952:	cf 93       	push	r28
    3954:	00 d0       	rcall	.+0      	; 0x3956 <APP_Delay+0x6>
    3956:	00 d0       	rcall	.+0      	; 0x3958 <APP_Delay+0x8>
    3958:	cd b7       	in	r28, 0x3d	; 61
    395a:	de b7       	in	r29, 0x3e	; 62
	volatile uint32_t u32DelayValue;
	for(u32DelayValue = 0; u32DelayValue < 250000; u32DelayValue++);
    395c:	19 82       	std	Y+1, r1	; 0x01
    395e:	1a 82       	std	Y+2, r1	; 0x02
    3960:	1b 82       	std	Y+3, r1	; 0x03
    3962:	1c 82       	std	Y+4, r1	; 0x04
    3964:	0b c0       	rjmp	.+22     	; 0x397c <APP_Delay+0x2c>
    3966:	89 81       	ldd	r24, Y+1	; 0x01
    3968:	9a 81       	ldd	r25, Y+2	; 0x02
    396a:	ab 81       	ldd	r26, Y+3	; 0x03
    396c:	bc 81       	ldd	r27, Y+4	; 0x04
    396e:	01 96       	adiw	r24, 0x01	; 1
    3970:	a1 1d       	adc	r26, r1
    3972:	b1 1d       	adc	r27, r1
    3974:	89 83       	std	Y+1, r24	; 0x01
    3976:	9a 83       	std	Y+2, r25	; 0x02
    3978:	ab 83       	std	Y+3, r26	; 0x03
    397a:	bc 83       	std	Y+4, r27	; 0x04
    397c:	89 81       	ldd	r24, Y+1	; 0x01
    397e:	9a 81       	ldd	r25, Y+2	; 0x02
    3980:	ab 81       	ldd	r26, Y+3	; 0x03
    3982:	bc 81       	ldd	r27, Y+4	; 0x04
    3984:	80 39       	cpi	r24, 0x90	; 144
    3986:	20 ed       	ldi	r18, 0xD0	; 208
    3988:	92 07       	cpc	r25, r18
    398a:	23 e0       	ldi	r18, 0x03	; 3
    398c:	a2 07       	cpc	r26, r18
    398e:	20 e0       	ldi	r18, 0x00	; 0
    3990:	b2 07       	cpc	r27, r18
    3992:	48 f3       	brcs	.-46     	; 0x3966 <APP_Delay+0x16>
}
    3994:	0f 90       	pop	r0
    3996:	0f 90       	pop	r0
    3998:	0f 90       	pop	r0
    399a:	0f 90       	pop	r0
    399c:	cf 91       	pop	r28
    399e:	df 91       	pop	r29
    39a0:	08 95       	ret

000039a2 <doubletostr>:

static void doubletostr (double num,char *str, int precision)
{
    39a2:	ef 92       	push	r14
    39a4:	ff 92       	push	r15
    39a6:	0f 93       	push	r16
    39a8:	1f 93       	push	r17
    39aa:	df 93       	push	r29
    39ac:	cf 93       	push	r28
    39ae:	cd b7       	in	r28, 0x3d	; 61
    39b0:	de b7       	in	r29, 0x3e	; 62
    39b2:	6a 97       	sbiw	r28, 0x1a	; 26
    39b4:	0f b6       	in	r0, 0x3f	; 63
    39b6:	f8 94       	cli
    39b8:	de bf       	out	0x3e, r29	; 62
    39ba:	0f be       	out	0x3f, r0	; 63
    39bc:	cd bf       	out	0x3d, r28	; 61
    39be:	6b 8b       	std	Y+19, r22	; 0x13
    39c0:	7c 8b       	std	Y+20, r23	; 0x14
    39c2:	8d 8b       	std	Y+21, r24	; 0x15
    39c4:	9e 8b       	std	Y+22, r25	; 0x16
    39c6:	58 8f       	std	Y+24, r21	; 0x18
    39c8:	4f 8b       	std	Y+23, r20	; 0x17
    39ca:	3a 8f       	std	Y+26, r19	; 0x1a
    39cc:	29 8f       	std	Y+25, r18	; 0x19
    int int_exponent=1,frac_exponent=1;
    39ce:	81 e0       	ldi	r24, 0x01	; 1
    39d0:	90 e0       	ldi	r25, 0x00	; 0
    39d2:	9a 8b       	std	Y+18, r25	; 0x12
    39d4:	89 8b       	std	Y+17, r24	; 0x11
    39d6:	81 e0       	ldi	r24, 0x01	; 1
    39d8:	90 e0       	ldi	r25, 0x00	; 0
    39da:	98 8b       	std	Y+16, r25	; 0x10
    39dc:	8f 87       	std	Y+15, r24	; 0x0f

    for (int temp=num/10;temp;temp/=10)
    39de:	6b 89       	ldd	r22, Y+19	; 0x13
    39e0:	7c 89       	ldd	r23, Y+20	; 0x14
    39e2:	8d 89       	ldd	r24, Y+21	; 0x15
    39e4:	9e 89       	ldd	r25, Y+22	; 0x16
    39e6:	20 e0       	ldi	r18, 0x00	; 0
    39e8:	30 e0       	ldi	r19, 0x00	; 0
    39ea:	40 e2       	ldi	r20, 0x20	; 32
    39ec:	51 e4       	ldi	r21, 0x41	; 65
    39ee:	0e 94 37 03 	call	0x66e	; 0x66e <__divsf3>
    39f2:	dc 01       	movw	r26, r24
    39f4:	cb 01       	movw	r24, r22
    39f6:	bc 01       	movw	r22, r24
    39f8:	cd 01       	movw	r24, r26
    39fa:	0e 94 a1 04 	call	0x942	; 0x942 <__fixsfsi>
    39fe:	dc 01       	movw	r26, r24
    3a00:	cb 01       	movw	r24, r22
    3a02:	9c 83       	std	Y+4, r25	; 0x04
    3a04:	8b 83       	std	Y+3, r24	; 0x03
    3a06:	18 c0       	rjmp	.+48     	; 0x3a38 <doubletostr+0x96>
    {
        int_exponent*=10;
    3a08:	89 89       	ldd	r24, Y+17	; 0x11
    3a0a:	9a 89       	ldd	r25, Y+18	; 0x12
    3a0c:	9c 01       	movw	r18, r24
    3a0e:	22 0f       	add	r18, r18
    3a10:	33 1f       	adc	r19, r19
    3a12:	c9 01       	movw	r24, r18
    3a14:	88 0f       	add	r24, r24
    3a16:	99 1f       	adc	r25, r25
    3a18:	88 0f       	add	r24, r24
    3a1a:	99 1f       	adc	r25, r25
    3a1c:	82 0f       	add	r24, r18
    3a1e:	93 1f       	adc	r25, r19
    3a20:	9a 8b       	std	Y+18, r25	; 0x12
    3a22:	89 8b       	std	Y+17, r24	; 0x11

static void doubletostr (double num,char *str, int precision)
{
    int int_exponent=1,frac_exponent=1;

    for (int temp=num/10;temp;temp/=10)
    3a24:	8b 81       	ldd	r24, Y+3	; 0x03
    3a26:	9c 81       	ldd	r25, Y+4	; 0x04
    3a28:	2a e0       	ldi	r18, 0x0A	; 10
    3a2a:	30 e0       	ldi	r19, 0x00	; 0
    3a2c:	b9 01       	movw	r22, r18
    3a2e:	0e 94 3c 1e 	call	0x3c78	; 0x3c78 <__divmodhi4>
    3a32:	cb 01       	movw	r24, r22
    3a34:	9c 83       	std	Y+4, r25	; 0x04
    3a36:	8b 83       	std	Y+3, r24	; 0x03
    3a38:	8b 81       	ldd	r24, Y+3	; 0x03
    3a3a:	9c 81       	ldd	r25, Y+4	; 0x04
    3a3c:	00 97       	sbiw	r24, 0x00	; 0
    3a3e:	21 f7       	brne	.-56     	; 0x3a08 <doubletostr+0x66>
    {
        int_exponent*=10;
    }
    for (int i=0;i<precision;i++)
    3a40:	1a 82       	std	Y+2, r1	; 0x02
    3a42:	19 82       	std	Y+1, r1	; 0x01
    3a44:	13 c0       	rjmp	.+38     	; 0x3a6c <doubletostr+0xca>
    {
        frac_exponent*=10;
    3a46:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a48:	98 89       	ldd	r25, Y+16	; 0x10
    3a4a:	9c 01       	movw	r18, r24
    3a4c:	22 0f       	add	r18, r18
    3a4e:	33 1f       	adc	r19, r19
    3a50:	c9 01       	movw	r24, r18
    3a52:	88 0f       	add	r24, r24
    3a54:	99 1f       	adc	r25, r25
    3a56:	88 0f       	add	r24, r24
    3a58:	99 1f       	adc	r25, r25
    3a5a:	82 0f       	add	r24, r18
    3a5c:	93 1f       	adc	r25, r19
    3a5e:	98 8b       	std	Y+16, r25	; 0x10
    3a60:	8f 87       	std	Y+15, r24	; 0x0f

    for (int temp=num/10;temp;temp/=10)
    {
        int_exponent*=10;
    }
    for (int i=0;i<precision;i++)
    3a62:	89 81       	ldd	r24, Y+1	; 0x01
    3a64:	9a 81       	ldd	r25, Y+2	; 0x02
    3a66:	01 96       	adiw	r24, 0x01	; 1
    3a68:	9a 83       	std	Y+2, r25	; 0x02
    3a6a:	89 83       	std	Y+1, r24	; 0x01
    3a6c:	29 81       	ldd	r18, Y+1	; 0x01
    3a6e:	3a 81       	ldd	r19, Y+2	; 0x02
    3a70:	89 8d       	ldd	r24, Y+25	; 0x19
    3a72:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3a74:	28 17       	cp	r18, r24
    3a76:	39 07       	cpc	r19, r25
    3a78:	34 f3       	brlt	.-52     	; 0x3a46 <doubletostr+0xa4>
    {
        frac_exponent*=10;
    }
    long int integer=num;
    3a7a:	6b 89       	ldd	r22, Y+19	; 0x13
    3a7c:	7c 89       	ldd	r23, Y+20	; 0x14
    3a7e:	8d 89       	ldd	r24, Y+21	; 0x15
    3a80:	9e 89       	ldd	r25, Y+22	; 0x16
    3a82:	0e 94 a1 04 	call	0x942	; 0x942 <__fixsfsi>
    3a86:	dc 01       	movw	r26, r24
    3a88:	cb 01       	movw	r24, r22
    3a8a:	8b 87       	std	Y+11, r24	; 0x0b
    3a8c:	9c 87       	std	Y+12, r25	; 0x0c
    3a8e:	ad 87       	std	Y+13, r26	; 0x0d
    3a90:	be 87       	std	Y+14, r27	; 0x0e
    long int fraction=(num-integer)*frac_exponent;
    3a92:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a94:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a96:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a98:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a9a:	0e 94 43 04 	call	0x886	; 0x886 <__floatsisf>
    3a9e:	9b 01       	movw	r18, r22
    3aa0:	ac 01       	movw	r20, r24
    3aa2:	6b 89       	ldd	r22, Y+19	; 0x13
    3aa4:	7c 89       	ldd	r23, Y+20	; 0x14
    3aa6:	8d 89       	ldd	r24, Y+21	; 0x15
    3aa8:	9e 89       	ldd	r25, Y+22	; 0x16
    3aaa:	0e 94 df 01 	call	0x3be	; 0x3be <__subsf3>
    3aae:	dc 01       	movw	r26, r24
    3ab0:	cb 01       	movw	r24, r22
    3ab2:	7c 01       	movw	r14, r24
    3ab4:	8d 01       	movw	r16, r26
    3ab6:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ab8:	98 89       	ldd	r25, Y+16	; 0x10
    3aba:	aa 27       	eor	r26, r26
    3abc:	97 fd       	sbrc	r25, 7
    3abe:	a0 95       	com	r26
    3ac0:	ba 2f       	mov	r27, r26
    3ac2:	bc 01       	movw	r22, r24
    3ac4:	cd 01       	movw	r24, r26
    3ac6:	0e 94 43 04 	call	0x886	; 0x886 <__floatsisf>
    3aca:	9b 01       	movw	r18, r22
    3acc:	ac 01       	movw	r20, r24
    3ace:	c8 01       	movw	r24, r16
    3ad0:	b7 01       	movw	r22, r14
    3ad2:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    3ad6:	dc 01       	movw	r26, r24
    3ad8:	cb 01       	movw	r24, r22
    3ada:	bc 01       	movw	r22, r24
    3adc:	cd 01       	movw	r24, r26
    3ade:	0e 94 a1 04 	call	0x942	; 0x942 <__fixsfsi>
    3ae2:	dc 01       	movw	r26, r24
    3ae4:	cb 01       	movw	r24, r22
    3ae6:	8f 83       	std	Y+7, r24	; 0x07
    3ae8:	98 87       	std	Y+8, r25	; 0x08
    3aea:	a9 87       	std	Y+9, r26	; 0x09
    3aec:	ba 87       	std	Y+10, r27	; 0x0a
    int i=0;
    3aee:	1e 82       	std	Y+6, r1	; 0x06
    3af0:	1d 82       	std	Y+5, r1	; 0x05
    for(i=0;int_exponent;i++)
    3af2:	1e 82       	std	Y+6, r1	; 0x06
    3af4:	1d 82       	std	Y+5, r1	; 0x05
    3af6:	34 c0       	rjmp	.+104    	; 0x3b60 <doubletostr+0x1be>
    {
        str[i]=((integer/int_exponent)%10)+'0';
    3af8:	2d 81       	ldd	r18, Y+5	; 0x05
    3afa:	3e 81       	ldd	r19, Y+6	; 0x06
    3afc:	8f 89       	ldd	r24, Y+23	; 0x17
    3afe:	98 8d       	ldd	r25, Y+24	; 0x18
    3b00:	8c 01       	movw	r16, r24
    3b02:	02 0f       	add	r16, r18
    3b04:	13 1f       	adc	r17, r19
    3b06:	89 89       	ldd	r24, Y+17	; 0x11
    3b08:	9a 89       	ldd	r25, Y+18	; 0x12
    3b0a:	9c 01       	movw	r18, r24
    3b0c:	44 27       	eor	r20, r20
    3b0e:	37 fd       	sbrc	r19, 7
    3b10:	40 95       	com	r20
    3b12:	54 2f       	mov	r21, r20
    3b14:	8b 85       	ldd	r24, Y+11	; 0x0b
    3b16:	9c 85       	ldd	r25, Y+12	; 0x0c
    3b18:	ad 85       	ldd	r26, Y+13	; 0x0d
    3b1a:	be 85       	ldd	r27, Y+14	; 0x0e
    3b1c:	bc 01       	movw	r22, r24
    3b1e:	cd 01       	movw	r24, r26
    3b20:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <__divmodsi4>
    3b24:	da 01       	movw	r26, r20
    3b26:	c9 01       	movw	r24, r18
    3b28:	2a e0       	ldi	r18, 0x0A	; 10
    3b2a:	30 e0       	ldi	r19, 0x00	; 0
    3b2c:	40 e0       	ldi	r20, 0x00	; 0
    3b2e:	50 e0       	ldi	r21, 0x00	; 0
    3b30:	bc 01       	movw	r22, r24
    3b32:	cd 01       	movw	r24, r26
    3b34:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <__divmodsi4>
    3b38:	dc 01       	movw	r26, r24
    3b3a:	cb 01       	movw	r24, r22
    3b3c:	80 5d       	subi	r24, 0xD0	; 208
    3b3e:	f8 01       	movw	r30, r16
    3b40:	80 83       	st	Z, r24
        int_exponent/=10;
    3b42:	89 89       	ldd	r24, Y+17	; 0x11
    3b44:	9a 89       	ldd	r25, Y+18	; 0x12
    3b46:	2a e0       	ldi	r18, 0x0A	; 10
    3b48:	30 e0       	ldi	r19, 0x00	; 0
    3b4a:	b9 01       	movw	r22, r18
    3b4c:	0e 94 3c 1e 	call	0x3c78	; 0x3c78 <__divmodhi4>
    3b50:	cb 01       	movw	r24, r22
    3b52:	9a 8b       	std	Y+18, r25	; 0x12
    3b54:	89 8b       	std	Y+17, r24	; 0x11
        frac_exponent*=10;
    }
    long int integer=num;
    long int fraction=(num-integer)*frac_exponent;
    int i=0;
    for(i=0;int_exponent;i++)
    3b56:	8d 81       	ldd	r24, Y+5	; 0x05
    3b58:	9e 81       	ldd	r25, Y+6	; 0x06
    3b5a:	01 96       	adiw	r24, 0x01	; 1
    3b5c:	9e 83       	std	Y+6, r25	; 0x06
    3b5e:	8d 83       	std	Y+5, r24	; 0x05
    3b60:	89 89       	ldd	r24, Y+17	; 0x11
    3b62:	9a 89       	ldd	r25, Y+18	; 0x12
    3b64:	00 97       	sbiw	r24, 0x00	; 0
    3b66:	41 f6       	brne	.-112    	; 0x3af8 <doubletostr+0x156>
    {
        str[i]=((integer/int_exponent)%10)+'0';
        int_exponent/=10;
    }
    str[i++]='.';
    3b68:	2d 81       	ldd	r18, Y+5	; 0x05
    3b6a:	3e 81       	ldd	r19, Y+6	; 0x06
    3b6c:	8f 89       	ldd	r24, Y+23	; 0x17
    3b6e:	98 8d       	ldd	r25, Y+24	; 0x18
    3b70:	fc 01       	movw	r30, r24
    3b72:	e2 0f       	add	r30, r18
    3b74:	f3 1f       	adc	r31, r19
    3b76:	8e e2       	ldi	r24, 0x2E	; 46
    3b78:	80 83       	st	Z, r24
    3b7a:	8d 81       	ldd	r24, Y+5	; 0x05
    3b7c:	9e 81       	ldd	r25, Y+6	; 0x06
    3b7e:	01 96       	adiw	r24, 0x01	; 1
    3b80:	9e 83       	std	Y+6, r25	; 0x06
    3b82:	8d 83       	std	Y+5, r24	; 0x05
    frac_exponent/=10;
    3b84:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b86:	98 89       	ldd	r25, Y+16	; 0x10
    3b88:	2a e0       	ldi	r18, 0x0A	; 10
    3b8a:	30 e0       	ldi	r19, 0x00	; 0
    3b8c:	b9 01       	movw	r22, r18
    3b8e:	0e 94 3c 1e 	call	0x3c78	; 0x3c78 <__divmodhi4>
    3b92:	cb 01       	movw	r24, r22
    3b94:	98 8b       	std	Y+16, r25	; 0x10
    3b96:	8f 87       	std	Y+15, r24	; 0x0f
    3b98:	34 c0       	rjmp	.+104    	; 0x3c02 <doubletostr+0x260>
    for(;frac_exponent;i++)
    {
        str[i]=((fraction/frac_exponent)%10)+'0';
    3b9a:	2d 81       	ldd	r18, Y+5	; 0x05
    3b9c:	3e 81       	ldd	r19, Y+6	; 0x06
    3b9e:	8f 89       	ldd	r24, Y+23	; 0x17
    3ba0:	98 8d       	ldd	r25, Y+24	; 0x18
    3ba2:	8c 01       	movw	r16, r24
    3ba4:	02 0f       	add	r16, r18
    3ba6:	13 1f       	adc	r17, r19
    3ba8:	8f 85       	ldd	r24, Y+15	; 0x0f
    3baa:	98 89       	ldd	r25, Y+16	; 0x10
    3bac:	9c 01       	movw	r18, r24
    3bae:	44 27       	eor	r20, r20
    3bb0:	37 fd       	sbrc	r19, 7
    3bb2:	40 95       	com	r20
    3bb4:	54 2f       	mov	r21, r20
    3bb6:	8f 81       	ldd	r24, Y+7	; 0x07
    3bb8:	98 85       	ldd	r25, Y+8	; 0x08
    3bba:	a9 85       	ldd	r26, Y+9	; 0x09
    3bbc:	ba 85       	ldd	r27, Y+10	; 0x0a
    3bbe:	bc 01       	movw	r22, r24
    3bc0:	cd 01       	movw	r24, r26
    3bc2:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <__divmodsi4>
    3bc6:	da 01       	movw	r26, r20
    3bc8:	c9 01       	movw	r24, r18
    3bca:	2a e0       	ldi	r18, 0x0A	; 10
    3bcc:	30 e0       	ldi	r19, 0x00	; 0
    3bce:	40 e0       	ldi	r20, 0x00	; 0
    3bd0:	50 e0       	ldi	r21, 0x00	; 0
    3bd2:	bc 01       	movw	r22, r24
    3bd4:	cd 01       	movw	r24, r26
    3bd6:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <__divmodsi4>
    3bda:	dc 01       	movw	r26, r24
    3bdc:	cb 01       	movw	r24, r22
    3bde:	80 5d       	subi	r24, 0xD0	; 208
    3be0:	f8 01       	movw	r30, r16
    3be2:	80 83       	st	Z, r24
        frac_exponent/=10;
    3be4:	8f 85       	ldd	r24, Y+15	; 0x0f
    3be6:	98 89       	ldd	r25, Y+16	; 0x10
    3be8:	2a e0       	ldi	r18, 0x0A	; 10
    3bea:	30 e0       	ldi	r19, 0x00	; 0
    3bec:	b9 01       	movw	r22, r18
    3bee:	0e 94 3c 1e 	call	0x3c78	; 0x3c78 <__divmodhi4>
    3bf2:	cb 01       	movw	r24, r22
    3bf4:	98 8b       	std	Y+16, r25	; 0x10
    3bf6:	8f 87       	std	Y+15, r24	; 0x0f
        str[i]=((integer/int_exponent)%10)+'0';
        int_exponent/=10;
    }
    str[i++]='.';
    frac_exponent/=10;
    for(;frac_exponent;i++)
    3bf8:	8d 81       	ldd	r24, Y+5	; 0x05
    3bfa:	9e 81       	ldd	r25, Y+6	; 0x06
    3bfc:	01 96       	adiw	r24, 0x01	; 1
    3bfe:	9e 83       	std	Y+6, r25	; 0x06
    3c00:	8d 83       	std	Y+5, r24	; 0x05
    3c02:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c04:	98 89       	ldd	r25, Y+16	; 0x10
    3c06:	00 97       	sbiw	r24, 0x00	; 0
    3c08:	41 f6       	brne	.-112    	; 0x3b9a <doubletostr+0x1f8>
    {
        str[i]=((fraction/frac_exponent)%10)+'0';
        frac_exponent/=10;
    }
    str[i++]=0;
    3c0a:	2d 81       	ldd	r18, Y+5	; 0x05
    3c0c:	3e 81       	ldd	r19, Y+6	; 0x06
    3c0e:	8f 89       	ldd	r24, Y+23	; 0x17
    3c10:	98 8d       	ldd	r25, Y+24	; 0x18
    3c12:	fc 01       	movw	r30, r24
    3c14:	e2 0f       	add	r30, r18
    3c16:	f3 1f       	adc	r31, r19
    3c18:	10 82       	st	Z, r1
    3c1a:	8d 81       	ldd	r24, Y+5	; 0x05
    3c1c:	9e 81       	ldd	r25, Y+6	; 0x06
    3c1e:	01 96       	adiw	r24, 0x01	; 1
    3c20:	9e 83       	std	Y+6, r25	; 0x06
    3c22:	8d 83       	std	Y+5, r24	; 0x05
}
    3c24:	6a 96       	adiw	r28, 0x1a	; 26
    3c26:	0f b6       	in	r0, 0x3f	; 63
    3c28:	f8 94       	cli
    3c2a:	de bf       	out	0x3e, r29	; 62
    3c2c:	0f be       	out	0x3f, r0	; 63
    3c2e:	cd bf       	out	0x3d, r28	; 61
    3c30:	cf 91       	pop	r28
    3c32:	df 91       	pop	r29
    3c34:	1f 91       	pop	r17
    3c36:	0f 91       	pop	r16
    3c38:	ff 90       	pop	r15
    3c3a:	ef 90       	pop	r14
    3c3c:	08 95       	ret

00003c3e <main>:
	return 0;
}
*/

int main(void)
{
    3c3e:	df 93       	push	r29
    3c40:	cf 93       	push	r28
    3c42:	cd b7       	in	r28, 0x3d	; 61
    3c44:	de b7       	in	r29, 0x3e	; 62
//	uint8_t u8KeypadChar;
	APP_Init();
    3c46:	0e 94 0d 19 	call	0x321a	; 0x321a <APP_Init>

	while(1)
	{
		APP_Update();
    3c4a:	0e 94 37 19 	call	0x326e	; 0x326e <APP_Update>
    3c4e:	fd cf       	rjmp	.-6      	; 0x3c4a <main+0xc>

00003c50 <__udivmodhi4>:
    3c50:	aa 1b       	sub	r26, r26
    3c52:	bb 1b       	sub	r27, r27
    3c54:	51 e1       	ldi	r21, 0x11	; 17
    3c56:	07 c0       	rjmp	.+14     	; 0x3c66 <__udivmodhi4_ep>

00003c58 <__udivmodhi4_loop>:
    3c58:	aa 1f       	adc	r26, r26
    3c5a:	bb 1f       	adc	r27, r27
    3c5c:	a6 17       	cp	r26, r22
    3c5e:	b7 07       	cpc	r27, r23
    3c60:	10 f0       	brcs	.+4      	; 0x3c66 <__udivmodhi4_ep>
    3c62:	a6 1b       	sub	r26, r22
    3c64:	b7 0b       	sbc	r27, r23

00003c66 <__udivmodhi4_ep>:
    3c66:	88 1f       	adc	r24, r24
    3c68:	99 1f       	adc	r25, r25
    3c6a:	5a 95       	dec	r21
    3c6c:	a9 f7       	brne	.-22     	; 0x3c58 <__udivmodhi4_loop>
    3c6e:	80 95       	com	r24
    3c70:	90 95       	com	r25
    3c72:	bc 01       	movw	r22, r24
    3c74:	cd 01       	movw	r24, r26
    3c76:	08 95       	ret

00003c78 <__divmodhi4>:
    3c78:	97 fb       	bst	r25, 7
    3c7a:	09 2e       	mov	r0, r25
    3c7c:	07 26       	eor	r0, r23
    3c7e:	0a d0       	rcall	.+20     	; 0x3c94 <__divmodhi4_neg1>
    3c80:	77 fd       	sbrc	r23, 7
    3c82:	04 d0       	rcall	.+8      	; 0x3c8c <__divmodhi4_neg2>
    3c84:	e5 df       	rcall	.-54     	; 0x3c50 <__udivmodhi4>
    3c86:	06 d0       	rcall	.+12     	; 0x3c94 <__divmodhi4_neg1>
    3c88:	00 20       	and	r0, r0
    3c8a:	1a f4       	brpl	.+6      	; 0x3c92 <__divmodhi4_exit>

00003c8c <__divmodhi4_neg2>:
    3c8c:	70 95       	com	r23
    3c8e:	61 95       	neg	r22
    3c90:	7f 4f       	sbci	r23, 0xFF	; 255

00003c92 <__divmodhi4_exit>:
    3c92:	08 95       	ret

00003c94 <__divmodhi4_neg1>:
    3c94:	f6 f7       	brtc	.-4      	; 0x3c92 <__divmodhi4_exit>
    3c96:	90 95       	com	r25
    3c98:	81 95       	neg	r24
    3c9a:	9f 4f       	sbci	r25, 0xFF	; 255
    3c9c:	08 95       	ret

00003c9e <__divmodsi4>:
    3c9e:	97 fb       	bst	r25, 7
    3ca0:	09 2e       	mov	r0, r25
    3ca2:	05 26       	eor	r0, r21
    3ca4:	0e d0       	rcall	.+28     	; 0x3cc2 <__divmodsi4_neg1>
    3ca6:	57 fd       	sbrc	r21, 7
    3ca8:	04 d0       	rcall	.+8      	; 0x3cb2 <__divmodsi4_neg2>
    3caa:	14 d0       	rcall	.+40     	; 0x3cd4 <__udivmodsi4>
    3cac:	0a d0       	rcall	.+20     	; 0x3cc2 <__divmodsi4_neg1>
    3cae:	00 1c       	adc	r0, r0
    3cb0:	38 f4       	brcc	.+14     	; 0x3cc0 <__divmodsi4_exit>

00003cb2 <__divmodsi4_neg2>:
    3cb2:	50 95       	com	r21
    3cb4:	40 95       	com	r20
    3cb6:	30 95       	com	r19
    3cb8:	21 95       	neg	r18
    3cba:	3f 4f       	sbci	r19, 0xFF	; 255
    3cbc:	4f 4f       	sbci	r20, 0xFF	; 255
    3cbe:	5f 4f       	sbci	r21, 0xFF	; 255

00003cc0 <__divmodsi4_exit>:
    3cc0:	08 95       	ret

00003cc2 <__divmodsi4_neg1>:
    3cc2:	f6 f7       	brtc	.-4      	; 0x3cc0 <__divmodsi4_exit>
    3cc4:	90 95       	com	r25
    3cc6:	80 95       	com	r24
    3cc8:	70 95       	com	r23
    3cca:	61 95       	neg	r22
    3ccc:	7f 4f       	sbci	r23, 0xFF	; 255
    3cce:	8f 4f       	sbci	r24, 0xFF	; 255
    3cd0:	9f 4f       	sbci	r25, 0xFF	; 255
    3cd2:	08 95       	ret

00003cd4 <__udivmodsi4>:
    3cd4:	a1 e2       	ldi	r26, 0x21	; 33
    3cd6:	1a 2e       	mov	r1, r26
    3cd8:	aa 1b       	sub	r26, r26
    3cda:	bb 1b       	sub	r27, r27
    3cdc:	fd 01       	movw	r30, r26
    3cde:	0d c0       	rjmp	.+26     	; 0x3cfa <__udivmodsi4_ep>

00003ce0 <__udivmodsi4_loop>:
    3ce0:	aa 1f       	adc	r26, r26
    3ce2:	bb 1f       	adc	r27, r27
    3ce4:	ee 1f       	adc	r30, r30
    3ce6:	ff 1f       	adc	r31, r31
    3ce8:	a2 17       	cp	r26, r18
    3cea:	b3 07       	cpc	r27, r19
    3cec:	e4 07       	cpc	r30, r20
    3cee:	f5 07       	cpc	r31, r21
    3cf0:	20 f0       	brcs	.+8      	; 0x3cfa <__udivmodsi4_ep>
    3cf2:	a2 1b       	sub	r26, r18
    3cf4:	b3 0b       	sbc	r27, r19
    3cf6:	e4 0b       	sbc	r30, r20
    3cf8:	f5 0b       	sbc	r31, r21

00003cfa <__udivmodsi4_ep>:
    3cfa:	66 1f       	adc	r22, r22
    3cfc:	77 1f       	adc	r23, r23
    3cfe:	88 1f       	adc	r24, r24
    3d00:	99 1f       	adc	r25, r25
    3d02:	1a 94       	dec	r1
    3d04:	69 f7       	brne	.-38     	; 0x3ce0 <__udivmodsi4_loop>
    3d06:	60 95       	com	r22
    3d08:	70 95       	com	r23
    3d0a:	80 95       	com	r24
    3d0c:	90 95       	com	r25
    3d0e:	9b 01       	movw	r18, r22
    3d10:	ac 01       	movw	r20, r24
    3d12:	bd 01       	movw	r22, r26
    3d14:	cf 01       	movw	r24, r30
    3d16:	08 95       	ret

00003d18 <__prologue_saves__>:
    3d18:	2f 92       	push	r2
    3d1a:	3f 92       	push	r3
    3d1c:	4f 92       	push	r4
    3d1e:	5f 92       	push	r5
    3d20:	6f 92       	push	r6
    3d22:	7f 92       	push	r7
    3d24:	8f 92       	push	r8
    3d26:	9f 92       	push	r9
    3d28:	af 92       	push	r10
    3d2a:	bf 92       	push	r11
    3d2c:	cf 92       	push	r12
    3d2e:	df 92       	push	r13
    3d30:	ef 92       	push	r14
    3d32:	ff 92       	push	r15
    3d34:	0f 93       	push	r16
    3d36:	1f 93       	push	r17
    3d38:	cf 93       	push	r28
    3d3a:	df 93       	push	r29
    3d3c:	cd b7       	in	r28, 0x3d	; 61
    3d3e:	de b7       	in	r29, 0x3e	; 62
    3d40:	ca 1b       	sub	r28, r26
    3d42:	db 0b       	sbc	r29, r27
    3d44:	0f b6       	in	r0, 0x3f	; 63
    3d46:	f8 94       	cli
    3d48:	de bf       	out	0x3e, r29	; 62
    3d4a:	0f be       	out	0x3f, r0	; 63
    3d4c:	cd bf       	out	0x3d, r28	; 61
    3d4e:	09 94       	ijmp

00003d50 <__epilogue_restores__>:
    3d50:	2a 88       	ldd	r2, Y+18	; 0x12
    3d52:	39 88       	ldd	r3, Y+17	; 0x11
    3d54:	48 88       	ldd	r4, Y+16	; 0x10
    3d56:	5f 84       	ldd	r5, Y+15	; 0x0f
    3d58:	6e 84       	ldd	r6, Y+14	; 0x0e
    3d5a:	7d 84       	ldd	r7, Y+13	; 0x0d
    3d5c:	8c 84       	ldd	r8, Y+12	; 0x0c
    3d5e:	9b 84       	ldd	r9, Y+11	; 0x0b
    3d60:	aa 84       	ldd	r10, Y+10	; 0x0a
    3d62:	b9 84       	ldd	r11, Y+9	; 0x09
    3d64:	c8 84       	ldd	r12, Y+8	; 0x08
    3d66:	df 80       	ldd	r13, Y+7	; 0x07
    3d68:	ee 80       	ldd	r14, Y+6	; 0x06
    3d6a:	fd 80       	ldd	r15, Y+5	; 0x05
    3d6c:	0c 81       	ldd	r16, Y+4	; 0x04
    3d6e:	1b 81       	ldd	r17, Y+3	; 0x03
    3d70:	aa 81       	ldd	r26, Y+2	; 0x02
    3d72:	b9 81       	ldd	r27, Y+1	; 0x01
    3d74:	ce 0f       	add	r28, r30
    3d76:	d1 1d       	adc	r29, r1
    3d78:	0f b6       	in	r0, 0x3f	; 63
    3d7a:	f8 94       	cli
    3d7c:	de bf       	out	0x3e, r29	; 62
    3d7e:	0f be       	out	0x3f, r0	; 63
    3d80:	cd bf       	out	0x3d, r28	; 61
    3d82:	ed 01       	movw	r28, r26
    3d84:	08 95       	ret

00003d86 <atof>:
    3d86:	66 27       	eor	r22, r22
    3d88:	77 27       	eor	r23, r23
    3d8a:	0c 94 e8 1e 	jmp	0x3dd0	; 0x3dd0 <strtod>

00003d8e <itoa>:
    3d8e:	fb 01       	movw	r30, r22
    3d90:	9f 01       	movw	r18, r30
    3d92:	e8 94       	clt
    3d94:	42 30       	cpi	r20, 0x02	; 2
    3d96:	c4 f0       	brlt	.+48     	; 0x3dc8 <itoa+0x3a>
    3d98:	45 32       	cpi	r20, 0x25	; 37
    3d9a:	b4 f4       	brge	.+44     	; 0x3dc8 <itoa+0x3a>
    3d9c:	4a 30       	cpi	r20, 0x0A	; 10
    3d9e:	29 f4       	brne	.+10     	; 0x3daa <itoa+0x1c>
    3da0:	97 fb       	bst	r25, 7
    3da2:	1e f4       	brtc	.+6      	; 0x3daa <itoa+0x1c>
    3da4:	90 95       	com	r25
    3da6:	81 95       	neg	r24
    3da8:	9f 4f       	sbci	r25, 0xFF	; 255
    3daa:	64 2f       	mov	r22, r20
    3dac:	77 27       	eor	r23, r23
    3dae:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <__udivmodhi4>
    3db2:	80 5d       	subi	r24, 0xD0	; 208
    3db4:	8a 33       	cpi	r24, 0x3A	; 58
    3db6:	0c f0       	brlt	.+2      	; 0x3dba <itoa+0x2c>
    3db8:	89 5d       	subi	r24, 0xD9	; 217
    3dba:	81 93       	st	Z+, r24
    3dbc:	cb 01       	movw	r24, r22
    3dbe:	00 97       	sbiw	r24, 0x00	; 0
    3dc0:	a1 f7       	brne	.-24     	; 0x3daa <itoa+0x1c>
    3dc2:	16 f4       	brtc	.+4      	; 0x3dc8 <itoa+0x3a>
    3dc4:	5d e2       	ldi	r21, 0x2D	; 45
    3dc6:	51 93       	st	Z+, r21
    3dc8:	10 82       	st	Z, r1
    3dca:	c9 01       	movw	r24, r18
    3dcc:	0c 94 68 20 	jmp	0x40d0	; 0x40d0 <strrev>

00003dd0 <strtod>:
    3dd0:	a0 e0       	ldi	r26, 0x00	; 0
    3dd2:	b0 e0       	ldi	r27, 0x00	; 0
    3dd4:	ee ee       	ldi	r30, 0xEE	; 238
    3dd6:	fe e1       	ldi	r31, 0x1E	; 30
    3dd8:	0c 94 92 1e 	jmp	0x3d24	; 0x3d24 <__prologue_saves__+0xc>
    3ddc:	ec 01       	movw	r28, r24
    3dde:	5b 01       	movw	r10, r22
    3de0:	61 15       	cp	r22, r1
    3de2:	71 05       	cpc	r23, r1
    3de4:	19 f0       	breq	.+6      	; 0x3dec <strtod+0x1c>
    3de6:	fb 01       	movw	r30, r22
    3de8:	91 83       	std	Z+1, r25	; 0x01
    3dea:	80 83       	st	Z, r24
    3dec:	f9 90       	ld	r15, Y+
    3dee:	8f 2d       	mov	r24, r15
    3df0:	90 e0       	ldi	r25, 0x00	; 0
    3df2:	0e 94 48 20 	call	0x4090	; 0x4090 <isspace>
    3df6:	89 2b       	or	r24, r25
    3df8:	c9 f7       	brne	.-14     	; 0x3dec <strtod+0x1c>
    3dfa:	fd e2       	ldi	r31, 0x2D	; 45
    3dfc:	ff 16       	cp	r15, r31
    3dfe:	21 f4       	brne	.+8      	; 0x3e08 <strtod+0x38>
    3e00:	f9 90       	ld	r15, Y+
    3e02:	ee 24       	eor	r14, r14
    3e04:	e3 94       	inc	r14
    3e06:	05 c0       	rjmp	.+10     	; 0x3e12 <strtod+0x42>
    3e08:	2b e2       	ldi	r18, 0x2B	; 43
    3e0a:	f2 16       	cp	r15, r18
    3e0c:	09 f4       	brne	.+2      	; 0x3e10 <strtod+0x40>
    3e0e:	f9 90       	ld	r15, Y+
    3e10:	ee 24       	eor	r14, r14
    3e12:	8e 01       	movw	r16, r28
    3e14:	01 50       	subi	r16, 0x01	; 1
    3e16:	10 40       	sbci	r17, 0x00	; 0
    3e18:	c8 01       	movw	r24, r16
    3e1a:	64 e5       	ldi	r22, 0x54	; 84
    3e1c:	70 e0       	ldi	r23, 0x00	; 0
    3e1e:	43 e0       	ldi	r20, 0x03	; 3
    3e20:	50 e0       	ldi	r21, 0x00	; 0
    3e22:	0e 94 50 20 	call	0x40a0	; 0x40a0 <strncasecmp_P>
    3e26:	89 2b       	or	r24, r25
    3e28:	01 f5       	brne	.+64     	; 0x3e6a <strtod+0x9a>
    3e2a:	8e 01       	movw	r16, r28
    3e2c:	0e 5f       	subi	r16, 0xFE	; 254
    3e2e:	1f 4f       	sbci	r17, 0xFF	; 255
    3e30:	c8 01       	movw	r24, r16
    3e32:	67 e5       	ldi	r22, 0x57	; 87
    3e34:	70 e0       	ldi	r23, 0x00	; 0
    3e36:	45 e0       	ldi	r20, 0x05	; 5
    3e38:	50 e0       	ldi	r21, 0x00	; 0
    3e3a:	0e 94 50 20 	call	0x40a0	; 0x40a0 <strncasecmp_P>
    3e3e:	89 2b       	or	r24, r25
    3e40:	19 f4       	brne	.+6      	; 0x3e48 <strtod+0x78>
    3e42:	8e 01       	movw	r16, r28
    3e44:	09 5f       	subi	r16, 0xF9	; 249
    3e46:	1f 4f       	sbci	r17, 0xFF	; 255
    3e48:	a1 14       	cp	r10, r1
    3e4a:	b1 04       	cpc	r11, r1
    3e4c:	19 f0       	breq	.+6      	; 0x3e54 <strtod+0x84>
    3e4e:	f5 01       	movw	r30, r10
    3e50:	11 83       	std	Z+1, r17	; 0x01
    3e52:	00 83       	st	Z, r16
    3e54:	e0 fc       	sbrc	r14, 0
    3e56:	04 c0       	rjmp	.+8      	; 0x3e60 <strtod+0x90>
    3e58:	70 e0       	ldi	r23, 0x00	; 0
    3e5a:	90 e0       	ldi	r25, 0x00	; 0
    3e5c:	80 e8       	ldi	r24, 0x80	; 128
    3e5e:	14 c0       	rjmp	.+40     	; 0x3e88 <strtod+0xb8>
    3e60:	70 e0       	ldi	r23, 0x00	; 0
    3e62:	90 e0       	ldi	r25, 0x00	; 0
    3e64:	80 e8       	ldi	r24, 0x80	; 128
    3e66:	6f ef       	ldi	r22, 0xFF	; 255
    3e68:	08 c1       	rjmp	.+528    	; 0x407a <strtod+0x2aa>
    3e6a:	c8 01       	movw	r24, r16
    3e6c:	6c e5       	ldi	r22, 0x5C	; 92
    3e6e:	70 e0       	ldi	r23, 0x00	; 0
    3e70:	43 e0       	ldi	r20, 0x03	; 3
    3e72:	50 e0       	ldi	r21, 0x00	; 0
    3e74:	0e 94 50 20 	call	0x40a0	; 0x40a0 <strncasecmp_P>
    3e78:	89 2b       	or	r24, r25
    3e7a:	69 f4       	brne	.+26     	; 0x3e96 <strtod+0xc6>
    3e7c:	a1 14       	cp	r10, r1
    3e7e:	b1 04       	cpc	r11, r1
    3e80:	29 f4       	brne	.+10     	; 0x3e8c <strtod+0xbc>
    3e82:	70 e0       	ldi	r23, 0x00	; 0
    3e84:	90 e0       	ldi	r25, 0x00	; 0
    3e86:	80 ec       	ldi	r24, 0xC0	; 192
    3e88:	6f e7       	ldi	r22, 0x7F	; 127
    3e8a:	f7 c0       	rjmp	.+494    	; 0x407a <strtod+0x2aa>
    3e8c:	22 96       	adiw	r28, 0x02	; 2
    3e8e:	f5 01       	movw	r30, r10
    3e90:	d1 83       	std	Z+1, r29	; 0x01
    3e92:	c0 83       	st	Z, r28
    3e94:	f6 cf       	rjmp	.-20     	; 0x3e82 <strtod+0xb2>
    3e96:	88 24       	eor	r8, r8
    3e98:	99 24       	eor	r9, r9
    3e9a:	40 e0       	ldi	r20, 0x00	; 0
    3e9c:	50 e0       	ldi	r21, 0x00	; 0
    3e9e:	60 e0       	ldi	r22, 0x00	; 0
    3ea0:	70 e0       	ldi	r23, 0x00	; 0
    3ea2:	ef 2d       	mov	r30, r15
    3ea4:	e0 53       	subi	r30, 0x30	; 48
    3ea6:	ea 30       	cpi	r30, 0x0A	; 10
    3ea8:	a0 f5       	brcc	.+104    	; 0x3f12 <strtod+0x142>
    3eaa:	f2 e0       	ldi	r31, 0x02	; 2
    3eac:	ef 2a       	or	r14, r31
    3eae:	8e 2d       	mov	r24, r14
    3eb0:	90 e0       	ldi	r25, 0x00	; 0
    3eb2:	9c 01       	movw	r18, r24
    3eb4:	28 70       	andi	r18, 0x08	; 8
    3eb6:	30 70       	andi	r19, 0x00	; 0
    3eb8:	e2 fe       	sbrs	r14, 2
    3eba:	06 c0       	rjmp	.+12     	; 0x3ec8 <strtod+0xf8>
    3ebc:	23 2b       	or	r18, r19
    3ebe:	79 f5       	brne	.+94     	; 0x3f1e <strtod+0x14e>
    3ec0:	08 94       	sec
    3ec2:	81 1c       	adc	r8, r1
    3ec4:	91 1c       	adc	r9, r1
    3ec6:	2b c0       	rjmp	.+86     	; 0x3f1e <strtod+0x14e>
    3ec8:	23 2b       	or	r18, r19
    3eca:	19 f0       	breq	.+6      	; 0x3ed2 <strtod+0x102>
    3ecc:	08 94       	sec
    3ece:	81 08       	sbc	r8, r1
    3ed0:	91 08       	sbc	r9, r1
    3ed2:	db 01       	movw	r26, r22
    3ed4:	ca 01       	movw	r24, r20
    3ed6:	12 e0       	ldi	r17, 0x02	; 2
    3ed8:	88 0f       	add	r24, r24
    3eda:	99 1f       	adc	r25, r25
    3edc:	aa 1f       	adc	r26, r26
    3ede:	bb 1f       	adc	r27, r27
    3ee0:	1a 95       	dec	r17
    3ee2:	d1 f7       	brne	.-12     	; 0x3ed8 <strtod+0x108>
    3ee4:	48 0f       	add	r20, r24
    3ee6:	59 1f       	adc	r21, r25
    3ee8:	6a 1f       	adc	r22, r26
    3eea:	7b 1f       	adc	r23, r27
    3eec:	44 0f       	add	r20, r20
    3eee:	55 1f       	adc	r21, r21
    3ef0:	66 1f       	adc	r22, r22
    3ef2:	77 1f       	adc	r23, r23
    3ef4:	4e 0f       	add	r20, r30
    3ef6:	51 1d       	adc	r21, r1
    3ef8:	61 1d       	adc	r22, r1
    3efa:	71 1d       	adc	r23, r1
    3efc:	48 39       	cpi	r20, 0x98	; 152
    3efe:	29 e9       	ldi	r18, 0x99	; 153
    3f00:	52 07       	cpc	r21, r18
    3f02:	29 e9       	ldi	r18, 0x99	; 153
    3f04:	62 07       	cpc	r22, r18
    3f06:	29 e1       	ldi	r18, 0x19	; 25
    3f08:	72 07       	cpc	r23, r18
    3f0a:	48 f0       	brcs	.+18     	; 0x3f1e <strtod+0x14e>
    3f0c:	84 e0       	ldi	r24, 0x04	; 4
    3f0e:	e8 2a       	or	r14, r24
    3f10:	06 c0       	rjmp	.+12     	; 0x3f1e <strtod+0x14e>
    3f12:	ee 3f       	cpi	r30, 0xFE	; 254
    3f14:	31 f4       	brne	.+12     	; 0x3f22 <strtod+0x152>
    3f16:	e3 fc       	sbrc	r14, 3
    3f18:	39 c0       	rjmp	.+114    	; 0x3f8c <strtod+0x1bc>
    3f1a:	98 e0       	ldi	r25, 0x08	; 8
    3f1c:	e9 2a       	or	r14, r25
    3f1e:	f9 90       	ld	r15, Y+
    3f20:	c0 cf       	rjmp	.-128    	; 0x3ea2 <strtod+0xd2>
    3f22:	e5 33       	cpi	r30, 0x35	; 53
    3f24:	11 f0       	breq	.+4      	; 0x3f2a <strtod+0x15a>
    3f26:	e5 31       	cpi	r30, 0x15	; 21
    3f28:	89 f5       	brne	.+98     	; 0x3f8c <strtod+0x1bc>
    3f2a:	29 91       	ld	r18, Y+
    3f2c:	2d 32       	cpi	r18, 0x2D	; 45
    3f2e:	19 f4       	brne	.+6      	; 0x3f36 <strtod+0x166>
    3f30:	e0 e1       	ldi	r30, 0x10	; 16
    3f32:	ee 2a       	or	r14, r30
    3f34:	05 c0       	rjmp	.+10     	; 0x3f40 <strtod+0x170>
    3f36:	2b 32       	cpi	r18, 0x2B	; 43
    3f38:	19 f0       	breq	.+6      	; 0x3f40 <strtod+0x170>
    3f3a:	81 e0       	ldi	r24, 0x01	; 1
    3f3c:	90 e0       	ldi	r25, 0x00	; 0
    3f3e:	03 c0       	rjmp	.+6      	; 0x3f46 <strtod+0x176>
    3f40:	29 91       	ld	r18, Y+
    3f42:	82 e0       	ldi	r24, 0x02	; 2
    3f44:	90 e0       	ldi	r25, 0x00	; 0
    3f46:	e2 2f       	mov	r30, r18
    3f48:	e0 53       	subi	r30, 0x30	; 48
    3f4a:	ea 30       	cpi	r30, 0x0A	; 10
    3f4c:	18 f0       	brcs	.+6      	; 0x3f54 <strtod+0x184>
    3f4e:	c8 1b       	sub	r28, r24
    3f50:	d9 0b       	sbc	r29, r25
    3f52:	1c c0       	rjmp	.+56     	; 0x3f8c <strtod+0x1bc>
    3f54:	20 e0       	ldi	r18, 0x00	; 0
    3f56:	30 e0       	ldi	r19, 0x00	; 0
    3f58:	fc e0       	ldi	r31, 0x0C	; 12
    3f5a:	20 38       	cpi	r18, 0x80	; 128
    3f5c:	3f 07       	cpc	r19, r31
    3f5e:	5c f4       	brge	.+22     	; 0x3f76 <strtod+0x1a6>
    3f60:	c9 01       	movw	r24, r18
    3f62:	88 0f       	add	r24, r24
    3f64:	99 1f       	adc	r25, r25
    3f66:	88 0f       	add	r24, r24
    3f68:	99 1f       	adc	r25, r25
    3f6a:	28 0f       	add	r18, r24
    3f6c:	39 1f       	adc	r19, r25
    3f6e:	22 0f       	add	r18, r18
    3f70:	33 1f       	adc	r19, r19
    3f72:	2e 0f       	add	r18, r30
    3f74:	31 1d       	adc	r19, r1
    3f76:	e9 91       	ld	r30, Y+
    3f78:	e0 53       	subi	r30, 0x30	; 48
    3f7a:	ea 30       	cpi	r30, 0x0A	; 10
    3f7c:	68 f3       	brcs	.-38     	; 0x3f58 <strtod+0x188>
    3f7e:	e4 fe       	sbrs	r14, 4
    3f80:	03 c0       	rjmp	.+6      	; 0x3f88 <strtod+0x1b8>
    3f82:	30 95       	com	r19
    3f84:	21 95       	neg	r18
    3f86:	3f 4f       	sbci	r19, 0xFF	; 255
    3f88:	82 0e       	add	r8, r18
    3f8a:	93 1e       	adc	r9, r19
    3f8c:	ce 2c       	mov	r12, r14
    3f8e:	dd 24       	eor	r13, r13
    3f90:	e1 fe       	sbrs	r14, 1
    3f92:	07 c0       	rjmp	.+14     	; 0x3fa2 <strtod+0x1d2>
    3f94:	a1 14       	cp	r10, r1
    3f96:	b1 04       	cpc	r11, r1
    3f98:	21 f0       	breq	.+8      	; 0x3fa2 <strtod+0x1d2>
    3f9a:	21 97       	sbiw	r28, 0x01	; 1
    3f9c:	f5 01       	movw	r30, r10
    3f9e:	d1 83       	std	Z+1, r29	; 0x01
    3fa0:	c0 83       	st	Z, r28
    3fa2:	cb 01       	movw	r24, r22
    3fa4:	ba 01       	movw	r22, r20
    3fa6:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__floatunsisf>
    3faa:	7b 01       	movw	r14, r22
    3fac:	8c 01       	movw	r16, r24
    3fae:	f3 e0       	ldi	r31, 0x03	; 3
    3fb0:	cf 22       	and	r12, r31
    3fb2:	dd 24       	eor	r13, r13
    3fb4:	23 e0       	ldi	r18, 0x03	; 3
    3fb6:	c2 16       	cp	r12, r18
    3fb8:	d1 04       	cpc	r13, r1
    3fba:	21 f4       	brne	.+8      	; 0x3fc4 <strtod+0x1f4>
    3fbc:	17 fb       	bst	r17, 7
    3fbe:	10 95       	com	r17
    3fc0:	17 f9       	bld	r17, 7
    3fc2:	10 95       	com	r17
    3fc4:	57 01       	movw	r10, r14
    3fc6:	68 01       	movw	r12, r16
    3fc8:	c8 01       	movw	r24, r16
    3fca:	b7 01       	movw	r22, r14
    3fcc:	20 e0       	ldi	r18, 0x00	; 0
    3fce:	30 e0       	ldi	r19, 0x00	; 0
    3fd0:	40 e0       	ldi	r20, 0x00	; 0
    3fd2:	50 e0       	ldi	r21, 0x00	; 0
    3fd4:	0e 94 78 20 	call	0x40f0	; 0x40f0 <__cmpsf2>
    3fd8:	88 23       	and	r24, r24
    3fda:	09 f4       	brne	.+2      	; 0x3fde <strtod+0x20e>
    3fdc:	4a c0       	rjmp	.+148    	; 0x4072 <strtod+0x2a2>
    3fde:	97 fe       	sbrs	r9, 7
    3fe0:	0d c0       	rjmp	.+26     	; 0x3ffc <strtod+0x22c>
    3fe2:	23 e7       	ldi	r18, 0x73	; 115
    3fe4:	e2 2e       	mov	r14, r18
    3fe6:	20 e0       	ldi	r18, 0x00	; 0
    3fe8:	f2 2e       	mov	r15, r18
    3fea:	90 94       	com	r9
    3fec:	81 94       	neg	r8
    3fee:	91 08       	sbc	r9, r1
    3ff0:	93 94       	inc	r9
    3ff2:	c0 e2       	ldi	r28, 0x20	; 32
    3ff4:	d0 e0       	ldi	r29, 0x00	; 0
    3ff6:	00 e0       	ldi	r16, 0x00	; 0
    3ff8:	10 e0       	ldi	r17, 0x00	; 0
    3ffa:	12 c0       	rjmp	.+36     	; 0x4020 <strtod+0x250>
    3ffc:	9b e8       	ldi	r25, 0x8B	; 139
    3ffe:	e9 2e       	mov	r14, r25
    4000:	90 e0       	ldi	r25, 0x00	; 0
    4002:	f9 2e       	mov	r15, r25
    4004:	f6 cf       	rjmp	.-20     	; 0x3ff2 <strtod+0x222>
    4006:	f7 01       	movw	r30, r14
    4008:	25 91       	lpm	r18, Z+
    400a:	35 91       	lpm	r19, Z+
    400c:	45 91       	lpm	r20, Z+
    400e:	54 91       	lpm	r21, Z+
    4010:	c6 01       	movw	r24, r12
    4012:	b5 01       	movw	r22, r10
    4014:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    4018:	5b 01       	movw	r10, r22
    401a:	6c 01       	movw	r12, r24
    401c:	8c 1a       	sub	r8, r28
    401e:	9d 0a       	sbc	r9, r29
    4020:	8c 16       	cp	r8, r28
    4022:	9d 06       	cpc	r9, r29
    4024:	84 f7       	brge	.-32     	; 0x4006 <strtod+0x236>
    4026:	d5 95       	asr	r29
    4028:	c7 95       	ror	r28
    402a:	0f 5f       	subi	r16, 0xFF	; 255
    402c:	1f 4f       	sbci	r17, 0xFF	; 255
    402e:	06 30       	cpi	r16, 0x06	; 6
    4030:	11 05       	cpc	r17, r1
    4032:	29 f0       	breq	.+10     	; 0x403e <strtod+0x26e>
    4034:	8c ef       	ldi	r24, 0xFC	; 252
    4036:	9f ef       	ldi	r25, 0xFF	; 255
    4038:	e8 0e       	add	r14, r24
    403a:	f9 1e       	adc	r15, r25
    403c:	f1 cf       	rjmp	.-30     	; 0x4020 <strtod+0x250>
    403e:	c5 01       	movw	r24, r10
    4040:	d6 01       	movw	r26, r12
    4042:	7c 01       	movw	r14, r24
    4044:	8d 01       	movw	r16, r26
    4046:	8c 2d       	mov	r24, r12
    4048:	88 0f       	add	r24, r24
    404a:	8d 2d       	mov	r24, r13
    404c:	88 1f       	adc	r24, r24
    404e:	8f 3f       	cpi	r24, 0xFF	; 255
    4050:	51 f0       	breq	.+20     	; 0x4066 <strtod+0x296>
    4052:	c6 01       	movw	r24, r12
    4054:	b5 01       	movw	r22, r10
    4056:	20 e0       	ldi	r18, 0x00	; 0
    4058:	30 e0       	ldi	r19, 0x00	; 0
    405a:	40 e0       	ldi	r20, 0x00	; 0
    405c:	50 e0       	ldi	r21, 0x00	; 0
    405e:	0e 94 78 20 	call	0x40f0	; 0x40f0 <__cmpsf2>
    4062:	88 23       	and	r24, r24
    4064:	31 f4       	brne	.+12     	; 0x4072 <strtod+0x2a2>
    4066:	82 e2       	ldi	r24, 0x22	; 34
    4068:	90 e0       	ldi	r25, 0x00	; 0
    406a:	90 93 f2 07 	sts	0x07F2, r25
    406e:	80 93 f1 07 	sts	0x07F1, r24
    4072:	7e 2d       	mov	r23, r14
    4074:	9f 2d       	mov	r25, r15
    4076:	80 2f       	mov	r24, r16
    4078:	61 2f       	mov	r22, r17
    407a:	27 2f       	mov	r18, r23
    407c:	39 2f       	mov	r19, r25
    407e:	48 2f       	mov	r20, r24
    4080:	56 2f       	mov	r21, r22
    4082:	b9 01       	movw	r22, r18
    4084:	ca 01       	movw	r24, r20
    4086:	cd b7       	in	r28, 0x3d	; 61
    4088:	de b7       	in	r29, 0x3e	; 62
    408a:	ec e0       	ldi	r30, 0x0C	; 12
    408c:	0c 94 ae 1e 	jmp	0x3d5c	; 0x3d5c <__epilogue_restores__+0xc>

00004090 <isspace>:
    4090:	91 11       	cpse	r25, r1
    4092:	56 c0       	rjmp	.+172    	; 0x4140 <__ctype_isfalse>
    4094:	80 32       	cpi	r24, 0x20	; 32
    4096:	19 f0       	breq	.+6      	; 0x409e <isspace+0xe>
    4098:	89 50       	subi	r24, 0x09	; 9
    409a:	85 50       	subi	r24, 0x05	; 5
    409c:	d0 f7       	brcc	.-12     	; 0x4092 <isspace+0x2>
    409e:	08 95       	ret

000040a0 <strncasecmp_P>:
    40a0:	fb 01       	movw	r30, r22
    40a2:	dc 01       	movw	r26, r24
    40a4:	41 50       	subi	r20, 0x01	; 1
    40a6:	50 40       	sbci	r21, 0x00	; 0
    40a8:	88 f0       	brcs	.+34     	; 0x40cc <strncasecmp_P+0x2c>
    40aa:	8d 91       	ld	r24, X+
    40ac:	81 34       	cpi	r24, 0x41	; 65
    40ae:	1c f0       	brlt	.+6      	; 0x40b6 <strncasecmp_P+0x16>
    40b0:	8b 35       	cpi	r24, 0x5B	; 91
    40b2:	0c f4       	brge	.+2      	; 0x40b6 <strncasecmp_P+0x16>
    40b4:	80 5e       	subi	r24, 0xE0	; 224
    40b6:	65 91       	lpm	r22, Z+
    40b8:	61 34       	cpi	r22, 0x41	; 65
    40ba:	1c f0       	brlt	.+6      	; 0x40c2 <strncasecmp_P+0x22>
    40bc:	6b 35       	cpi	r22, 0x5B	; 91
    40be:	0c f4       	brge	.+2      	; 0x40c2 <strncasecmp_P+0x22>
    40c0:	60 5e       	subi	r22, 0xE0	; 224
    40c2:	86 1b       	sub	r24, r22
    40c4:	61 11       	cpse	r22, r1
    40c6:	71 f3       	breq	.-36     	; 0x40a4 <strncasecmp_P+0x4>
    40c8:	99 0b       	sbc	r25, r25
    40ca:	08 95       	ret
    40cc:	88 1b       	sub	r24, r24
    40ce:	fc cf       	rjmp	.-8      	; 0x40c8 <strncasecmp_P+0x28>

000040d0 <strrev>:
    40d0:	dc 01       	movw	r26, r24
    40d2:	fc 01       	movw	r30, r24
    40d4:	67 2f       	mov	r22, r23
    40d6:	71 91       	ld	r23, Z+
    40d8:	77 23       	and	r23, r23
    40da:	e1 f7       	brne	.-8      	; 0x40d4 <strrev+0x4>
    40dc:	32 97       	sbiw	r30, 0x02	; 2
    40de:	04 c0       	rjmp	.+8      	; 0x40e8 <strrev+0x18>
    40e0:	7c 91       	ld	r23, X
    40e2:	6d 93       	st	X+, r22
    40e4:	70 83       	st	Z, r23
    40e6:	62 91       	ld	r22, -Z
    40e8:	ae 17       	cp	r26, r30
    40ea:	bf 07       	cpc	r27, r31
    40ec:	c8 f3       	brcs	.-14     	; 0x40e0 <strrev+0x10>
    40ee:	08 95       	ret

000040f0 <__cmpsf2>:
    40f0:	03 d0       	rcall	.+6      	; 0x40f8 <__fp_cmp>
    40f2:	08 f4       	brcc	.+2      	; 0x40f6 <__cmpsf2+0x6>
    40f4:	81 e0       	ldi	r24, 0x01	; 1
    40f6:	08 95       	ret

000040f8 <__fp_cmp>:
    40f8:	99 0f       	add	r25, r25
    40fa:	00 08       	sbc	r0, r0
    40fc:	55 0f       	add	r21, r21
    40fe:	aa 0b       	sbc	r26, r26
    4100:	e0 e8       	ldi	r30, 0x80	; 128
    4102:	fe ef       	ldi	r31, 0xFE	; 254
    4104:	16 16       	cp	r1, r22
    4106:	17 06       	cpc	r1, r23
    4108:	e8 07       	cpc	r30, r24
    410a:	f9 07       	cpc	r31, r25
    410c:	c0 f0       	brcs	.+48     	; 0x413e <__fp_cmp+0x46>
    410e:	12 16       	cp	r1, r18
    4110:	13 06       	cpc	r1, r19
    4112:	e4 07       	cpc	r30, r20
    4114:	f5 07       	cpc	r31, r21
    4116:	98 f0       	brcs	.+38     	; 0x413e <__fp_cmp+0x46>
    4118:	62 1b       	sub	r22, r18
    411a:	73 0b       	sbc	r23, r19
    411c:	84 0b       	sbc	r24, r20
    411e:	95 0b       	sbc	r25, r21
    4120:	39 f4       	brne	.+14     	; 0x4130 <__fp_cmp+0x38>
    4122:	0a 26       	eor	r0, r26
    4124:	61 f0       	breq	.+24     	; 0x413e <__fp_cmp+0x46>
    4126:	23 2b       	or	r18, r19
    4128:	24 2b       	or	r18, r20
    412a:	25 2b       	or	r18, r21
    412c:	21 f4       	brne	.+8      	; 0x4136 <__fp_cmp+0x3e>
    412e:	08 95       	ret
    4130:	0a 26       	eor	r0, r26
    4132:	09 f4       	brne	.+2      	; 0x4136 <__fp_cmp+0x3e>
    4134:	a1 40       	sbci	r26, 0x01	; 1
    4136:	a6 95       	lsr	r26
    4138:	8f ef       	ldi	r24, 0xFF	; 255
    413a:	81 1d       	adc	r24, r1
    413c:	81 1d       	adc	r24, r1
    413e:	08 95       	ret

00004140 <__ctype_isfalse>:
    4140:	99 27       	eor	r25, r25
    4142:	88 27       	eor	r24, r24

00004144 <__ctype_istrue>:
    4144:	08 95       	ret

00004146 <_exit>:
    4146:	f8 94       	cli

00004148 <__stop_program>:
    4148:	ff cf       	rjmp	.-2      	; 0x4148 <__stop_program>
