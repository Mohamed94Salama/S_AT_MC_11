
Terminal.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000023d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000002b4  00800060  000023d4  00002468  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000435  00800314  00800314  0000271c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000271c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002778  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003e0  00000000  00000000  000027b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004d5f  00000000  00000000  00002b94  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001458  00000000  00000000  000078f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000026fd  00000000  00000000  00008d4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b04  00000000  00000000  0000b448  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000163e  00000000  00000000  0000bf4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002eae  00000000  00000000  0000d58a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000330  00000000  00000000  00010438  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 55 00 	jmp	0xaa	; 0xaa <__ctors_end>
       4:	0c 94 bd 0a 	jmp	0x157a	; 0x157a <__vector_1>
       8:	0c 94 e6 0a 	jmp	0x15cc	; 0x15cc <__vector_2>
       c:	0c 94 0f 0b 	jmp	0x161e	; 0x161e <__vector_3>
      10:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
      14:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
      18:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
      1c:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
      20:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
      24:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
      28:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
      2c:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
      30:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
      34:	0c 94 ed 0c 	jmp	0x19da	; 0x19da <__vector_13>
      38:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
      3c:	0c 94 16 0d 	jmp	0x1a2c	; 0x1a2c <__vector_15>
      40:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
      44:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
      48:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
      4c:	0c 94 f9 0b 	jmp	0x17f2	; 0x17f2 <__vector_19>
      50:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
      54:	6b 06       	cpc	r6, r27
      56:	8b 06       	cpc	r8, r27
      58:	6d 06       	cpc	r6, r29
      5a:	6f 06       	cpc	r6, r31
      5c:	73 06       	cpc	r7, r19
      5e:	75 06       	cpc	r7, r21
      60:	77 06       	cpc	r7, r23
      62:	7b 06       	cpc	r7, r27
      64:	7d 06       	cpc	r7, r29
      66:	7f 06       	cpc	r7, r31
      68:	83 06       	cpc	r8, r19
      6a:	85 06       	cpc	r8, r21
      6c:	87 06       	cpc	r8, r23

0000006e <__trampolines_end>:
      6e:	4e 41       	sbci	r20, 0x1E	; 30
      70:	4e 49       	Address 0x00000070 is out of bounds.
.word	0xffff	; ????

00000071 <pstr_inity>:
      71:	49 4e 49 54 59                                      INITY

00000076 <pstr_inf>:
      76:	49 4e 46                                            INF

00000079 <pwr_m10>:
      79:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      89:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000091 <pwr_p10>:
      91:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
      a1:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

000000aa <__ctors_end>:
      aa:	11 24       	eor	r1, r1
      ac:	1f be       	out	0x3f, r1	; 63
      ae:	cf e5       	ldi	r28, 0x5F	; 95
      b0:	d8 e0       	ldi	r29, 0x08	; 8
      b2:	de bf       	out	0x3e, r29	; 62
      b4:	cd bf       	out	0x3d, r28	; 61

000000b6 <__do_copy_data>:
      b6:	13 e0       	ldi	r17, 0x03	; 3
      b8:	a0 e6       	ldi	r26, 0x60	; 96
      ba:	b0 e0       	ldi	r27, 0x00	; 0
      bc:	e4 ed       	ldi	r30, 0xD4	; 212
      be:	f3 e2       	ldi	r31, 0x23	; 35
      c0:	02 c0       	rjmp	.+4      	; 0xc6 <__do_copy_data+0x10>
      c2:	05 90       	lpm	r0, Z+
      c4:	0d 92       	st	X+, r0
      c6:	a4 31       	cpi	r26, 0x14	; 20
      c8:	b1 07       	cpc	r27, r17
      ca:	d9 f7       	brne	.-10     	; 0xc2 <__do_copy_data+0xc>

000000cc <__do_clear_bss>:
      cc:	27 e0       	ldi	r18, 0x07	; 7
      ce:	a4 e1       	ldi	r26, 0x14	; 20
      d0:	b3 e0       	ldi	r27, 0x03	; 3
      d2:	01 c0       	rjmp	.+2      	; 0xd6 <.do_clear_bss_start>

000000d4 <.do_clear_bss_loop>:
      d4:	1d 92       	st	X+, r1

000000d6 <.do_clear_bss_start>:
      d6:	a9 34       	cpi	r26, 0x49	; 73
      d8:	b2 07       	cpc	r27, r18
      da:	e1 f7       	brne	.-8      	; 0xd4 <.do_clear_bss_loop>
      dc:	0e 94 34 09 	call	0x1268	; 0x1268 <main>
      e0:	0c 94 e8 11 	jmp	0x23d0	; 0x23d0 <_exit>

000000e4 <__bad_interrupt>:
      e4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e8 <APP_Delay>:
	}
}


static void APP_Delay(void)
{
      e8:	cf 93       	push	r28
      ea:	df 93       	push	r29
      ec:	00 d0       	rcall	.+0      	; 0xee <APP_Delay+0x6>
      ee:	00 d0       	rcall	.+0      	; 0xf0 <APP_Delay+0x8>
      f0:	cd b7       	in	r28, 0x3d	; 61
      f2:	de b7       	in	r29, 0x3e	; 62
	volatile uint32_t u32DelayValue;
	for(u32DelayValue = 0; u32DelayValue < 250000; u32DelayValue++);
      f4:	19 82       	std	Y+1, r1	; 0x01
      f6:	1a 82       	std	Y+2, r1	; 0x02
      f8:	1b 82       	std	Y+3, r1	; 0x03
      fa:	1c 82       	std	Y+4, r1	; 0x04
      fc:	0b c0       	rjmp	.+22     	; 0x114 <APP_Delay+0x2c>
      fe:	89 81       	ldd	r24, Y+1	; 0x01
     100:	9a 81       	ldd	r25, Y+2	; 0x02
     102:	ab 81       	ldd	r26, Y+3	; 0x03
     104:	bc 81       	ldd	r27, Y+4	; 0x04
     106:	01 96       	adiw	r24, 0x01	; 1
     108:	a1 1d       	adc	r26, r1
     10a:	b1 1d       	adc	r27, r1
     10c:	89 83       	std	Y+1, r24	; 0x01
     10e:	9a 83       	std	Y+2, r25	; 0x02
     110:	ab 83       	std	Y+3, r26	; 0x03
     112:	bc 83       	std	Y+4, r27	; 0x04
     114:	89 81       	ldd	r24, Y+1	; 0x01
     116:	9a 81       	ldd	r25, Y+2	; 0x02
     118:	ab 81       	ldd	r26, Y+3	; 0x03
     11a:	bc 81       	ldd	r27, Y+4	; 0x04
     11c:	80 39       	cpi	r24, 0x90	; 144
     11e:	90 4d       	sbci	r25, 0xD0	; 208
     120:	a3 40       	sbci	r26, 0x03	; 3
     122:	b1 05       	cpc	r27, r1
     124:	60 f3       	brcs	.-40     	; 0xfe <APP_Delay+0x16>
}
     126:	0f 90       	pop	r0
     128:	0f 90       	pop	r0
     12a:	0f 90       	pop	r0
     12c:	0f 90       	pop	r0
     12e:	df 91       	pop	r29
     130:	cf 91       	pop	r28
     132:	08 95       	ret

00000134 <doubletostr>:

static void doubletostr (double num,char *str, int precision)
{
     134:	2f 92       	push	r2
     136:	3f 92       	push	r3
     138:	4f 92       	push	r4
     13a:	5f 92       	push	r5
     13c:	6f 92       	push	r6
     13e:	7f 92       	push	r7
     140:	8f 92       	push	r8
     142:	9f 92       	push	r9
     144:	af 92       	push	r10
     146:	bf 92       	push	r11
     148:	cf 92       	push	r12
     14a:	df 92       	push	r13
     14c:	ef 92       	push	r14
     14e:	ff 92       	push	r15
     150:	0f 93       	push	r16
     152:	1f 93       	push	r17
     154:	cf 93       	push	r28
     156:	df 93       	push	r29
     158:	2b 01       	movw	r4, r22
     15a:	3c 01       	movw	r6, r24
     15c:	6a 01       	movw	r12, r20
     15e:	79 01       	movw	r14, r18
    int int_exponent=1,frac_exponent=1;

    for (int temp=num/10;temp;temp/=10)
     160:	20 e0       	ldi	r18, 0x00	; 0
     162:	30 e0       	ldi	r19, 0x00	; 0
     164:	40 e2       	ldi	r20, 0x20	; 32
     166:	51 e4       	ldi	r21, 0x41	; 65
     168:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <__divsf3>
     16c:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <__fixsfsi>
	for(u32DelayValue = 0; u32DelayValue < 250000; u32DelayValue++);
}

static void doubletostr (double num,char *str, int precision)
{
    int int_exponent=1,frac_exponent=1;
     170:	c1 e0       	ldi	r28, 0x01	; 1
     172:	d0 e0       	ldi	r29, 0x00	; 0

    for (int temp=num/10;temp;temp/=10)
     174:	10 c0       	rjmp	.+32     	; 0x196 <doubletostr+0x62>
    {
        int_exponent*=10;
     176:	ce 01       	movw	r24, r28
     178:	88 0f       	add	r24, r24
     17a:	99 1f       	adc	r25, r25
     17c:	cc 0f       	add	r28, r28
     17e:	dd 1f       	adc	r29, r29
     180:	cc 0f       	add	r28, r28
     182:	dd 1f       	adc	r29, r29
     184:	cc 0f       	add	r28, r28
     186:	dd 1f       	adc	r29, r29
     188:	c8 0f       	add	r28, r24
     18a:	d9 1f       	adc	r29, r25

static void doubletostr (double num,char *str, int precision)
{
    int int_exponent=1,frac_exponent=1;

    for (int temp=num/10;temp;temp/=10)
     18c:	cb 01       	movw	r24, r22
     18e:	6a e0       	ldi	r22, 0x0A	; 10
     190:	70 e0       	ldi	r23, 0x00	; 0
     192:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <__divmodhi4>
     196:	61 15       	cp	r22, r1
     198:	71 05       	cpc	r23, r1
     19a:	69 f7       	brne	.-38     	; 0x176 <doubletostr+0x42>
     19c:	80 e0       	ldi	r24, 0x00	; 0
     19e:	90 e0       	ldi	r25, 0x00	; 0
     1a0:	01 e0       	ldi	r16, 0x01	; 1
     1a2:	10 e0       	ldi	r17, 0x00	; 0
     1a4:	0c c0       	rjmp	.+24     	; 0x1be <doubletostr+0x8a>
    {
        int_exponent*=10;
    }
    for (int i=0;i<precision;i++)
    {
        frac_exponent*=10;
     1a6:	98 01       	movw	r18, r16
     1a8:	22 0f       	add	r18, r18
     1aa:	33 1f       	adc	r19, r19
     1ac:	00 0f       	add	r16, r16
     1ae:	11 1f       	adc	r17, r17
     1b0:	00 0f       	add	r16, r16
     1b2:	11 1f       	adc	r17, r17
     1b4:	00 0f       	add	r16, r16
     1b6:	11 1f       	adc	r17, r17
     1b8:	02 0f       	add	r16, r18
     1ba:	13 1f       	adc	r17, r19

    for (int temp=num/10;temp;temp/=10)
    {
        int_exponent*=10;
    }
    for (int i=0;i<precision;i++)
     1bc:	01 96       	adiw	r24, 0x01	; 1
     1be:	8e 15       	cp	r24, r14
     1c0:	9f 05       	cpc	r25, r15
     1c2:	8c f3       	brlt	.-30     	; 0x1a6 <doubletostr+0x72>
    {
        frac_exponent*=10;
    }
    long int integer=num;
     1c4:	c3 01       	movw	r24, r6
     1c6:	b2 01       	movw	r22, r4
     1c8:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <__fixsfsi>
     1cc:	4b 01       	movw	r8, r22
     1ce:	5c 01       	movw	r10, r24
    long int fraction=(num-integer)*frac_exponent;
     1d0:	0e 94 56 0e 	call	0x1cac	; 0x1cac <__floatsisf>
     1d4:	9b 01       	movw	r18, r22
     1d6:	ac 01       	movw	r20, r24
     1d8:	c3 01       	movw	r24, r6
     1da:	b2 01       	movw	r22, r4
     1dc:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <__subsf3>
     1e0:	2b 01       	movw	r4, r22
     1e2:	3c 01       	movw	r6, r24
     1e4:	b8 01       	movw	r22, r16
     1e6:	01 2e       	mov	r0, r17
     1e8:	00 0c       	add	r0, r0
     1ea:	88 0b       	sbc	r24, r24
     1ec:	99 0b       	sbc	r25, r25
     1ee:	0e 94 56 0e 	call	0x1cac	; 0x1cac <__floatsisf>
     1f2:	a3 01       	movw	r20, r6
     1f4:	92 01       	movw	r18, r4
     1f6:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <__mulsf3>
     1fa:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <__fixsfsi>
     1fe:	2b 01       	movw	r4, r22
     200:	3c 01       	movw	r6, r24
    int i=0;
    for(i=0;int_exponent;i++)
     202:	e1 2c       	mov	r14, r1
     204:	f1 2c       	mov	r15, r1
     206:	20 c0       	rjmp	.+64     	; 0x248 <doubletostr+0x114>
    {
        str[i]=((integer/int_exponent)%10)+'0';
     208:	16 01       	movw	r2, r12
     20a:	2e 0c       	add	r2, r14
     20c:	3f 1c       	adc	r3, r15
     20e:	9e 01       	movw	r18, r28
     210:	0d 2e       	mov	r0, r29
     212:	00 0c       	add	r0, r0
     214:	44 0b       	sbc	r20, r20
     216:	55 0b       	sbc	r21, r21
     218:	c5 01       	movw	r24, r10
     21a:	b4 01       	movw	r22, r8
     21c:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <__divmodsi4>
     220:	ca 01       	movw	r24, r20
     222:	b9 01       	movw	r22, r18
     224:	2a e0       	ldi	r18, 0x0A	; 10
     226:	30 e0       	ldi	r19, 0x00	; 0
     228:	40 e0       	ldi	r20, 0x00	; 0
     22a:	50 e0       	ldi	r21, 0x00	; 0
     22c:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <__divmodsi4>
     230:	60 5d       	subi	r22, 0xD0	; 208
     232:	f1 01       	movw	r30, r2
     234:	60 83       	st	Z, r22
        int_exponent/=10;
     236:	ce 01       	movw	r24, r28
     238:	6a e0       	ldi	r22, 0x0A	; 10
     23a:	70 e0       	ldi	r23, 0x00	; 0
     23c:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <__divmodhi4>
     240:	eb 01       	movw	r28, r22
        frac_exponent*=10;
    }
    long int integer=num;
    long int fraction=(num-integer)*frac_exponent;
    int i=0;
    for(i=0;int_exponent;i++)
     242:	ff ef       	ldi	r31, 0xFF	; 255
     244:	ef 1a       	sub	r14, r31
     246:	ff 0a       	sbc	r15, r31
     248:	20 97       	sbiw	r28, 0x00	; 0
     24a:	f1 f6       	brne	.-68     	; 0x208 <doubletostr+0xd4>
    {
        str[i]=((integer/int_exponent)%10)+'0';
        int_exponent/=10;
    }
    str[i++]='.';
     24c:	e7 01       	movw	r28, r14
     24e:	21 96       	adiw	r28, 0x01	; 1
     250:	f6 01       	movw	r30, r12
     252:	ee 0d       	add	r30, r14
     254:	ff 1d       	adc	r31, r15
     256:	8e e2       	ldi	r24, 0x2E	; 46
     258:	80 83       	st	Z, r24
    frac_exponent/=10;
     25a:	c8 01       	movw	r24, r16
     25c:	6a e0       	ldi	r22, 0x0A	; 10
     25e:	70 e0       	ldi	r23, 0x00	; 0
     260:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <__divmodhi4>
     264:	8b 01       	movw	r16, r22
    for(;frac_exponent;i++)
     266:	1e c0       	rjmp	.+60     	; 0x2a4 <doubletostr+0x170>
    {
        str[i]=((fraction/frac_exponent)%10)+'0';
     268:	76 01       	movw	r14, r12
     26a:	ec 0e       	add	r14, r28
     26c:	fd 1e       	adc	r15, r29
     26e:	98 01       	movw	r18, r16
     270:	01 2e       	mov	r0, r17
     272:	00 0c       	add	r0, r0
     274:	44 0b       	sbc	r20, r20
     276:	55 0b       	sbc	r21, r21
     278:	c3 01       	movw	r24, r6
     27a:	b2 01       	movw	r22, r4
     27c:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <__divmodsi4>
     280:	ca 01       	movw	r24, r20
     282:	b9 01       	movw	r22, r18
     284:	2a e0       	ldi	r18, 0x0A	; 10
     286:	30 e0       	ldi	r19, 0x00	; 0
     288:	40 e0       	ldi	r20, 0x00	; 0
     28a:	50 e0       	ldi	r21, 0x00	; 0
     28c:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <__divmodsi4>
     290:	60 5d       	subi	r22, 0xD0	; 208
     292:	f7 01       	movw	r30, r14
     294:	60 83       	st	Z, r22
        frac_exponent/=10;
     296:	c8 01       	movw	r24, r16
     298:	6a e0       	ldi	r22, 0x0A	; 10
     29a:	70 e0       	ldi	r23, 0x00	; 0
     29c:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <__divmodhi4>
     2a0:	8b 01       	movw	r16, r22
        str[i]=((integer/int_exponent)%10)+'0';
        int_exponent/=10;
    }
    str[i++]='.';
    frac_exponent/=10;
    for(;frac_exponent;i++)
     2a2:	21 96       	adiw	r28, 0x01	; 1
     2a4:	01 15       	cp	r16, r1
     2a6:	11 05       	cpc	r17, r1
     2a8:	f9 f6       	brne	.-66     	; 0x268 <doubletostr+0x134>
    {
        str[i]=((fraction/frac_exponent)%10)+'0';
        frac_exponent/=10;
    }
    str[i++]=0;
     2aa:	cc 0d       	add	r28, r12
     2ac:	dd 1d       	adc	r29, r13
     2ae:	18 82       	st	Y, r1
}
     2b0:	df 91       	pop	r29
     2b2:	cf 91       	pop	r28
     2b4:	1f 91       	pop	r17
     2b6:	0f 91       	pop	r16
     2b8:	ff 90       	pop	r15
     2ba:	ef 90       	pop	r14
     2bc:	df 90       	pop	r13
     2be:	cf 90       	pop	r12
     2c0:	bf 90       	pop	r11
     2c2:	af 90       	pop	r10
     2c4:	9f 90       	pop	r9
     2c6:	8f 90       	pop	r8
     2c8:	7f 90       	pop	r7
     2ca:	6f 90       	pop	r6
     2cc:	5f 90       	pop	r5
     2ce:	4f 90       	pop	r4
     2d0:	3f 90       	pop	r3
     2d2:	2f 90       	pop	r2
     2d4:	08 95       	ret

000002d6 <Card>:
static uint8_t gu8BTNFlag = 2;
static volatile uint8_t u8Flag = LOW;


static void Card(void)
{
     2d6:	4f 92       	push	r4
     2d8:	5f 92       	push	r5
     2da:	6f 92       	push	r6
     2dc:	7f 92       	push	r7
     2de:	8f 92       	push	r8
     2e0:	9f 92       	push	r9
     2e2:	af 92       	push	r10
     2e4:	bf 92       	push	r11
     2e6:	cf 92       	push	r12
     2e8:	df 92       	push	r13
     2ea:	ef 92       	push	r14
     2ec:	ff 92       	push	r15
     2ee:	0f 93       	push	r16
     2f0:	1f 93       	push	r17
     2f2:	cf 93       	push	r28
     2f4:	df 93       	push	r29
     2f6:	cd b7       	in	r28, 0x3d	; 61
     2f8:	de b7       	in	r29, 0x3e	; 62
     2fa:	e5 97       	sbiw	r28, 0x35	; 53
     2fc:	0f b6       	in	r0, 0x3f	; 63
     2fe:	f8 94       	cli
     300:	de bf       	out	0x3e, r29	; 62
     302:	0f be       	out	0x3f, r0	; 63
     304:	cd bf       	out	0x3d, r28	; 61
	uint8_t u8LoopIndex;
	static uint8_t u8Flag = LOW;
	static uint8_t u8CardsNo=0;

	//admin mode and button is pressed
	if(gu8BTNFlag==1)
     306:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     30a:	81 30       	cpi	r24, 0x01	; 1
     30c:	d9 f4       	brne	.+54     	; 0x344 <Card+0x6e>
	{
		/* Clearing the LCD screen */
		LCD_Clear();
     30e:	0e 94 b7 08 	call	0x116e	; 0x116e <LCD_Clear>
		/* Displaying "ADMIN MODE" on the LCD screen */
		LCD_SetCursorPosition(0, 0);
     312:	60 e0       	ldi	r22, 0x00	; 0
     314:	80 e0       	ldi	r24, 0x00	; 0
     316:	0e 94 c1 08 	call	0x1182	; 0x1182 <LCD_SetCursorPosition>
		LCD_DisplayString((uint8_t*)"Card not allowed");
     31a:	81 e6       	ldi	r24, 0x61	; 97
     31c:	90 e0       	ldi	r25, 0x00	; 0
     31e:	0e 94 e5 08 	call	0x11ca	; 0x11ca <LCD_DisplayString>
		LCD_SetCursorPosition(0, 1);
     322:	61 e0       	ldi	r22, 0x01	; 1
     324:	80 e0       	ldi	r24, 0x00	; 0
     326:	0e 94 c1 08 	call	0x1182	; 0x1182 <LCD_SetCursorPosition>
		LCD_DisplayString((uint8_t*)"in ADMIN mode");
     32a:	82 e7       	ldi	r24, 0x72	; 114
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	0e 94 e5 08 	call	0x11ca	; 0x11ca <LCD_DisplayString>
		APP_Delay();
     332:	0e 94 74 00 	call	0xe8	; 0xe8 <APP_Delay>
		/* Clearing the LCD screen */
		LCD_Clear();
     336:	0e 94 b7 08 	call	0x116e	; 0x116e <LCD_Clear>
		/* Displaying "ADMIN MODE" on the LCD screen */
		LCD_DisplayString((uint8_t*)"   ADMIN MODE");
     33a:	80 e8       	ldi	r24, 0x80	; 128
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	0e 94 e5 08 	call	0x11ca	; 0x11ca <LCD_DisplayString>
     342:	96 c1       	rjmp	.+812    	; 0x670 <__EEPROM_REGION_LENGTH__+0x270>
	}
	//user mode and button is pressed (card is inserted)
	else if(gu8BTNFlag==0)
     344:	81 11       	cpse	r24, r1
     346:	72 c1       	rjmp	.+740    	; 0x62c <__EEPROM_REGION_LENGTH__+0x22c>
	{
		gu8BTNFlag=2;
     348:	82 e0       	ldi	r24, 0x02	; 2
     34a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>

		{
			/* Clearing the SS pin to start reception */
			DIO_PinWrite(PB4, LOW);
     34e:	60 e0       	ldi	r22, 0x00	; 0
     350:	8c e0       	ldi	r24, 0x0C	; 12
     352:	0e 94 77 09 	call	0x12ee	; 0x12ee <DIO_PinWrite>
			/* Reading from the CARD slave the card data */
			SPI_receiveString(au8CardData, 15);
     356:	6f e0       	ldi	r22, 0x0F	; 15
     358:	ce 01       	movw	r24, r28
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <SPI_receiveString>
			/* Clearing the SS pin to stop reception */
			DIO_PinWrite(PB4, HIGH);
     360:	61 e0       	ldi	r22, 0x01	; 1
     362:	8c e0       	ldi	r24, 0x0C	; 12
     364:	0e 94 77 09 	call	0x12ee	; 0x12ee <DIO_PinWrite>
			EEPROM_ReadByte(0x020, &u8CardsNo);
     368:	66 e1       	ldi	r22, 0x16	; 22
     36a:	73 e0       	ldi	r23, 0x03	; 3
     36c:	80 e2       	ldi	r24, 0x20	; 32
     36e:	90 e0       	ldi	r25, 0x00	; 0
     370:	0e 94 ad 05 	call	0xb5a	; 0xb5a <EEPROM_ReadByte>
			/**/
			for(u8LoopIndex = 0; u8LoopIndex < u8CardsNo; u8LoopIndex++)
     374:	10 e0       	ldi	r17, 0x00	; 0
     376:	35 c0       	rjmp	.+106    	; 0x3e2 <Card+0x10c>
			{

				/* Reading the stored PAN from EEPROM */
				EEPROM_ReadString(0x100 + (0x10 * u8LoopIndex), 9, au8PAN);
     378:	81 2f       	mov	r24, r17
     37a:	90 e0       	ldi	r25, 0x00	; 0
     37c:	40 96       	adiw	r24, 0x10	; 16
     37e:	ae 01       	movw	r20, r28
     380:	4f 5e       	subi	r20, 0xEF	; 239
     382:	5f 4f       	sbci	r21, 0xFF	; 255
     384:	69 e0       	ldi	r22, 0x09	; 9
     386:	70 e0       	ldi	r23, 0x00	; 0
     388:	82 95       	swap	r24
     38a:	92 95       	swap	r25
     38c:	90 7f       	andi	r25, 0xF0	; 240
     38e:	98 27       	eor	r25, r24
     390:	80 7f       	andi	r24, 0xF0	; 240
     392:	98 27       	eor	r25, r24
     394:	0e 94 0f 06 	call	0xc1e	; 0xc1e <EEPROM_ReadString>
				/* Checking if the PAN of the card is similar to the stored PAN in EEPROM */
				if((au8CardData[0] == au8PAN[0]) && (au8CardData[1] == au8PAN[1]) && (au8CardData[2] == au8PAN[2]) &&
     398:	99 81       	ldd	r25, Y+1	; 0x01
     39a:	89 89       	ldd	r24, Y+17	; 0x11
     39c:	98 13       	cpse	r25, r24
     39e:	20 c0       	rjmp	.+64     	; 0x3e0 <Card+0x10a>
     3a0:	9a 81       	ldd	r25, Y+2	; 0x02
     3a2:	8a 89       	ldd	r24, Y+18	; 0x12
     3a4:	98 13       	cpse	r25, r24
     3a6:	1c c0       	rjmp	.+56     	; 0x3e0 <Card+0x10a>
     3a8:	9b 81       	ldd	r25, Y+3	; 0x03
     3aa:	8b 89       	ldd	r24, Y+19	; 0x13
     3ac:	98 13       	cpse	r25, r24
     3ae:	18 c0       	rjmp	.+48     	; 0x3e0 <Card+0x10a>
				   (au8CardData[3] == au8PAN[3]) && (au8CardData[4] == au8PAN[4]) && (au8CardData[5] == au8PAN[5]) &&
     3b0:	9c 81       	ldd	r25, Y+4	; 0x04
     3b2:	8c 89       	ldd	r24, Y+20	; 0x14
			{

				/* Reading the stored PAN from EEPROM */
				EEPROM_ReadString(0x100 + (0x10 * u8LoopIndex), 9, au8PAN);
				/* Checking if the PAN of the card is similar to the stored PAN in EEPROM */
				if((au8CardData[0] == au8PAN[0]) && (au8CardData[1] == au8PAN[1]) && (au8CardData[2] == au8PAN[2]) &&
     3b4:	98 13       	cpse	r25, r24
     3b6:	14 c0       	rjmp	.+40     	; 0x3e0 <Card+0x10a>
				   (au8CardData[3] == au8PAN[3]) && (au8CardData[4] == au8PAN[4]) && (au8CardData[5] == au8PAN[5]) &&
     3b8:	9d 81       	ldd	r25, Y+5	; 0x05
     3ba:	8d 89       	ldd	r24, Y+21	; 0x15
     3bc:	98 13       	cpse	r25, r24
     3be:	10 c0       	rjmp	.+32     	; 0x3e0 <Card+0x10a>
     3c0:	9e 81       	ldd	r25, Y+6	; 0x06
     3c2:	8e 89       	ldd	r24, Y+22	; 0x16
     3c4:	98 13       	cpse	r25, r24
     3c6:	0c c0       	rjmp	.+24     	; 0x3e0 <Card+0x10a>
				   (au8CardData[6] == au8PAN[6]) && (au8CardData[7] == au8PAN[7]) && (au8CardData[8] == au8PAN[8]))
     3c8:	9f 81       	ldd	r25, Y+7	; 0x07
     3ca:	8f 89       	ldd	r24, Y+23	; 0x17

				/* Reading the stored PAN from EEPROM */
				EEPROM_ReadString(0x100 + (0x10 * u8LoopIndex), 9, au8PAN);
				/* Checking if the PAN of the card is similar to the stored PAN in EEPROM */
				if((au8CardData[0] == au8PAN[0]) && (au8CardData[1] == au8PAN[1]) && (au8CardData[2] == au8PAN[2]) &&
				   (au8CardData[3] == au8PAN[3]) && (au8CardData[4] == au8PAN[4]) && (au8CardData[5] == au8PAN[5]) &&
     3cc:	98 13       	cpse	r25, r24
     3ce:	08 c0       	rjmp	.+16     	; 0x3e0 <Card+0x10a>
				   (au8CardData[6] == au8PAN[6]) && (au8CardData[7] == au8PAN[7]) && (au8CardData[8] == au8PAN[8]))
     3d0:	98 85       	ldd	r25, Y+8	; 0x08
     3d2:	88 8d       	ldd	r24, Y+24	; 0x18
     3d4:	98 13       	cpse	r25, r24
     3d6:	04 c0       	rjmp	.+8      	; 0x3e0 <Card+0x10a>
     3d8:	99 85       	ldd	r25, Y+9	; 0x09
     3da:	89 8d       	ldd	r24, Y+25	; 0x19
     3dc:	98 17       	cp	r25, r24
     3de:	29 f0       	breq	.+10     	; 0x3ea <Card+0x114>
			SPI_receiveString(au8CardData, 15);
			/* Clearing the SS pin to stop reception */
			DIO_PinWrite(PB4, HIGH);
			EEPROM_ReadByte(0x020, &u8CardsNo);
			/**/
			for(u8LoopIndex = 0; u8LoopIndex < u8CardsNo; u8LoopIndex++)
     3e0:	1f 5f       	subi	r17, 0xFF	; 255
     3e2:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <u8CardsNo.2081>
     3e6:	18 17       	cp	r17, r24
     3e8:	38 f2       	brcs	.-114    	; 0x378 <Card+0xa2>
				else
				{
				}
			}
			/* Checking if the card is present or not */
			if(u8LoopIndex < u8CardsNo)
     3ea:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <u8CardsNo.2081>
     3ee:	18 17       	cp	r17, r24
     3f0:	08 f0       	brcs	.+2      	; 0x3f4 <Card+0x11e>
     3f2:	07 c1       	rjmp	.+526    	; 0x602 <__EEPROM_REGION_LENGTH__+0x202>
			{
			/**/
				/* Clearing the LCD screen */
				LCD_Clear();
     3f4:	0e 94 b7 08 	call	0x116e	; 0x116e <LCD_Clear>
				/* Displaying "Enter PIN:" on the LCD screen */
				LCD_DisplayString((uint8_t*)"Enter PIN:");
     3f8:	8e e8       	ldi	r24, 0x8E	; 142
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	0e 94 e5 08 	call	0x11ca	; 0x11ca <LCD_DisplayString>
				/* Setting the position of the cursor at the second row of the LCD screen */
				LCD_SetCursorPosition(0, 1);
     400:	61 e0       	ldi	r22, 0x01	; 1
     402:	80 e0       	ldi	r24, 0x00	; 0
     404:	0e 94 c1 08 	call	0x1182	; 0x1182 <LCD_SetCursorPosition>
				/* Getting the first PIN value from the keypad */
				Keypad_GetChar(&au8KeypadPIN[0]);
     408:	ce 01       	movw	r24, r28
     40a:	c2 96       	adiw	r24, 0x32	; 50
     40c:	0e 94 cc 06 	call	0xd98	; 0xd98 <Keypad_GetChar>
				/* Displaying '*' on the LCD screen */
				LCD_DisplayChar('*');
     410:	8a e2       	ldi	r24, 0x2A	; 42
     412:	0e 94 db 08 	call	0x11b6	; 0x11b6 <LCD_DisplayChar>
				/* Getting the second PIN value from the keypad */
				Keypad_GetChar(&au8KeypadPIN[1]);
     416:	ce 01       	movw	r24, r28
     418:	c3 96       	adiw	r24, 0x33	; 51
     41a:	0e 94 cc 06 	call	0xd98	; 0xd98 <Keypad_GetChar>
				/* Displaying '*' on the LCD screen */
				LCD_DisplayChar('*');
     41e:	8a e2       	ldi	r24, 0x2A	; 42
     420:	0e 94 db 08 	call	0x11b6	; 0x11b6 <LCD_DisplayChar>
				/* Getting the third PIN value from the keypad */
				Keypad_GetChar(&au8KeypadPIN[2]);
     424:	ce 01       	movw	r24, r28
     426:	c4 96       	adiw	r24, 0x34	; 52
     428:	0e 94 cc 06 	call	0xd98	; 0xd98 <Keypad_GetChar>
				/* Displaying '*' on the LCD screen */
				LCD_DisplayChar('*');
     42c:	8a e2       	ldi	r24, 0x2A	; 42
     42e:	0e 94 db 08 	call	0x11b6	; 0x11b6 <LCD_DisplayChar>
				/* Getting the forth PIN value from the keypad */
				Keypad_GetChar(&au8KeypadPIN[3]);
     432:	ce 01       	movw	r24, r28
     434:	c5 96       	adiw	r24, 0x35	; 53
     436:	0e 94 cc 06 	call	0xd98	; 0xd98 <Keypad_GetChar>
				/* Displaying '*' on the LCD screen */
				LCD_DisplayChar('*');
     43a:	8a e2       	ldi	r24, 0x2A	; 42
     43c:	0e 94 db 08 	call	0x11b6	; 0x11b6 <LCD_DisplayChar>
				/* Checking if the PIN of the card is similar to the entered PIN from the keypad */
				if((au8CardData[10] == au8KeypadPIN[0]) && (au8CardData[11] == au8KeypadPIN[1]) &&
     440:	9b 85       	ldd	r25, Y+11	; 0x0b
     442:	8a a9       	ldd	r24, Y+50	; 0x32
     444:	98 13       	cpse	r25, r24
     446:	cc c0       	rjmp	.+408    	; 0x5e0 <__EEPROM_REGION_LENGTH__+0x1e0>
     448:	9c 85       	ldd	r25, Y+12	; 0x0c
     44a:	8b a9       	ldd	r24, Y+51	; 0x33
     44c:	98 13       	cpse	r25, r24
     44e:	c8 c0       	rjmp	.+400    	; 0x5e0 <__EEPROM_REGION_LENGTH__+0x1e0>
				   (au8CardData[12] == au8KeypadPIN[2]) && (au8CardData[13] == au8KeypadPIN[3]))
     450:	9d 85       	ldd	r25, Y+13	; 0x0d
     452:	8c a9       	ldd	r24, Y+52	; 0x34
				/* Getting the forth PIN value from the keypad */
				Keypad_GetChar(&au8KeypadPIN[3]);
				/* Displaying '*' on the LCD screen */
				LCD_DisplayChar('*');
				/* Checking if the PIN of the card is similar to the entered PIN from the keypad */
				if((au8CardData[10] == au8KeypadPIN[0]) && (au8CardData[11] == au8KeypadPIN[1]) &&
     454:	98 13       	cpse	r25, r24
     456:	c4 c0       	rjmp	.+392    	; 0x5e0 <__EEPROM_REGION_LENGTH__+0x1e0>
				   (au8CardData[12] == au8KeypadPIN[2]) && (au8CardData[13] == au8KeypadPIN[3]))
     458:	9e 85       	ldd	r25, Y+14	; 0x0e
     45a:	8d a9       	ldd	r24, Y+53	; 0x35
     45c:	98 13       	cpse	r25, r24
     45e:	c0 c0       	rjmp	.+384    	; 0x5e0 <__EEPROM_REGION_LENGTH__+0x1e0>
				{
					/* Clearing the LCD screen */
					LCD_Clear();
     460:	0e 94 b7 08 	call	0x116e	; 0x116e <LCD_Clear>
					/* Displaying "Enter amount:" on the LCD screen */
					LCD_DisplayString((uint8_t*)"Enter amount:");
     464:	89 e9       	ldi	r24, 0x99	; 153
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	0e 94 e5 08 	call	0x11ca	; 0x11ca <LCD_DisplayString>
					/* Setting the position of the cursor at the second row of the LCD screen */
					LCD_SetCursorPosition(0, 1);
     46c:	61 e0       	ldi	r22, 0x01	; 1
     46e:	80 e0       	ldi	r24, 0x00	; 0
     470:	0e 94 c1 08 	call	0x1182	; 0x1182 <LCD_SetCursorPosition>
					/* Getting the thousands amount value from the keypad */
					Keypad_GetChar(&au8KeypadAmount[0]);
     474:	ce 01       	movw	r24, r28
     476:	8b 96       	adiw	r24, 0x2b	; 43
     478:	0e 94 cc 06 	call	0xd98	; 0xd98 <Keypad_GetChar>
					/* Displaying the thousands amount value on the LCD screen */
					LCD_DisplayChar(au8KeypadAmount[0]);
     47c:	8b a5       	ldd	r24, Y+43	; 0x2b
     47e:	0e 94 db 08 	call	0x11b6	; 0x11b6 <LCD_DisplayChar>
					/* Getting the hundreds amount value from the keypad */
					Keypad_GetChar(&au8KeypadAmount[1]);
     482:	ce 01       	movw	r24, r28
     484:	8c 96       	adiw	r24, 0x2c	; 44
     486:	0e 94 cc 06 	call	0xd98	; 0xd98 <Keypad_GetChar>
					/* Displaying the hundreds amount value on the LCD screen */
					LCD_DisplayChar(au8KeypadAmount[1]);
     48a:	8c a5       	ldd	r24, Y+44	; 0x2c
     48c:	0e 94 db 08 	call	0x11b6	; 0x11b6 <LCD_DisplayChar>
					/* Getting the tens amount value from the keypad */
					Keypad_GetChar(&au8KeypadAmount[2]);
     490:	ce 01       	movw	r24, r28
     492:	8d 96       	adiw	r24, 0x2d	; 45
     494:	0e 94 cc 06 	call	0xd98	; 0xd98 <Keypad_GetChar>
					/* Displaying the tens amount value on the LCD screen */
					LCD_DisplayChar(au8KeypadAmount[2]);
     498:	8d a5       	ldd	r24, Y+45	; 0x2d
     49a:	0e 94 db 08 	call	0x11b6	; 0x11b6 <LCD_DisplayChar>
					/* Getting the units amount value from the keypad */
					Keypad_GetChar(&au8KeypadAmount[3]);
     49e:	ce 01       	movw	r24, r28
     4a0:	8e 96       	adiw	r24, 0x2e	; 46
     4a2:	0e 94 cc 06 	call	0xd98	; 0xd98 <Keypad_GetChar>
					/* Displaying the units amount value on the LCD screen */
					LCD_DisplayChar(au8KeypadAmount[3]);
     4a6:	8e a5       	ldd	r24, Y+46	; 0x2e
     4a8:	0e 94 db 08 	call	0x11b6	; 0x11b6 <LCD_DisplayChar>
					/* Displaying the decimal point of amount value on the LCD screen */
					au8KeypadAmount[4]='.';
     4ac:	8e e2       	ldi	r24, 0x2E	; 46
     4ae:	8f a7       	std	Y+47, r24	; 0x2f
					/* Displaying the decimal point on the LCD screen */
					LCD_DisplayChar(au8KeypadAmount[4]);
     4b0:	0e 94 db 08 	call	0x11b6	; 0x11b6 <LCD_DisplayChar>
					/* Getting the tenths amount value from the keypad */
					Keypad_GetChar(&au8KeypadAmount[5]);
     4b4:	ce 01       	movw	r24, r28
     4b6:	c0 96       	adiw	r24, 0x30	; 48
     4b8:	0e 94 cc 06 	call	0xd98	; 0xd98 <Keypad_GetChar>
					/* Displaying the tenths amount value on the LCD screen */
					LCD_DisplayChar(au8KeypadAmount[5]);
     4bc:	88 a9       	ldd	r24, Y+48	; 0x30
     4be:	0e 94 db 08 	call	0x11b6	; 0x11b6 <LCD_DisplayChar>
					/* Getting the hundredths amount value from the keypad */
					Keypad_GetChar(&au8KeypadAmount[6]);
     4c2:	ce 01       	movw	r24, r28
     4c4:	c1 96       	adiw	r24, 0x31	; 49
     4c6:	0e 94 cc 06 	call	0xd98	; 0xd98 <Keypad_GetChar>
					/* Displaying the hundredths amount value on the LCD screen */
					LCD_DisplayChar(au8KeypadAmount[6]);
     4ca:	89 a9       	ldd	r24, Y+49	; 0x31
     4cc:	0e 94 db 08 	call	0x11b6	; 0x11b6 <LCD_DisplayChar>
					/* Converting the entered amount value from ASCII characters to double */
					dKeypadAmount = atof((char*)au8KeypadAmount);
     4d0:	ce 01       	movw	r24, r28
     4d2:	8b 96       	adiw	r24, 0x2b	; 43
     4d4:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <atof>
     4d8:	4b 01       	movw	r8, r22
     4da:	5c 01       	movw	r10, r24
					/* Reading the stored maximum amount value from EEPROM */
					EEPROM_ReadString(APP_EEPROM_MAX_AMOUNT_ADDRESS, 7, au8MaxAmount);
     4dc:	ae 01       	movw	r20, r28
     4de:	4d 5d       	subi	r20, 0xDD	; 221
     4e0:	5f 4f       	sbci	r21, 0xFF	; 255
     4e2:	67 e0       	ldi	r22, 0x07	; 7
     4e4:	70 e0       	ldi	r23, 0x00	; 0
     4e6:	80 e3       	ldi	r24, 0x30	; 48
     4e8:	90 e0       	ldi	r25, 0x00	; 0
     4ea:	0e 94 0f 06 	call	0xc1e	; 0xc1e <EEPROM_ReadString>
					/* Converting the stored maximum amount value from ASCII characters to double */
					dMaxAmount = atof((char*)au8MaxAmount);
     4ee:	ce 01       	movw	r24, r28
     4f0:	83 96       	adiw	r24, 0x23	; 35
     4f2:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <atof>
     4f6:	2b 01       	movw	r4, r22
     4f8:	3c 01       	movw	r6, r24
					/* Reading the stored balance value from EEPROM */
					EEPROM_ReadString(0x500 + (0x10 * u8LoopIndex), 7, au8Balance);
     4fa:	81 2f       	mov	r24, r17
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	80 5b       	subi	r24, 0xB0	; 176
     500:	9f 4f       	sbci	r25, 0xFF	; 255
     502:	8c 01       	movw	r16, r24
     504:	02 95       	swap	r16
     506:	12 95       	swap	r17
     508:	10 7f       	andi	r17, 0xF0	; 240
     50a:	10 27       	eor	r17, r16
     50c:	00 7f       	andi	r16, 0xF0	; 240
     50e:	10 27       	eor	r17, r16
     510:	ae 01       	movw	r20, r28
     512:	45 5e       	subi	r20, 0xE5	; 229
     514:	5f 4f       	sbci	r21, 0xFF	; 255
     516:	67 e0       	ldi	r22, 0x07	; 7
     518:	70 e0       	ldi	r23, 0x00	; 0
     51a:	c8 01       	movw	r24, r16
     51c:	0e 94 0f 06 	call	0xc1e	; 0xc1e <EEPROM_ReadString>
					/* Converting the stored balance value from ASCII characters to double */
					dBalance = atof((char*)au8Balance);
     520:	ce 01       	movw	r24, r28
     522:	4b 96       	adiw	r24, 0x1b	; 27
     524:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <atof>
     528:	6b 01       	movw	r12, r22
     52a:	7c 01       	movw	r14, r24
					/* Clearing the LCD screen */
					LCD_Clear();
     52c:	0e 94 b7 08 	call	0x116e	; 0x116e <LCD_Clear>
					/* Checking if the entered amount is greater than the stored maximum amount */
					if(dKeypadAmount > dMaxAmount)
     530:	a3 01       	movw	r20, r6
     532:	92 01       	movw	r18, r4
     534:	c5 01       	movw	r24, r10
     536:	b4 01       	movw	r22, r8
     538:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <__gesf2>
     53c:	18 16       	cp	r1, r24
     53e:	7c f4       	brge	.+30     	; 0x55e <__EEPROM_REGION_LENGTH__+0x15e>
					{
						/* Displaying "Maximum Amount" on the LCD screen */
						LCD_DisplayString((uint8_t*)" Maximum Amount");
     540:	87 ea       	ldi	r24, 0xA7	; 167
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	0e 94 e5 08 	call	0x11ca	; 0x11ca <LCD_DisplayString>
						/* Setting the position of the cursor at the second row of the LCD screen */
						LCD_SetCursorPosition(0, 1);
     548:	61 e0       	ldi	r22, 0x01	; 1
     54a:	80 e0       	ldi	r24, 0x00	; 0
     54c:	0e 94 c1 08 	call	0x1182	; 0x1182 <LCD_SetCursorPosition>
						/* Displaying "Exceeded" on the LCD screen */
						LCD_DisplayString((uint8_t*)"    Exceeded");
     550:	87 eb       	ldi	r24, 0xB7	; 183
     552:	90 e0       	ldi	r25, 0x00	; 0
     554:	0e 94 e5 08 	call	0x11ca	; 0x11ca <LCD_DisplayString>
						/* Giving a sufficient time delay to show the message on the LCD screen */
						APP_Delay();
     558:	0e 94 74 00 	call	0xe8	; 0xe8 <APP_Delay>
     55c:	89 c0       	rjmp	.+274    	; 0x670 <__EEPROM_REGION_LENGTH__+0x270>
						u8Flag = LOW;
					}
					/* Checking if the entered amount is greater than the stored balance */
					else if(dKeypadAmount > dBalance)
     55e:	a7 01       	movw	r20, r14
     560:	96 01       	movw	r18, r12
     562:	c5 01       	movw	r24, r10
     564:	b4 01       	movw	r22, r8
     566:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <__gesf2>
     56a:	18 16       	cp	r1, r24
     56c:	7c f4       	brge	.+30     	; 0x58c <__EEPROM_REGION_LENGTH__+0x18c>
					{
						/* Displaying "Insufficient" on the LCD screen */
						LCD_DisplayString((uint8_t*)"  Insufficient");
     56e:	84 ec       	ldi	r24, 0xC4	; 196
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	0e 94 e5 08 	call	0x11ca	; 0x11ca <LCD_DisplayString>
						/* Setting the position of the cursor at the second row of the LCD screen */
						LCD_SetCursorPosition(0, 1);
     576:	61 e0       	ldi	r22, 0x01	; 1
     578:	80 e0       	ldi	r24, 0x00	; 0
     57a:	0e 94 c1 08 	call	0x1182	; 0x1182 <LCD_SetCursorPosition>
						/* Displaying "Fund" on the LCD screen */
						LCD_DisplayString((uint8_t*)"      Fund");
     57e:	83 ed       	ldi	r24, 0xD3	; 211
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	0e 94 e5 08 	call	0x11ca	; 0x11ca <LCD_DisplayString>
						/* Giving a sufficient time delay to show the message on the LCD screen */
						APP_Delay();
     586:	0e 94 74 00 	call	0xe8	; 0xe8 <APP_Delay>
     58a:	72 c0       	rjmp	.+228    	; 0x670 <__EEPROM_REGION_LENGTH__+0x270>
						u8Flag = LOW;
					}
					else
					{
						/* Displaying "Transaction" on the LCD screen */
						LCD_DisplayString((uint8_t*)"  Transaction");
     58c:	8e ed       	ldi	r24, 0xDE	; 222
     58e:	90 e0       	ldi	r25, 0x00	; 0
     590:	0e 94 e5 08 	call	0x11ca	; 0x11ca <LCD_DisplayString>
						/* Setting the position of the cursor at the second row of the LCD screen */
						LCD_SetCursorPosition(0, 1);
     594:	61 e0       	ldi	r22, 0x01	; 1
     596:	80 e0       	ldi	r24, 0x00	; 0
     598:	0e 94 c1 08 	call	0x1182	; 0x1182 <LCD_SetCursorPosition>
						/* Displaying "APPROVED" on the LCD screen */
						LCD_DisplayString((uint8_t*)"    Approved");
     59c:	8c ee       	ldi	r24, 0xEC	; 236
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	0e 94 e5 08 	call	0x11ca	; 0x11ca <LCD_DisplayString>
						/* Subtracting the withdrawn money after the transaction has successfully completed */
						dBalance -= dKeypadAmount;
     5a4:	a5 01       	movw	r20, r10
     5a6:	94 01       	movw	r18, r8
     5a8:	c7 01       	movw	r24, r14
     5aa:	b6 01       	movw	r22, r12
     5ac:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <__subsf3>
						/* Converting the balance from double to ASCII characters */
						doubletostr(dBalance, (char*)au8Balance, 2);
     5b0:	22 e0       	ldi	r18, 0x02	; 2
     5b2:	30 e0       	ldi	r19, 0x00	; 0
     5b4:	ae 01       	movw	r20, r28
     5b6:	45 5e       	subi	r20, 0xE5	; 229
     5b8:	5f 4f       	sbci	r21, 0xFF	; 255
     5ba:	0e 94 9a 00 	call	0x134	; 0x134 <doubletostr>
						/* Writing the balance inside the EEPROM */
						EEPROM_WriteString(APP_EEPROM_BALANCE_ADDRESS(u8LoopIndex), 9, au8Balance);
     5be:	ae 01       	movw	r20, r28
     5c0:	45 5e       	subi	r20, 0xE5	; 229
     5c2:	5f 4f       	sbci	r21, 0xFF	; 255
     5c4:	69 e0       	ldi	r22, 0x09	; 9
     5c6:	70 e0       	ldi	r23, 0x00	; 0
     5c8:	c8 01       	movw	r24, r16
     5ca:	0e 94 d1 05 	call	0xba2	; 0xba2 <EEPROM_WriteString>
						/* Starting the DC fan to run */
						DCFan_Start(PB1);
     5ce:	89 e0       	ldi	r24, 0x09	; 9
     5d0:	0e 94 72 05 	call	0xae4	; 0xae4 <DCFan_Start>
						/* Giving a sufficient time delay to make the DC fan run */
						APP_Delay();
     5d4:	0e 94 74 00 	call	0xe8	; 0xe8 <APP_Delay>
						/* Stopping the DC Fan */
						DCFan_Stop(PB1);
     5d8:	89 e0       	ldi	r24, 0x09	; 9
     5da:	0e 94 80 05 	call	0xb00	; 0xb00 <DCFan_Stop>
     5de:	48 c0       	rjmp	.+144    	; 0x670 <__EEPROM_REGION_LENGTH__+0x270>
					}
				}
				else
				{
					/* Clearing the LCD screen */
					LCD_Clear();
     5e0:	0e 94 b7 08 	call	0x116e	; 0x116e <LCD_Clear>
					/* Displaying "Incorrect PIN" on the LCD screen */
					LCD_DisplayString((uint8_t*)" Incorrect PIN");
     5e4:	89 ef       	ldi	r24, 0xF9	; 249
     5e6:	90 e0       	ldi	r25, 0x00	; 0
     5e8:	0e 94 e5 08 	call	0x11ca	; 0x11ca <LCD_DisplayString>
					/* Setting the position of the cursor at the second row of the LCD screen */
					LCD_SetCursorPosition(0, 1);
     5ec:	61 e0       	ldi	r22, 0x01	; 1
     5ee:	80 e0       	ldi	r24, 0x00	; 0
     5f0:	0e 94 c1 08 	call	0x1182	; 0x1182 <LCD_SetCursorPosition>
					/* Displaying "Card is ejected" on the LCD screen */
					LCD_DisplayString((uint8_t*)"Card is ejected");
     5f4:	88 e0       	ldi	r24, 0x08	; 8
     5f6:	91 e0       	ldi	r25, 0x01	; 1
     5f8:	0e 94 e5 08 	call	0x11ca	; 0x11ca <LCD_DisplayString>
					/* Giving a sufficient time delay to show the message on the LCD screen */
					APP_Delay();
     5fc:	0e 94 74 00 	call	0xe8	; 0xe8 <APP_Delay>
     600:	37 c0       	rjmp	.+110    	; 0x670 <__EEPROM_REGION_LENGTH__+0x270>
					u8Flag = LOW;
				}
			}
			else if (gu8BTNFlag==2)
     602:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     606:	82 30       	cpi	r24, 0x02	; 2
     608:	99 f5       	brne	.+102    	; 0x670 <__EEPROM_REGION_LENGTH__+0x270>
			{
				/* Clearing the LCD screen */
				LCD_Clear();
     60a:	0e 94 b7 08 	call	0x116e	; 0x116e <LCD_Clear>
				/* Displaying "Invalid Card" on the LCD screen */
				LCD_DisplayString((uint8_t*)"  Invalid Card");
     60e:	88 e1       	ldi	r24, 0x18	; 24
     610:	91 e0       	ldi	r25, 0x01	; 1
     612:	0e 94 e5 08 	call	0x11ca	; 0x11ca <LCD_DisplayString>
				/* Setting the position of the cursor at the second row of the LCD screen */
				LCD_SetCursorPosition(0, 1);
     616:	61 e0       	ldi	r22, 0x01	; 1
     618:	80 e0       	ldi	r24, 0x00	; 0
     61a:	0e 94 c1 08 	call	0x1182	; 0x1182 <LCD_SetCursorPosition>
				/* Displaying "Card is ejected" on the LCD screen */
				LCD_DisplayString((uint8_t*)"Card is ejected");
     61e:	88 e0       	ldi	r24, 0x08	; 8
     620:	91 e0       	ldi	r25, 0x01	; 1
     622:	0e 94 e5 08 	call	0x11ca	; 0x11ca <LCD_DisplayString>
				/* Giving a sufficient time delay to show the message on the LCD screen */
				APP_Delay();
     626:	0e 94 74 00 	call	0xe8	; 0xe8 <APP_Delay>
     62a:	22 c0       	rjmp	.+68     	; 0x670 <__EEPROM_REGION_LENGTH__+0x270>
	}
	//in case no mode is entered and button pressed
	else
	{
		/* Clearing the LCD screen */
		LCD_Clear();
     62c:	0e 94 b7 08 	call	0x116e	; 0x116e <LCD_Clear>
		LCD_SetCursorPosition(0, 0);
     630:	60 e0       	ldi	r22, 0x00	; 0
     632:	80 e0       	ldi	r24, 0x00	; 0
     634:	0e 94 c1 08 	call	0x1182	; 0x1182 <LCD_SetCursorPosition>
		LCD_DisplayString((uint8_t*)"Card ejected");
     638:	87 e2       	ldi	r24, 0x27	; 39
     63a:	91 e0       	ldi	r25, 0x01	; 1
     63c:	0e 94 e5 08 	call	0x11ca	; 0x11ca <LCD_DisplayString>
		LCD_SetCursorPosition(0, 1);
     640:	61 e0       	ldi	r22, 0x01	; 1
     642:	80 e0       	ldi	r24, 0x00	; 0
     644:	0e 94 c1 08 	call	0x1182	; 0x1182 <LCD_SetCursorPosition>
		LCD_DisplayString((uint8_t*)"Pls choose mode");
     648:	84 e3       	ldi	r24, 0x34	; 52
     64a:	91 e0       	ldi	r25, 0x01	; 1
     64c:	0e 94 e5 08 	call	0x11ca	; 0x11ca <LCD_DisplayString>
		APP_Delay();
     650:	0e 94 74 00 	call	0xe8	; 0xe8 <APP_Delay>
		/* Clearing the LCD screen */
		LCD_Clear();
     654:	0e 94 b7 08 	call	0x116e	; 0x116e <LCD_Clear>
		/* Displaying "Welcome to" on the LCD screen */
		LCD_DisplayString((uint8_t*)"   Welcome to");
     658:	84 e4       	ldi	r24, 0x44	; 68
     65a:	91 e0       	ldi	r25, 0x01	; 1
     65c:	0e 94 e5 08 	call	0x11ca	; 0x11ca <LCD_DisplayString>
		/* Setting the position of the cursor at the second row of the LCD screen */
		LCD_SetCursorPosition(0, 1);
     660:	61 e0       	ldi	r22, 0x01	; 1
     662:	80 e0       	ldi	r24, 0x00	; 0
     664:	0e 94 c1 08 	call	0x1182	; 0x1182 <LCD_SetCursorPosition>
		/* Displaying "ATM System" on the LCD screen */
		LCD_DisplayString((uint8_t*)"   ATM System");
     668:	82 e5       	ldi	r24, 0x52	; 82
     66a:	91 e0       	ldi	r25, 0x01	; 1
     66c:	0e 94 e5 08 	call	0x11ca	; 0x11ca <LCD_DisplayString>
	}
}
     670:	e5 96       	adiw	r28, 0x35	; 53
     672:	0f b6       	in	r0, 0x3f	; 63
     674:	f8 94       	cli
     676:	de bf       	out	0x3e, r29	; 62
     678:	0f be       	out	0x3f, r0	; 63
     67a:	cd bf       	out	0x3d, r28	; 61
     67c:	df 91       	pop	r29
     67e:	cf 91       	pop	r28
     680:	1f 91       	pop	r17
     682:	0f 91       	pop	r16
     684:	ff 90       	pop	r15
     686:	ef 90       	pop	r14
     688:	df 90       	pop	r13
     68a:	cf 90       	pop	r12
     68c:	bf 90       	pop	r11
     68e:	af 90       	pop	r10
     690:	9f 90       	pop	r9
     692:	8f 90       	pop	r8
     694:	7f 90       	pop	r7
     696:	6f 90       	pop	r6
     698:	5f 90       	pop	r5
     69a:	4f 90       	pop	r4
     69c:	08 95       	ret

0000069e <APP_Init>:
* Description     : A function to initialize the application
*************************************************************************************************/
void APP_Init(void)
{
	/* Initializing the UART MCAL driver */
	UART_Init();
     69e:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <UART_Init>
	/* Initializing the SPI MCAL driver */
	SPI_init();
     6a2:	0e 94 39 0c 	call	0x1872	; 0x1872 <SPI_init>
	/* Initializing the LCD ECUAL driver */
	LCD_Init(LCD_DATA_FOUR_BIT_MODE, LCD_CURSOR_OFF);
     6a6:	60 e0       	ldi	r22, 0x00	; 0
     6a8:	84 e0       	ldi	r24, 0x04	; 4
     6aa:	0e 94 57 08 	call	0x10ae	; 0x10ae <LCD_Init>
	/* Initializing the Keypad ECUAL driver */
	Keypad_Init(KEYPAD_4X3);
     6ae:	81 e0       	ldi	r24, 0x01	; 1
     6b0:	0e 94 93 06 	call	0xd26	; 0xd26 <Keypad_Init>
	/* Initializing the Button ECUAL driver */
	Button_Init(PB2, BUTTON_ACTIVE_HIGH);
     6b4:	60 e0       	ldi	r22, 0x00	; 0
     6b6:	8a e0       	ldi	r24, 0x0A	; 10
     6b8:	0e 94 22 05 	call	0xa44	; 0xa44 <Button_Init>
	/* Initializing the DC Fan ECUAL driver */
	DCFan_Init(PB1);
     6bc:	89 e0       	ldi	r24, 0x09	; 9
     6be:	0e 94 60 05 	call	0xac0	; 0xac0 <DCFan_Init>
	/* Initializing the LM35 ECUAL driver */
	LM35_Init();
     6c2:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <LM35_Init>
	/* Initializing the EEPROM ECUAL driver */
	EEPROM_Init();
     6c6:	0e 94 8e 05 	call	0xb1c	; 0xb1c <EEPROM_Init>
	/* Initializing the EXT interrupt MCUAL driver */
	EXTINT_Init(EXTINT_INT2);
     6ca:	82 e0       	ldi	r24, 0x02	; 2
     6cc:	0e 94 2e 0a 	call	0x145c	; 0x145c <EXTINT_Init>
	EXTINT_SetSenseMode(EXT_RAISING_MODE, EXTINT_INT2);
     6d0:	62 e0       	ldi	r22, 0x02	; 2
     6d2:	83 e0       	ldi	r24, 0x03	; 3
     6d4:	0e 94 44 0a 	call	0x1488	; 0x1488 <EXTINT_SetSenseMode>

	/* Setting the SS pin to stop any incoming transmission/reception process */
	DIO_PinWrite(PB4, HIGH);
     6d8:	61 e0       	ldi	r22, 0x01	; 1
     6da:	8c e0       	ldi	r24, 0x0C	; 12
     6dc:	0e 94 77 09 	call	0x12ee	; 0x12ee <DIO_PinWrite>
	/* Writing "admin" inside the EEPROM */
	EEPROM_WriteString(APP_EEPROM_ADMIN_PASSWORD_ADDRESS, 5, (uint8_t*)"admin");
     6e0:	40 e6       	ldi	r20, 0x60	; 96
     6e2:	51 e0       	ldi	r21, 0x01	; 1
     6e4:	65 e0       	ldi	r22, 0x05	; 5
     6e6:	70 e0       	ldi	r23, 0x00	; 0
     6e8:	80 e1       	ldi	r24, 0x10	; 16
     6ea:	90 e0       	ldi	r25, 0x00	; 0
     6ec:	0e 94 d1 05 	call	0xba2	; 0xba2 <EEPROM_WriteString>

	/* Setting callBack function for the EXT interrupt MCUAL driver */
	EXTINT_SetCallBack(Card, EXTINT_INT2);
     6f0:	62 e0       	ldi	r22, 0x02	; 2
     6f2:	8b e6       	ldi	r24, 0x6B	; 107
     6f4:	91 e0       	ldi	r25, 0x01	; 1
     6f6:	0e 94 9f 0a 	call	0x153e	; 0x153e <EXTINT_SetCallBack>
     6fa:	08 95       	ret

000006fc <APP_Update>:
* Parameters (out): None
* Return Value    : void
* Description     : A function to update the application
*************************************************************************************************/
void APP_Update()
{
     6fc:	ef 92       	push	r14
     6fe:	ff 92       	push	r15
     700:	1f 93       	push	r17
     702:	cf 93       	push	r28
     704:	df 93       	push	r29
     706:	cd b7       	in	r28, 0x3d	; 61
     708:	de b7       	in	r29, 0x3e	; 62
     70a:	e0 97       	sbiw	r28, 0x30	; 48
     70c:	0f b6       	in	r0, 0x3f	; 63
     70e:	f8 94       	cli
     710:	de bf       	out	0x3e, r29	; 62
     712:	0f be       	out	0x3f, r0	; 63
     714:	cd bf       	out	0x3d, r28	; 61
	uint8_t au8Mode[6];
	uint8_t au8AdminPassword[6];
	uint8_t au8EEPROMAdminPassword[6];
	uint8_t au8Temperature[2];
	uint8_t u8KeypadChar;
	uint8_t u8Temperature = 0;
     716:	18 aa       	std	Y+48, r1	; 0x30
	uint8_t u8LoopIndex;
	static uint8_t u8Flag = LOW;
	static uint8_t u8CardsNo=0;
	/* Checking if the system is blocked or not */
	if(u8Flag == LOW)
     718:	80 91 15 03 	lds	r24, 0x0315	; 0x800315 <u8Flag.2100>
     71c:	81 11       	cpse	r24, r1
     71e:	86 c1       	rjmp	.+780    	; 0xa2c <__stack+0x1cd>
	{
		/* Clearing the LCD screen */
		LCD_Clear();
     720:	0e 94 b7 08 	call	0x116e	; 0x116e <LCD_Clear>
		/* Displaying "Welcome to" on the LCD screen */
		LCD_DisplayString((uint8_t*)"   Welcome to");
     724:	84 e4       	ldi	r24, 0x44	; 68
     726:	91 e0       	ldi	r25, 0x01	; 1
     728:	0e 94 e5 08 	call	0x11ca	; 0x11ca <LCD_DisplayString>
		/* Setting the position of the cursor at the second row of the LCD screen */
		LCD_SetCursorPosition(0, 1);
     72c:	61 e0       	ldi	r22, 0x01	; 1
     72e:	80 e0       	ldi	r24, 0x00	; 0
     730:	0e 94 c1 08 	call	0x1182	; 0x1182 <LCD_SetCursorPosition>
		/* Displaying "ATM System" on the LCD screen */
		LCD_DisplayString((uint8_t*)"   ATM System");
     734:	82 e5       	ldi	r24, 0x52	; 82
     736:	91 e0       	ldi	r25, 0x01	; 1
     738:	0e 94 e5 08 	call	0x11ca	; 0x11ca <LCD_DisplayString>
		/* Sending "Enter the used mode (ADMIN - USER):" on the terminal by UART */
		UART_SendString((uint8_t*)"Enter the used mode (ADMIN - USER):\r");
     73c:	86 e6       	ldi	r24, 0x66	; 102
     73e:	91 e0       	ldi	r25, 0x01	; 1
     740:	0e 94 9b 0c 	call	0x1936	; 0x1936 <UART_SendString>
		/* Receiving the entered mode from the terminal by UART */
		UART_ReceiveString(au8Mode, MAX_LEN);
     744:	6f ef       	ldi	r22, 0xFF	; 255
     746:	ce 01       	movw	r24, r28
     748:	4b 96       	adiw	r24, 0x1b	; 27
     74a:	0e 94 c1 0c 	call	0x1982	; 0x1982 <UART_ReceiveString>
		/* Sending new line on the terminal by UART */
		UART_SendData((uint8_t)'\r');
     74e:	8d e0       	ldi	r24, 0x0D	; 13
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <UART_SendData>
		/* Checking if the received mode is ADMIN mode */
		if((au8Mode[0] == 'A') && (au8Mode[1] == 'D') && (au8Mode[2] == 'M') &&
     756:	8b 8d       	ldd	r24, Y+27	; 0x1b
     758:	81 34       	cpi	r24, 0x41	; 65
     75a:	09 f0       	breq	.+2      	; 0x75e <APP_Update+0x62>
     75c:	d3 c0       	rjmp	.+422    	; 0x904 <__stack+0xa5>
     75e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     760:	94 34       	cpi	r25, 0x44	; 68
     762:	09 f0       	breq	.+2      	; 0x766 <APP_Update+0x6a>
     764:	cf c0       	rjmp	.+414    	; 0x904 <__stack+0xa5>
     766:	9d 8d       	ldd	r25, Y+29	; 0x1d
     768:	9d 34       	cpi	r25, 0x4D	; 77
     76a:	09 f0       	breq	.+2      	; 0x76e <APP_Update+0x72>
     76c:	cb c0       	rjmp	.+406    	; 0x904 <__stack+0xa5>
		   (au8Mode[3] == 'I') && (au8Mode[4] == 'N'))
     76e:	9e 8d       	ldd	r25, Y+30	; 0x1e
		/* Receiving the entered mode from the terminal by UART */
		UART_ReceiveString(au8Mode, MAX_LEN);
		/* Sending new line on the terminal by UART */
		UART_SendData((uint8_t)'\r');
		/* Checking if the received mode is ADMIN mode */
		if((au8Mode[0] == 'A') && (au8Mode[1] == 'D') && (au8Mode[2] == 'M') &&
     770:	99 34       	cpi	r25, 0x49	; 73
     772:	09 f0       	breq	.+2      	; 0x776 <APP_Update+0x7a>
     774:	c7 c0       	rjmp	.+398    	; 0x904 <__stack+0xa5>
		   (au8Mode[3] == 'I') && (au8Mode[4] == 'N'))
     776:	9f 8d       	ldd	r25, Y+31	; 0x1f
     778:	9e 34       	cpi	r25, 0x4E	; 78
     77a:	09 f0       	breq	.+2      	; 0x77e <APP_Update+0x82>
     77c:	c3 c0       	rjmp	.+390    	; 0x904 <__stack+0xa5>
		{
			gu8BTNFlag=1;
     77e:	81 e0       	ldi	r24, 0x01	; 1
     780:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			/* Clearing the LCD screen */
			LCD_Clear();
     784:	0e 94 b7 08 	call	0x116e	; 0x116e <LCD_Clear>
			/* Displaying "ADMIN MODE" on the LCD screen */
			LCD_DisplayString((uint8_t*)"   ADMIN MODE");
     788:	80 e8       	ldi	r24, 0x80	; 128
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	0e 94 e5 08 	call	0x11ca	; 0x11ca <LCD_DisplayString>
			/* Sending "Enter Password:" on the terminal by UART */
			UART_SendString((uint8_t*)"Enter Password:\r");
     790:	8b e8       	ldi	r24, 0x8B	; 139
     792:	91 e0       	ldi	r25, 0x01	; 1
     794:	0e 94 9b 0c 	call	0x1936	; 0x1936 <UART_SendString>
			/* Receiving the entered admin password from the terminal by UART */
			UART_ReceiveString(au8AdminPassword, MAX_LEN);
     798:	6f ef       	ldi	r22, 0xFF	; 255
     79a:	ce 01       	movw	r24, r28
     79c:	81 96       	adiw	r24, 0x21	; 33
     79e:	0e 94 c1 0c 	call	0x1982	; 0x1982 <UART_ReceiveString>
			/* Reading the stored admin password "admin" from EEPROM */
			EEPROM_ReadString(APP_EEPROM_ADMIN_PASSWORD_ADDRESS, 5, au8EEPROMAdminPassword);
     7a2:	ae 01       	movw	r20, r28
     7a4:	49 5d       	subi	r20, 0xD9	; 217
     7a6:	5f 4f       	sbci	r21, 0xFF	; 255
     7a8:	65 e0       	ldi	r22, 0x05	; 5
     7aa:	70 e0       	ldi	r23, 0x00	; 0
     7ac:	80 e1       	ldi	r24, 0x10	; 16
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	0e 94 0f 06 	call	0xc1e	; 0xc1e <EEPROM_ReadString>
			/* Checking if the entered admin password is the same as the stored admin password in EEPROM */
			if((au8AdminPassword[0] == au8EEPROMAdminPassword[0]) && (au8AdminPassword[1] == au8EEPROMAdminPassword[1]) &&
     7b4:	99 a1       	ldd	r25, Y+33	; 0x21
     7b6:	8f a1       	ldd	r24, Y+39	; 0x27
     7b8:	98 13       	cpse	r25, r24
     7ba:	99 c0       	rjmp	.+306    	; 0x8ee <__stack+0x8f>
     7bc:	9a a1       	ldd	r25, Y+34	; 0x22
     7be:	88 a5       	ldd	r24, Y+40	; 0x28
     7c0:	98 13       	cpse	r25, r24
     7c2:	95 c0       	rjmp	.+298    	; 0x8ee <__stack+0x8f>
			   (au8AdminPassword[2] == au8EEPROMAdminPassword[2]) && (au8AdminPassword[3] == au8EEPROMAdminPassword[3]) &&
     7c4:	9b a1       	ldd	r25, Y+35	; 0x23
     7c6:	89 a5       	ldd	r24, Y+41	; 0x29
			/* Receiving the entered admin password from the terminal by UART */
			UART_ReceiveString(au8AdminPassword, MAX_LEN);
			/* Reading the stored admin password "admin" from EEPROM */
			EEPROM_ReadString(APP_EEPROM_ADMIN_PASSWORD_ADDRESS, 5, au8EEPROMAdminPassword);
			/* Checking if the entered admin password is the same as the stored admin password in EEPROM */
			if((au8AdminPassword[0] == au8EEPROMAdminPassword[0]) && (au8AdminPassword[1] == au8EEPROMAdminPassword[1]) &&
     7c8:	98 13       	cpse	r25, r24
     7ca:	91 c0       	rjmp	.+290    	; 0x8ee <__stack+0x8f>
			   (au8AdminPassword[2] == au8EEPROMAdminPassword[2]) && (au8AdminPassword[3] == au8EEPROMAdminPassword[3]) &&
     7cc:	9c a1       	ldd	r25, Y+36	; 0x24
     7ce:	8a a5       	ldd	r24, Y+42	; 0x2a
     7d0:	98 13       	cpse	r25, r24
     7d2:	8d c0       	rjmp	.+282    	; 0x8ee <__stack+0x8f>
			   (au8AdminPassword[4] == au8EEPROMAdminPassword[4]))
     7d4:	9d a1       	ldd	r25, Y+37	; 0x25
     7d6:	8b a5       	ldd	r24, Y+43	; 0x2b
			UART_ReceiveString(au8AdminPassword, MAX_LEN);
			/* Reading the stored admin password "admin" from EEPROM */
			EEPROM_ReadString(APP_EEPROM_ADMIN_PASSWORD_ADDRESS, 5, au8EEPROMAdminPassword);
			/* Checking if the entered admin password is the same as the stored admin password in EEPROM */
			if((au8AdminPassword[0] == au8EEPROMAdminPassword[0]) && (au8AdminPassword[1] == au8EEPROMAdminPassword[1]) &&
			   (au8AdminPassword[2] == au8EEPROMAdminPassword[2]) && (au8AdminPassword[3] == au8EEPROMAdminPassword[3]) &&
     7d8:	98 13       	cpse	r25, r24
     7da:	89 c0       	rjmp	.+274    	; 0x8ee <__stack+0x8f>
			{
				/* Breaking the loop process if Exit (3) is inserted */
				do
				{
					/* Sending new line on the terminal by UART */
					UART_SendData((uint8_t)'\r');
     7dc:	8d e0       	ldi	r24, 0x0D	; 13
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <UART_SendData>
					/* Sending "Please select one of the following:" on the terminal by UART */
					UART_SendString((uint8_t*)"Please select one of the following:\r");
     7e4:	8c e9       	ldi	r24, 0x9C	; 156
     7e6:	91 e0       	ldi	r25, 0x01	; 1
     7e8:	0e 94 9b 0c 	call	0x1936	; 0x1936 <UART_SendString>
					/* Sending "1- Customer Data" on the terminal by UART */
					UART_SendString((uint8_t*)"1- Customer Data\r");
     7ec:	81 ec       	ldi	r24, 0xC1	; 193
     7ee:	91 e0       	ldi	r25, 0x01	; 1
     7f0:	0e 94 9b 0c 	call	0x1936	; 0x1936 <UART_SendString>
					/* Sending "2- Maximum Amount" on the terminal by UART */
					UART_SendString((uint8_t*)"2- Maximum Amount\r");
     7f4:	83 ed       	ldi	r24, 0xD3	; 211
     7f6:	91 e0       	ldi	r25, 0x01	; 1
     7f8:	0e 94 9b 0c 	call	0x1936	; 0x1936 <UART_SendString>
					/* Sending "3- Exit\r" on the terminal by UART */
					UART_SendString((uint8_t*)"3- Exit\r");
     7fc:	86 ee       	ldi	r24, 0xE6	; 230
     7fe:	91 e0       	ldi	r25, 0x01	; 1
     800:	0e 94 9b 0c 	call	0x1936	; 0x1936 <UART_SendString>
					/* Sending new line on the terminal by UART */
					UART_SendData((uint8_t)'\r');
     804:	8d e0       	ldi	r24, 0x0D	; 13
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <UART_SendData>
					/* Getting the selected mode from the keypad */
					Keypad_GetChar(&u8KeypadChar);
     80c:	ce 01       	movw	r24, r28
     80e:	8f 96       	adiw	r24, 0x2f	; 47
     810:	0e 94 cc 06 	call	0xd98	; 0xd98 <Keypad_GetChar>
					/* Checking if the selected mode is "Customer Data" */
					if(u8KeypadChar == '1')
     814:	8f a5       	ldd	r24, Y+47	; 0x2f
     816:	81 33       	cpi	r24, 0x31	; 49
     818:	09 f0       	breq	.+2      	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
     81a:	50 c0       	rjmp	.+160    	; 0x8bc <__stack+0x5d>
					{
						UART_SendString((uint8_t*)"Pls enter number of cards: ");
     81c:	8f ee       	ldi	r24, 0xEF	; 239
     81e:	91 e0       	ldi	r25, 0x01	; 1
     820:	0e 94 9b 0c 	call	0x1936	; 0x1936 <UART_SendString>
						UART_ReceiveData((uint16_t*)&u8CardsNo);
     824:	84 e1       	ldi	r24, 0x14	; 20
     826:	93 e0       	ldi	r25, 0x03	; 3
     828:	0e 94 8a 0c 	call	0x1914	; 0x1914 <UART_ReceiveData>
						u8CardsNo=u8CardsNo-'0';
     82c:	60 91 14 03 	lds	r22, 0x0314	; 0x800314 <__data_end>
     830:	60 53       	subi	r22, 0x30	; 48
     832:	60 93 14 03 	sts	0x0314, r22	; 0x800314 <__data_end>
						EEPROM_WriteByte(0x020, u8CardsNo);
     836:	80 e2       	ldi	r24, 0x20	; 32
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	0e 94 92 05 	call	0xb24	; 0xb24 <EEPROM_WriteByte>
						UART_SendData('\r');
     83e:	8d e0       	ldi	r24, 0x0D	; 13
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <UART_SendData>
						for(u8LoopIndex=0;u8LoopIndex<u8CardsNo;u8LoopIndex++)
     846:	10 e0       	ldi	r17, 0x00	; 0
     848:	34 c0       	rjmp	.+104    	; 0x8b2 <__stack+0x53>
						{
							/* Sending "Please enter PAN:" on the terminal by UART */
							UART_SendString((uint8_t*)"Please enter PAN:\r");
     84a:	8b e0       	ldi	r24, 0x0B	; 11
     84c:	92 e0       	ldi	r25, 0x02	; 2
     84e:	0e 94 9b 0c 	call	0x1936	; 0x1936 <UART_SendString>
							/* Receiving the entered PAN from the terminal by UART */
							UART_ReceiveString(au8PAN, MAX_LEN);
     852:	6f ef       	ldi	r22, 0xFF	; 255
     854:	ce 01       	movw	r24, r28
     856:	01 96       	adiw	r24, 0x01	; 1
     858:	0e 94 c1 0c 	call	0x1982	; 0x1982 <UART_ReceiveString>
							/**/
							/* Writing the PAN inside the EEPROM */
							EEPROM_WriteString(0x100 + (0x10 * u8LoopIndex), 9, au8PAN);
     85c:	e1 2e       	mov	r14, r17
     85e:	f1 2c       	mov	r15, r1
     860:	c7 01       	movw	r24, r14
     862:	40 96       	adiw	r24, 0x10	; 16
     864:	ae 01       	movw	r20, r28
     866:	4f 5f       	subi	r20, 0xFF	; 255
     868:	5f 4f       	sbci	r21, 0xFF	; 255
     86a:	69 e0       	ldi	r22, 0x09	; 9
     86c:	70 e0       	ldi	r23, 0x00	; 0
     86e:	82 95       	swap	r24
     870:	92 95       	swap	r25
     872:	90 7f       	andi	r25, 0xF0	; 240
     874:	98 27       	eor	r25, r24
     876:	80 7f       	andi	r24, 0xF0	; 240
     878:	98 27       	eor	r25, r24
     87a:	0e 94 d1 05 	call	0xba2	; 0xba2 <EEPROM_WriteString>
							/* Sending "Please enter balance:" on the terminal by UART */
							UART_SendString((uint8_t*)"Please enter balance:\r");
     87e:	8e e1       	ldi	r24, 0x1E	; 30
     880:	92 e0       	ldi	r25, 0x02	; 2
     882:	0e 94 9b 0c 	call	0x1936	; 0x1936 <UART_SendString>
							/* Receiving the entered balance from the terminal by UART */
							UART_ReceiveString(au8Balance, MAX_LEN);
     886:	6f ef       	ldi	r22, 0xFF	; 255
     888:	ce 01       	movw	r24, r28
     88a:	0b 96       	adiw	r24, 0x0b	; 11
     88c:	0e 94 c1 0c 	call	0x1982	; 0x1982 <UART_ReceiveString>
							/* Writing the balance inside the EEPROM */
							EEPROM_WriteString(0x500 + (0x10 * u8LoopIndex), 7, au8Balance);
     890:	c7 01       	movw	r24, r14
     892:	80 5b       	subi	r24, 0xB0	; 176
     894:	9f 4f       	sbci	r25, 0xFF	; 255
     896:	ae 01       	movw	r20, r28
     898:	45 5f       	subi	r20, 0xF5	; 245
     89a:	5f 4f       	sbci	r21, 0xFF	; 255
     89c:	67 e0       	ldi	r22, 0x07	; 7
     89e:	70 e0       	ldi	r23, 0x00	; 0
     8a0:	82 95       	swap	r24
     8a2:	92 95       	swap	r25
     8a4:	90 7f       	andi	r25, 0xF0	; 240
     8a6:	98 27       	eor	r25, r24
     8a8:	80 7f       	andi	r24, 0xF0	; 240
     8aa:	98 27       	eor	r25, r24
     8ac:	0e 94 d1 05 	call	0xba2	; 0xba2 <EEPROM_WriteString>
						UART_SendString((uint8_t*)"Pls enter number of cards: ");
						UART_ReceiveData((uint16_t*)&u8CardsNo);
						u8CardsNo=u8CardsNo-'0';
						EEPROM_WriteByte(0x020, u8CardsNo);
						UART_SendData('\r');
						for(u8LoopIndex=0;u8LoopIndex<u8CardsNo;u8LoopIndex++)
     8b0:	1f 5f       	subi	r17, 0xFF	; 255
     8b2:	80 91 14 03 	lds	r24, 0x0314	; 0x800314 <__data_end>
     8b6:	18 17       	cp	r17, r24
     8b8:	40 f2       	brcs	.-112    	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
     8ba:	14 c0       	rjmp	.+40     	; 0x8e4 <__stack+0x85>
							/* Writing the balance inside the EEPROM */
							EEPROM_WriteString(0x500 + (0x10 * u8LoopIndex), 7, au8Balance);
						}
					}
					/* Checking if the selected mode is "Maximum Amount" */
					else if(u8KeypadChar == '2')
     8bc:	82 33       	cpi	r24, 0x32	; 50
     8be:	91 f4       	brne	.+36     	; 0x8e4 <__stack+0x85>
					{
						/* Sending "Please enter maximum amount:" on the terminal by UART */
						UART_SendString((uint8_t*)"Please enter maximum amount:\r");
     8c0:	85 e3       	ldi	r24, 0x35	; 53
     8c2:	92 e0       	ldi	r25, 0x02	; 2
     8c4:	0e 94 9b 0c 	call	0x1936	; 0x1936 <UART_SendString>
						/* Receiving the entered maximmum amount from the terminal by UART */
						UART_ReceiveString(au8MaxAmount, MAX_LEN);
     8c8:	6f ef       	ldi	r22, 0xFF	; 255
     8ca:	ce 01       	movw	r24, r28
     8cc:	43 96       	adiw	r24, 0x13	; 19
     8ce:	0e 94 c1 0c 	call	0x1982	; 0x1982 <UART_ReceiveString>
						/* Writing the maximum amount inside the EEPROM */
						EEPROM_WriteString(APP_EEPROM_MAX_AMOUNT_ADDRESS, 7, au8MaxAmount);
     8d2:	ae 01       	movw	r20, r28
     8d4:	4d 5e       	subi	r20, 0xED	; 237
     8d6:	5f 4f       	sbci	r21, 0xFF	; 255
     8d8:	67 e0       	ldi	r22, 0x07	; 7
     8da:	70 e0       	ldi	r23, 0x00	; 0
     8dc:	80 e3       	ldi	r24, 0x30	; 48
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	0e 94 d1 05 	call	0xba2	; 0xba2 <EEPROM_WriteString>
					}
					else
					{
					}
				} while(u8KeypadChar != '3');
     8e4:	8f a5       	ldd	r24, Y+47	; 0x2f
     8e6:	83 33       	cpi	r24, 0x33	; 51
     8e8:	09 f0       	breq	.+2      	; 0x8ec <__stack+0x8d>
     8ea:	78 cf       	rjmp	.-272    	; 0x7dc <APP_Update+0xe0>
     8ec:	08 c0       	rjmp	.+16     	; 0x8fe <__stack+0x9f>
			}
			else
			{
				/* Sending "Invalid Password" on the terminal by UART if wrong admin password is inserted */
				UART_SendString((uint8_t*)"Invalid Password\r");
     8ee:	83 e5       	ldi	r24, 0x53	; 83
     8f0:	92 e0       	ldi	r25, 0x02	; 2
     8f2:	0e 94 9b 0c 	call	0x1936	; 0x1936 <UART_SendString>
				/* Sending new line on the terminal by UART */
				UART_SendData((uint8_t)'\r');
     8f6:	8d e0       	ldi	r24, 0x0D	; 13
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <UART_SendData>
			}
			u8Flag = LOW;
     8fe:	10 92 15 03 	sts	0x0315, r1	; 0x800315 <u8Flag.2100>
     902:	94 c0       	rjmp	.+296    	; 0xa2c <__stack+0x1cd>
		}
		/* Checking if the received mode is USER mode */
		else if((au8Mode[0] == 'U') && (au8Mode[1] == 'S') &&
     904:	85 35       	cpi	r24, 0x55	; 85
     906:	09 f0       	breq	.+2      	; 0x90a <__stack+0xab>
     908:	89 c0       	rjmp	.+274    	; 0xa1c <__stack+0x1bd>
     90a:	8c 8d       	ldd	r24, Y+28	; 0x1c
     90c:	83 35       	cpi	r24, 0x53	; 83
     90e:	09 f0       	breq	.+2      	; 0x912 <__stack+0xb3>
     910:	85 c0       	rjmp	.+266    	; 0xa1c <__stack+0x1bd>
				(au8Mode[2] == 'E') && (au8Mode[3] == 'R'))
     912:	8d 8d       	ldd	r24, Y+29	; 0x1d
				UART_SendData((uint8_t)'\r');
			}
			u8Flag = LOW;
		}
		/* Checking if the received mode is USER mode */
		else if((au8Mode[0] == 'U') && (au8Mode[1] == 'S') &&
     914:	85 34       	cpi	r24, 0x45	; 69
     916:	09 f0       	breq	.+2      	; 0x91a <__stack+0xbb>
     918:	81 c0       	rjmp	.+258    	; 0xa1c <__stack+0x1bd>
				(au8Mode[2] == 'E') && (au8Mode[3] == 'R'))
     91a:	8e 8d       	ldd	r24, Y+30	; 0x1e
     91c:	82 35       	cpi	r24, 0x52	; 82
     91e:	09 f0       	breq	.+2      	; 0x922 <__stack+0xc3>
     920:	7d c0       	rjmp	.+250    	; 0xa1c <__stack+0x1bd>
		{
			gu8BTNFlag=2;
     922:	82 e0       	ldi	r24, 0x02	; 2
     924:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			u8Flag = LOW;
     928:	10 92 15 03 	sts	0x0315, r1	; 0x800315 <u8Flag.2100>
			while(u8Flag == LOW)
     92c:	71 c0       	rjmp	.+226    	; 0xa10 <__stack+0x1b1>
			{
				/* Clearing the LCD screen */
				LCD_Clear();
     92e:	0e 94 b7 08 	call	0x116e	; 0x116e <LCD_Clear>
				/* Displaying "1- Insert a Card" on the LCD screen */
				LCD_DisplayString((uint8_t*)"1- Insert a Card");
     932:	85 e6       	ldi	r24, 0x65	; 101
     934:	92 e0       	ldi	r25, 0x02	; 2
     936:	0e 94 e5 08 	call	0x11ca	; 0x11ca <LCD_DisplayString>
				/* Setting the position of the cursor at the second row of the LCD screen */
				LCD_SetCursorPosition(0, 1);
     93a:	61 e0       	ldi	r22, 0x01	; 1
     93c:	80 e0       	ldi	r24, 0x00	; 0
     93e:	0e 94 c1 08 	call	0x1182	; 0x1182 <LCD_SetCursorPosition>
				/* Displaying "2- Display Temp" on the LCD screen */
				LCD_DisplayString((uint8_t*)"2- Display Temp");
     942:	86 e7       	ldi	r24, 0x76	; 118
     944:	92 e0       	ldi	r25, 0x02	; 2
     946:	0e 94 e5 08 	call	0x11ca	; 0x11ca <LCD_DisplayString>
				/* Getting the selected mode from the keypad */
				Keypad_GetChar(&u8KeypadChar);
     94a:	ce 01       	movw	r24, r28
     94c:	8f 96       	adiw	r24, 0x2f	; 47
     94e:	0e 94 cc 06 	call	0xd98	; 0xd98 <Keypad_GetChar>
				/* Checking if the selected mode is to use the ATM */
				if(u8KeypadChar == '1')
     952:	8f a5       	ldd	r24, Y+47	; 0x2f
     954:	81 33       	cpi	r24, 0x31	; 49
     956:	d9 f4       	brne	.+54     	; 0x98e <__stack+0x12f>
				{
					/* Clearing the LCD screen */
					LCD_Clear();
     958:	0e 94 b7 08 	call	0x116e	; 0x116e <LCD_Clear>
					/* Displaying "Please Enter" on the LCD screen */
					LCD_DisplayString((uint8_t*)"  Please Enter");
     95c:	86 e8       	ldi	r24, 0x86	; 134
     95e:	92 e0       	ldi	r25, 0x02	; 2
     960:	0e 94 e5 08 	call	0x11ca	; 0x11ca <LCD_DisplayString>
					/* Setting the position of the cursor at the second row of the LCD screen */
					LCD_SetCursorPosition(0, 1);
     964:	61 e0       	ldi	r22, 0x01	; 1
     966:	80 e0       	ldi	r24, 0x00	; 0
     968:	0e 94 c1 08 	call	0x1182	; 0x1182 <LCD_SetCursorPosition>
					/* Displaying "Your Card!" on the LCD screen */
					LCD_DisplayString((uint8_t*)"   Your Card!");
     96c:	85 e9       	ldi	r24, 0x95	; 149
     96e:	92 e0       	ldi	r25, 0x02	; 2
     970:	0e 94 e5 08 	call	0x11ca	; 0x11ca <LCD_DisplayString>
					gu8BTNFlag=0;
     974:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
               UART_SendData(gu8BTNFlag);
     978:	80 e0       	ldi	r24, 0x00	; 0
     97a:	90 e0       	ldi	r25, 0x00	; 0
     97c:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <UART_SendData>
					while(gu8BTNFlag!=2);
     980:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     984:	82 30       	cpi	r24, 0x02	; 2
     986:	e1 f7       	brne	.-8      	; 0x980 <__stack+0x121>
					u8Flag = LOW;
     988:	10 92 15 03 	sts	0x0315, r1	; 0x800315 <u8Flag.2100>
     98c:	41 c0       	rjmp	.+130    	; 0xa10 <__stack+0x1b1>
				}
				/* Checking if the selected mode is to display the temperature */
				else if(u8KeypadChar == '2')
     98e:	82 33       	cpi	r24, 0x32	; 50
     990:	e9 f5       	brne	.+122    	; 0xa0c <__stack+0x1ad>
				{
					u8Flag=HIGH;
     992:	81 e0       	ldi	r24, 0x01	; 1
     994:	80 93 15 03 	sts	0x0315, r24	; 0x800315 <u8Flag.2100>
					/* Reading the current temperature of the LM35 sensor */
					LM35_ReadTemperature(&u8Temperature);
     998:	ce 01       	movw	r24, r28
     99a:	c0 96       	adiw	r24, 0x30	; 48
     99c:	0e 94 01 09 	call	0x1202	; 0x1202 <LM35_ReadTemperature>
					/* Clearing the LCD screen */
					LCD_Clear();
     9a0:	0e 94 b7 08 	call	0x116e	; 0x116e <LCD_Clear>
					/* Displaying "Current Temp: " on the LCD screen */
					LCD_DisplayString((uint8_t*)"Current Temp: ");
     9a4:	83 ea       	ldi	r24, 0xA3	; 163
     9a6:	92 e0       	ldi	r25, 0x02	; 2
     9a8:	0e 94 e5 08 	call	0x11ca	; 0x11ca <LCD_DisplayString>
					/* Converting the temperature read from the LM35 sensor from integer to array of ASCII characters */
					itoa(u8Temperature, (char*)au8Temperature, 10);
     9ac:	88 a9       	ldd	r24, Y+48	; 0x30
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     9ae:	4a e0       	ldi	r20, 0x0A	; 10
     9b0:	be 01       	movw	r22, r28
     9b2:	63 5d       	subi	r22, 0xD3	; 211
     9b4:	7f 4f       	sbci	r23, 0xFF	; 255
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <__itoa_ncheck>
					/* Displaying the temperature read from the LM35 sensor on the LCD screen */
					LCD_DisplayString(au8Temperature);
     9bc:	ce 01       	movw	r24, r28
     9be:	8d 96       	adiw	r24, 0x2d	; 45
     9c0:	0e 94 e5 08 	call	0x11ca	; 0x11ca <LCD_DisplayString>
					/* Checking if the temperature read from the LM35 sensor is greater than 50 */
					if(u8Temperature > 50)
     9c4:	88 a9       	ldd	r24, Y+48	; 0x30
     9c6:	83 33       	cpi	r24, 0x33	; 51
     9c8:	90 f0       	brcs	.+36     	; 0x9ee <__stack+0x18f>
					{
						/* Clearing the LCD screen */
						LCD_Clear();
     9ca:	0e 94 b7 08 	call	0x116e	; 0x116e <LCD_Clear>
						/* Displaying "System blocked!" on the LCD screen */
						LCD_DisplayString((uint8_t*)"System blocked!");
     9ce:	82 eb       	ldi	r24, 0xB2	; 178
     9d0:	92 e0       	ldi	r25, 0x02	; 2
     9d2:	0e 94 e5 08 	call	0x11ca	; 0x11ca <LCD_DisplayString>
						/* Setting the position of the cursor at the second row of the LCD screen */
						LCD_SetCursorPosition(0, 1);
     9d6:	61 e0       	ldi	r22, 0x01	; 1
     9d8:	80 e0       	ldi	r24, 0x00	; 0
     9da:	0e 94 c1 08 	call	0x1182	; 0x1182 <LCD_SetCursorPosition>
						/* Displaying "Temp is above 50" on the LCD screen */
						LCD_DisplayString((uint8_t*)"Temp is above 50");
     9de:	82 ec       	ldi	r24, 0xC2	; 194
     9e0:	92 e0       	ldi	r25, 0x02	; 2
     9e2:	0e 94 e5 08 	call	0x11ca	; 0x11ca <LCD_DisplayString>
						/* Setting the system block flag to one to block the whole system */
						u8Flag = HIGH;
     9e6:	81 e0       	ldi	r24, 0x01	; 1
     9e8:	80 93 15 03 	sts	0x0315, r24	; 0x800315 <u8Flag.2100>
     9ec:	11 c0       	rjmp	.+34     	; 0xa10 <__stack+0x1b1>
					}
					else
					{
						/* Setting the position of the cursor at the second row of the LCD screen */
						LCD_SetCursorPosition(0, 1);
     9ee:	61 e0       	ldi	r22, 0x01	; 1
     9f0:	80 e0       	ldi	r24, 0x00	; 0
     9f2:	0e 94 c1 08 	call	0x1182	; 0x1182 <LCD_SetCursorPosition>
						/* Displaying "Press any key" on the LCD screen */
						LCD_DisplayString((uint8_t*)"Press any key");
     9f6:	83 ed       	ldi	r24, 0xD3	; 211
     9f8:	92 e0       	ldi	r25, 0x02	; 2
     9fa:	0e 94 e5 08 	call	0x11ca	; 0x11ca <LCD_DisplayString>
						/* Waiting for any key to be pressed from the keypad */
						Keypad_GetChar(&u8KeypadChar);
     9fe:	ce 01       	movw	r24, r28
     a00:	8f 96       	adiw	r24, 0x2f	; 47
     a02:	0e 94 cc 06 	call	0xd98	; 0xd98 <Keypad_GetChar>
						u8Flag = LOW;
     a06:	10 92 15 03 	sts	0x0315, r1	; 0x800315 <u8Flag.2100>
     a0a:	02 c0       	rjmp	.+4      	; 0xa10 <__stack+0x1b1>
					}
				}
				else
				{
					/* Invalid keypad input, 1 or 2 must be inserted */
					u8Flag = LOW;
     a0c:	10 92 15 03 	sts	0x0315, r1	; 0x800315 <u8Flag.2100>
		else if((au8Mode[0] == 'U') && (au8Mode[1] == 'S') &&
				(au8Mode[2] == 'E') && (au8Mode[3] == 'R'))
		{
			gu8BTNFlag=2;
			u8Flag = LOW;
			while(u8Flag == LOW)
     a10:	80 91 15 03 	lds	r24, 0x0315	; 0x800315 <u8Flag.2100>
     a14:	88 23       	and	r24, r24
     a16:	09 f4       	brne	.+2      	; 0xa1a <__stack+0x1bb>
     a18:	8a cf       	rjmp	.-236    	; 0x92e <__stack+0xcf>
     a1a:	08 c0       	rjmp	.+16     	; 0xa2c <__stack+0x1cd>
			}
		}
		else
		{
			/* Sending "Invalid mode is inserted" on the terminal by UART */
			UART_SendString((uint8_t*)"Invalid mode is inserted\r");
     a1c:	81 ee       	ldi	r24, 0xE1	; 225
     a1e:	92 e0       	ldi	r25, 0x02	; 2
     a20:	0e 94 9b 0c 	call	0x1936	; 0x1936 <UART_SendString>
			/* Sending new line on the terminal by UART */
			UART_SendData((uint8_t)'\r');
     a24:	8d e0       	ldi	r24, 0x0D	; 13
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <UART_SendData>
	}
	else
	{
		/* System is blocked */
	}
}
     a2c:	e0 96       	adiw	r28, 0x30	; 48
     a2e:	0f b6       	in	r0, 0x3f	; 63
     a30:	f8 94       	cli
     a32:	de bf       	out	0x3e, r29	; 62
     a34:	0f be       	out	0x3f, r0	; 63
     a36:	cd bf       	out	0x3d, r28	; 61
     a38:	df 91       	pop	r29
     a3a:	cf 91       	pop	r28
     a3c:	1f 91       	pop	r17
     a3e:	ff 90       	pop	r15
     a40:	ef 90       	pop	r14
     a42:	08 95       	ret

00000a44 <Button_Init>:
* Parameters	: enuDIOPinNo, enuButtonConnectionType
* Return Value	: enuErrorStatus_t
* Description  : Initialize the button according to the configuration
*************************************************************************************************/
enuErrorStatus_t Button_Init(enuDIOPinNo_t enuDIOPinNo, enuButtonConnectionType_t enuButtonConnectionType)
{
     a44:	0f 93       	push	r16
     a46:	1f 93       	push	r17
     a48:	cf 93       	push	r28
     a4a:	df 93       	push	r29
     a4c:	1f 92       	push	r1
     a4e:	cd b7       	in	r28, 0x3d	; 61
     a50:	de b7       	in	r29, 0x3e	; 62
   enuErrorStatus_t enuRetVar;
   uint8_t u8Data;
   
	if((enuButtonConnectionType > BUTTON_CONNECTION_TYPE_MIN_VALUE) && (enuButtonConnectionType < BUTTON_CONNECTION_TYPE_MAX_VALUE))
     a52:	62 30       	cpi	r22, 0x02	; 2
     a54:	70 f5       	brcc	.+92     	; 0xab2 <Button_Init+0x6e>
     a56:	06 2f       	mov	r16, r22
     a58:	18 2f       	mov	r17, r24
	{
		/* Initialize the button with the connected DIO pin */
		DIO_PinInit(enuDIOPinNo, INPUT, enuButtonConnectionType);
     a5a:	46 2f       	mov	r20, r22
     a5c:	60 e0       	ldi	r22, 0x00	; 0
     a5e:	0e 94 39 09 	call	0x1272	; 0x1272 <DIO_PinInit>
		/* Reading the current state of the button */
		DIO_PinRead(enuDIOPinNo, &u8Data);
     a62:	be 01       	movw	r22, r28
     a64:	6f 5f       	subi	r22, 0xFF	; 255
     a66:	7f 4f       	sbci	r23, 0xFF	; 255
     a68:	81 2f       	mov	r24, r17
     a6a:	0e 94 9f 09 	call	0x133e	; 0x133e <DIO_PinRead>
		/* Checking if the current state of the button according to the configuration is true */
		if(((u8Data == LOW) && (enuButtonConnectionType == BUTTON_ACTIVE_HIGH)) || ((u8Data == HIGH) && (enuButtonConnectionType == BUTTON_ACTIVE_LOW)))
     a6e:	89 81       	ldd	r24, Y+1	; 0x01
     a70:	81 11       	cpse	r24, r1
     a72:	02 c0       	rjmp	.+4      	; 0xa78 <Button_Init+0x34>
     a74:	00 23       	and	r16, r16
     a76:	21 f0       	breq	.+8      	; 0xa80 <Button_Init+0x3c>
     a78:	81 30       	cpi	r24, 0x01	; 1
     a7a:	41 f4       	brne	.+16     	; 0xa8c <Button_Init+0x48>
     a7c:	01 30       	cpi	r16, 0x01	; 1
     a7e:	31 f4       	brne	.+12     	; 0xa8c <Button_Init+0x48>
		{
			enuButtonStates[enuDIOPinNo] = BUTTON_OFF;
     a80:	e1 2f       	mov	r30, r17
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	ea 5e       	subi	r30, 0xEA	; 234
     a86:	fb 4f       	sbci	r31, 0xFB	; 251
     a88:	10 82       	st	Z, r1
     a8a:	06 c0       	rjmp	.+12     	; 0xa98 <Button_Init+0x54>
		}
		else
		{
			enuButtonStates[enuDIOPinNo] = BUTTON_ON;
     a8c:	e1 2f       	mov	r30, r17
     a8e:	f0 e0       	ldi	r31, 0x00	; 0
     a90:	ea 5e       	subi	r30, 0xEA	; 234
     a92:	fb 4f       	sbci	r31, 0xFB	; 251
     a94:	83 e0       	ldi	r24, 0x03	; 3
     a96:	80 83       	st	Z, r24
		}
		enuButtonConnectionTypeState[enuDIOPinNo] = enuButtonConnectionType;
     a98:	81 2f       	mov	r24, r17
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	fc 01       	movw	r30, r24
     a9e:	e9 5e       	subi	r30, 0xE9	; 233
     aa0:	fc 4f       	sbci	r31, 0xFC	; 252
     aa2:	00 83       	st	Z, r16
		enuButtonState[enuDIOPinNo] = BUTTON_INIT_DONE;
     aa4:	fc 01       	movw	r30, r24
     aa6:	eb 5e       	subi	r30, 0xEB	; 235
     aa8:	fa 4f       	sbci	r31, 0xFA	; 250
     aaa:	21 e0       	ldi	r18, 0x01	; 1
     aac:	20 83       	st	Z, r18
		enuRetVar = E_OK;		
     aae:	81 e0       	ldi	r24, 0x01	; 1
     ab0:	01 c0       	rjmp	.+2      	; 0xab4 <Button_Init+0x70>
	}	
	else
	{
		enuRetVar = E_ERROR;
     ab2:	80 e0       	ldi	r24, 0x00	; 0
	}
   return enuRetVar;	
}
     ab4:	0f 90       	pop	r0
     ab6:	df 91       	pop	r29
     ab8:	cf 91       	pop	r28
     aba:	1f 91       	pop	r17
     abc:	0f 91       	pop	r16
     abe:	08 95       	ret

00000ac0 <DCFan_Init>:
* Parameters	: enuDIOPinNo
* Return Value	: void
* Description  : Initialize the DC Fan data pin
*************************************************************************************************/
void DCFan_Init(enuDIOPinNo_t enuDIOPinNo)
{	
     ac0:	cf 93       	push	r28
     ac2:	c8 2f       	mov	r28, r24
	/* Initializing the DC Fan data pin as output */
	DIO_PinInit(enuDIOPinNo, OUTPUT, NO_CONNECTION);
     ac4:	40 e0       	ldi	r20, 0x00	; 0
     ac6:	61 e0       	ldi	r22, 0x01	; 1
     ac8:	0e 94 39 09 	call	0x1272	; 0x1272 <DIO_PinInit>
	/* Stopping the DC Fan before the system starts */
	DIO_PinWrite(enuDIOPinNo, LOW);
     acc:	60 e0       	ldi	r22, 0x00	; 0
     ace:	8c 2f       	mov	r24, r28
     ad0:	0e 94 77 09 	call	0x12ee	; 0x12ee <DIO_PinWrite>
	enuDCFanState[enuDIOPinNo] = DCFAN_INIT_DONE;
     ad4:	ec 2f       	mov	r30, r28
     ad6:	f0 e0       	ldi	r31, 0x00	; 0
     ad8:	ec 5e       	subi	r30, 0xEC	; 236
     ada:	f9 4f       	sbci	r31, 0xF9	; 249
     adc:	81 e0       	ldi	r24, 0x01	; 1
     ade:	80 83       	st	Z, r24
}
     ae0:	cf 91       	pop	r28
     ae2:	08 95       	ret

00000ae4 <DCFan_Start>:
*************************************************************************************************/
enuErrorStatus_t DCFan_Start(enuDIOPinNo_t enuDIOPinNo)
{
	enuErrorStatus_t enuRetVar;
	
	if(enuDCFanState[enuDIOPinNo] == DCFAN_INIT_DONE)
     ae4:	e8 2f       	mov	r30, r24
     ae6:	f0 e0       	ldi	r31, 0x00	; 0
     ae8:	ec 5e       	subi	r30, 0xEC	; 236
     aea:	f9 4f       	sbci	r31, 0xF9	; 249
     aec:	90 81       	ld	r25, Z
     aee:	91 30       	cpi	r25, 0x01	; 1
     af0:	29 f4       	brne	.+10     	; 0xafc <DCFan_Start+0x18>
	{
		/* Starting the DC Fan */
		DIO_PinWrite(enuDIOPinNo, HIGH);
     af2:	61 e0       	ldi	r22, 0x01	; 1
     af4:	0e 94 77 09 	call	0x12ee	; 0x12ee <DIO_PinWrite>
		enuRetVar = E_OK;
     af8:	81 e0       	ldi	r24, 0x01	; 1
     afa:	08 95       	ret
	}
	else
	{
		enuRetVar = E_ERROR;
     afc:	80 e0       	ldi	r24, 0x00	; 0
	}
	return enuRetVar;
}
     afe:	08 95       	ret

00000b00 <DCFan_Stop>:
*************************************************************************************************/
enuErrorStatus_t DCFan_Stop(enuDIOPinNo_t enuDIOPinNo)
{
	enuErrorStatus_t enuRetVar;
	
	if(enuDCFanState[enuDIOPinNo] == DCFAN_INIT_DONE)
     b00:	e8 2f       	mov	r30, r24
     b02:	f0 e0       	ldi	r31, 0x00	; 0
     b04:	ec 5e       	subi	r30, 0xEC	; 236
     b06:	f9 4f       	sbci	r31, 0xF9	; 249
     b08:	90 81       	ld	r25, Z
     b0a:	91 30       	cpi	r25, 0x01	; 1
     b0c:	29 f4       	brne	.+10     	; 0xb18 <DCFan_Stop+0x18>
	{
		/* Stopping the DC Fan */
		DIO_PinWrite(enuDIOPinNo, LOW);
     b0e:	60 e0       	ldi	r22, 0x00	; 0
     b10:	0e 94 77 09 	call	0x12ee	; 0x12ee <DIO_PinWrite>
		enuRetVar = E_OK;
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 95       	ret
	}
	else
	{
		enuRetVar = E_ERROR;
     b18:	80 e0       	ldi	r24, 0x00	; 0
	}
	return enuRetVar;	
}
     b1a:	08 95       	ret

00000b1c <EEPROM_Init>:
* Description: A function to initialize EEPROM device
************************************************************************************/
enuErrorStatus_t EEPROM_Init      (void)
{
   //initialize I2C Bus
   I2C_Init();
     b1c:	0e 94 3b 0b 	call	0x1676	; 0x1676 <I2C_Init>
   return E_OK;
}
     b20:	81 e0       	ldi	r24, 0x01	; 1
     b22:	08 95       	ret

00000b24 <EEPROM_WriteByte>:
* Parameters (out): enuErrorStatus_t
* Return value: 0=ERROR or 1=SUCCESS
* Description: A function to write a byte in the EEPROM in a specific address
************************************************************************************/
enuErrorStatus_t EEPROM_WriteByte (uint16_t u16ByteAddress,uint8_t u8Data)
{
     b24:	1f 93       	push	r17
     b26:	cf 93       	push	r28
     b28:	df 93       	push	r29
     b2a:	18 2f       	mov	r17, r24
     b2c:	d6 2f       	mov	r29, r22
   //transform the byte address into a page number and a byte address within the page
   uint8_t u8ByteAddress_Page=(uint8_t)u16ByteAddress;
   uint8_t u8PageAddress=(u16ByteAddress>>8)& 0b00000111;
     b2e:	97 70       	andi	r25, 0x07	; 7
   //set up the EEPROM page address frame
   uint8_t u8EEPROM_Address= EEPROM_DEVICE_BASE_ADDRESS | u8PageAddress;
     b30:	c9 2f       	mov	r28, r25
     b32:	c0 65       	ori	r28, 0x50	; 80
   
   //send a start condition
   I2C_Start();
     b34:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <I2C_Start>
   //send the EEPROM page address frame
   I2C_SendAddressFrame(u8EEPROM_Address,Write);
     b38:	60 e0       	ldi	r22, 0x00	; 0
     b3a:	8c 2f       	mov	r24, r28
     b3c:	0e 94 81 0b 	call	0x1702	; 0x1702 <I2C_SendAddressFrame>
   //send the byte address frame
   I2C_SendDataFrame(u8ByteAddress_Page);
     b40:	81 2f       	mov	r24, r17
     b42:	0e 94 a9 0b 	call	0x1752	; 0x1752 <I2C_SendDataFrame>
   //send the data
   I2C_SendDataFrame(u8Data);
     b46:	8d 2f       	mov	r24, r29
     b48:	0e 94 a9 0b 	call	0x1752	; 0x1752 <I2C_SendDataFrame>
   //send a stop bit
   I2C_Stop();
     b4c:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <I2C_Stop>
   return E_OK;
}
     b50:	81 e0       	ldi	r24, 0x01	; 1
     b52:	df 91       	pop	r29
     b54:	cf 91       	pop	r28
     b56:	1f 91       	pop	r17
     b58:	08 95       	ret

00000b5a <EEPROM_ReadByte>:
* Parameters (out): enuErrorStatus_t
* Return value: 0=ERROR or 1=SUCCESS
* Description: A function to read a byte from the EEPROM in a specific address
************************************************************************************/
enuErrorStatus_t EEPROM_ReadByte  (uint16_t u16ByteAddress,uint8_t *pu8Data)
{
     b5a:	0f 93       	push	r16
     b5c:	1f 93       	push	r17
     b5e:	cf 93       	push	r28
     b60:	df 93       	push	r29
     b62:	d8 2f       	mov	r29, r24
     b64:	8b 01       	movw	r16, r22
   //transform the byte address into a page number and a byte address within the page
   uint8_t u8ByteAddress_Page=(uint8_t)u16ByteAddress;
   uint8_t u8PageAddress=(u16ByteAddress>>8)& 0b00000111;
     b66:	97 70       	andi	r25, 0x07	; 7
   //set up the EEPROM page address frame
   uint8_t u8EEPROM_Address= EEPROM_DEVICE_BASE_ADDRESS | u8PageAddress;
     b68:	c9 2f       	mov	r28, r25
     b6a:	c0 65       	ori	r28, 0x50	; 80
   
   //send a start condition
   I2C_Start();
     b6c:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <I2C_Start>
   //send the EEPROM page address frame
   I2C_SendAddressFrame(u8EEPROM_Address,Write);
     b70:	60 e0       	ldi	r22, 0x00	; 0
     b72:	8c 2f       	mov	r24, r28
     b74:	0e 94 81 0b 	call	0x1702	; 0x1702 <I2C_SendAddressFrame>
   //send the byte address frame
   I2C_SendDataFrame(u8ByteAddress_Page);
     b78:	8d 2f       	mov	r24, r29
     b7a:	0e 94 a9 0b 	call	0x1752	; 0x1752 <I2C_SendDataFrame>
   //send a repeated start condition
   I2C_Repeated_Start();
     b7e:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <I2C_Repeated_Start>
   //send the EEPROM page address frame
   I2C_SendAddressFrame(u8EEPROM_Address,Read);
     b82:	61 e0       	ldi	r22, 0x01	; 1
     b84:	8c 2f       	mov	r24, r28
     b86:	0e 94 81 0b 	call	0x1702	; 0x1702 <I2C_SendAddressFrame>
   //receive the data from the EEPROM and send a NACK condition
   I2C_RecieveDataFrame(pu8Data,NACK);
     b8a:	61 e0       	ldi	r22, 0x01	; 1
     b8c:	c8 01       	movw	r24, r16
     b8e:	0e 94 c2 0b 	call	0x1784	; 0x1784 <I2C_RecieveDataFrame>
   //send a stop bit
   I2C_Stop();
     b92:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <I2C_Stop>
   
   
   return E_OK;
}
     b96:	81 e0       	ldi	r24, 0x01	; 1
     b98:	df 91       	pop	r29
     b9a:	cf 91       	pop	r28
     b9c:	1f 91       	pop	r17
     b9e:	0f 91       	pop	r16
     ba0:	08 95       	ret

00000ba2 <EEPROM_WriteString>:
* Parameters (out): enuErrorStatus_t
* Return value: 0=ERROR or 1=SUCCESS
* Description: A function to write a string in the EEPROM in a specific address
************************************************************************************/
enuErrorStatus_t EEPROM_WriteString (uint16_t u16ByteAddress,uint16_t u16ByteCount,uint8_t *pu8Data)
{
     ba2:	cf 92       	push	r12
     ba4:	df 92       	push	r13
     ba6:	ef 92       	push	r14
     ba8:	ff 92       	push	r15
     baa:	0f 93       	push	r16
     bac:	1f 93       	push	r17
     bae:	cf 93       	push	r28
     bb0:	df 93       	push	r29
	if (pu8Data==NULLPTR)		return E_ERROR;
     bb2:	41 15       	cp	r20, r1
     bb4:	51 05       	cpc	r21, r1
     bb6:	39 f1       	breq	.+78     	; 0xc06 <EEPROM_WriteString+0x64>
	//transform the byte address into a page number and a byte address within the page
	uint8_t u8ByteAddress_Page=(uint8_t)u16ByteAddress;
	uint8_t u8PageAddress=(u16ByteAddress>>8)& 0b00000111;
     bb8:	29 2f       	mov	r18, r25
     bba:	27 70       	andi	r18, 0x07	; 7
	//set up the EEPROM page address frame
	uint8_t u8EEPROM_Address= EEPROM_DEVICE_BASE_ADDRESS | u8PageAddress;
     bbc:	c2 2f       	mov	r28, r18
     bbe:	c0 65       	ori	r28, 0x50	; 80
	
	if (u16ByteAddress+u16ByteCount>2047)
     bc0:	9c 01       	movw	r18, r24
     bc2:	26 0f       	add	r18, r22
     bc4:	37 1f       	adc	r19, r23
     bc6:	21 15       	cp	r18, r1
     bc8:	38 40       	sbci	r19, 0x08	; 8
     bca:	f8 f4       	brcc	.+62     	; 0xc0a <EEPROM_WriteString+0x68>
     bcc:	7a 01       	movw	r14, r20
     bce:	8b 01       	movw	r16, r22
     bd0:	6c 01       	movw	r12, r24
	{
		return E_ERROR;
	}
	//send a start condition
	I2C_Start();
     bd2:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <I2C_Start>
	//send the EEPROM page address frame
	I2C_SendAddressFrame(u8EEPROM_Address,Write);
     bd6:	60 e0       	ldi	r22, 0x00	; 0
     bd8:	8c 2f       	mov	r24, r28
     bda:	0e 94 81 0b 	call	0x1702	; 0x1702 <I2C_SendAddressFrame>
	//send the byte address frame
	I2C_SendDataFrame(u8ByteAddress_Page);
     bde:	8c 2d       	mov	r24, r12
     be0:	0e 94 a9 0b 	call	0x1752	; 0x1752 <I2C_SendDataFrame>
	
	for (uint16_t i=0;i<u16ByteCount;i++)
     be4:	c0 e0       	ldi	r28, 0x00	; 0
     be6:	d0 e0       	ldi	r29, 0x00	; 0
     be8:	07 c0       	rjmp	.+14     	; 0xbf8 <EEPROM_WriteString+0x56>
	{
		//send the data
		I2C_SendDataFrame(pu8Data[i]);
     bea:	f7 01       	movw	r30, r14
     bec:	ec 0f       	add	r30, r28
     bee:	fd 1f       	adc	r31, r29
     bf0:	80 81       	ld	r24, Z
     bf2:	0e 94 a9 0b 	call	0x1752	; 0x1752 <I2C_SendDataFrame>
	//send the EEPROM page address frame
	I2C_SendAddressFrame(u8EEPROM_Address,Write);
	//send the byte address frame
	I2C_SendDataFrame(u8ByteAddress_Page);
	
	for (uint16_t i=0;i<u16ByteCount;i++)
     bf6:	21 96       	adiw	r28, 0x01	; 1
     bf8:	c0 17       	cp	r28, r16
     bfa:	d1 07       	cpc	r29, r17
     bfc:	b0 f3       	brcs	.-20     	; 0xbea <EEPROM_WriteString+0x48>
	{
		//send the data
		I2C_SendDataFrame(pu8Data[i]);
	}
	//send a stop bit
	I2C_Stop();
     bfe:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <I2C_Stop>
	return E_OK;
     c02:	81 e0       	ldi	r24, 0x01	; 1
     c04:	03 c0       	rjmp	.+6      	; 0xc0c <EEPROM_WriteString+0x6a>
* Return value: 0=ERROR or 1=SUCCESS
* Description: A function to write a string in the EEPROM in a specific address
************************************************************************************/
enuErrorStatus_t EEPROM_WriteString (uint16_t u16ByteAddress,uint16_t u16ByteCount,uint8_t *pu8Data)
{
	if (pu8Data==NULLPTR)		return E_ERROR;
     c06:	80 e0       	ldi	r24, 0x00	; 0
     c08:	01 c0       	rjmp	.+2      	; 0xc0c <EEPROM_WriteString+0x6a>
	//set up the EEPROM page address frame
	uint8_t u8EEPROM_Address= EEPROM_DEVICE_BASE_ADDRESS | u8PageAddress;
	
	if (u16ByteAddress+u16ByteCount>2047)
	{
		return E_ERROR;
     c0a:	80 e0       	ldi	r24, 0x00	; 0
		I2C_SendDataFrame(pu8Data[i]);
	}
	//send a stop bit
	I2C_Stop();
	return E_OK;
}
     c0c:	df 91       	pop	r29
     c0e:	cf 91       	pop	r28
     c10:	1f 91       	pop	r17
     c12:	0f 91       	pop	r16
     c14:	ff 90       	pop	r15
     c16:	ef 90       	pop	r14
     c18:	df 90       	pop	r13
     c1a:	cf 90       	pop	r12
     c1c:	08 95       	ret

00000c1e <EEPROM_ReadString>:
* Parameters (out): enuErrorStatus_t
* Return value: 0=ERROR or 1=SUCCESS
* Description: A function to read a string from the EEPROM in a specific address
************************************************************************************/
enuErrorStatus_t EEPROM_ReadString  (uint16_t u16ByteAddress,uint16_t u16ByteCount,uint8_t *pu8Data)
{
     c1e:	cf 92       	push	r12
     c20:	df 92       	push	r13
     c22:	ef 92       	push	r14
     c24:	ff 92       	push	r15
     c26:	0f 93       	push	r16
     c28:	1f 93       	push	r17
     c2a:	cf 93       	push	r28
	if (pu8Data==NULLPTR)		return E_ERROR;
     c2c:	41 15       	cp	r20, r1
     c2e:	51 05       	cpc	r21, r1
     c30:	a9 f1       	breq	.+106    	; 0xc9c <EEPROM_ReadString+0x7e>
	//transform the byte address into a page number and a byte address within the page
	uint8_t u8ByteAddress_Page=(uint8_t)u16ByteAddress;
	uint8_t u8PageAddress=(u16ByteAddress>>8)& 0b00000111;
     c32:	29 2f       	mov	r18, r25
     c34:	27 70       	andi	r18, 0x07	; 7
	//set up the EEPROM page address frame
	uint8_t u8EEPROM_Address= EEPROM_DEVICE_BASE_ADDRESS | u8PageAddress;
     c36:	c2 2f       	mov	r28, r18
     c38:	c0 65       	ori	r28, 0x50	; 80
	
	if (u16ByteAddress+u16ByteCount>2047)
     c3a:	9c 01       	movw	r18, r24
     c3c:	26 0f       	add	r18, r22
     c3e:	37 1f       	adc	r19, r23
     c40:	21 15       	cp	r18, r1
     c42:	38 40       	sbci	r19, 0x08	; 8
     c44:	68 f5       	brcc	.+90     	; 0xca0 <EEPROM_ReadString+0x82>
     c46:	8a 01       	movw	r16, r20
     c48:	7b 01       	movw	r14, r22
     c4a:	6c 01       	movw	r12, r24
	{
		return E_ERROR;
	}
	
	//send a start condition
	I2C_Start();
     c4c:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <I2C_Start>
	//send the EEPROM page address frame
	I2C_SendAddressFrame(u8EEPROM_Address,Write);
     c50:	60 e0       	ldi	r22, 0x00	; 0
     c52:	8c 2f       	mov	r24, r28
     c54:	0e 94 81 0b 	call	0x1702	; 0x1702 <I2C_SendAddressFrame>
	//send the byte address frame
	I2C_SendDataFrame(u8ByteAddress_Page);
     c58:	8c 2d       	mov	r24, r12
     c5a:	0e 94 a9 0b 	call	0x1752	; 0x1752 <I2C_SendDataFrame>
	//send a repeated start condition
	I2C_Repeated_Start();
     c5e:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <I2C_Repeated_Start>
	//send the EEPROM page address frame
	I2C_SendAddressFrame(u8EEPROM_Address,Read);
     c62:	61 e0       	ldi	r22, 0x01	; 1
     c64:	8c 2f       	mov	r24, r28
     c66:	0e 94 81 0b 	call	0x1702	; 0x1702 <I2C_SendAddressFrame>
	uint8_t i;
	for (i=0;i<u16ByteCount-1;i++)
     c6a:	c0 e0       	ldi	r28, 0x00	; 0
     c6c:	06 c0       	rjmp	.+12     	; 0xc7a <EEPROM_ReadString+0x5c>
	{
		//receive the data from the EEPROM and send a ACK condition
		I2C_RecieveDataFrame(&pu8Data[i],ACK);
     c6e:	60 e0       	ldi	r22, 0x00	; 0
     c70:	80 0f       	add	r24, r16
     c72:	91 1f       	adc	r25, r17
     c74:	0e 94 c2 0b 	call	0x1784	; 0x1784 <I2C_RecieveDataFrame>
	//send a repeated start condition
	I2C_Repeated_Start();
	//send the EEPROM page address frame
	I2C_SendAddressFrame(u8EEPROM_Address,Read);
	uint8_t i;
	for (i=0;i<u16ByteCount-1;i++)
     c78:	cf 5f       	subi	r28, 0xFF	; 255
     c7a:	8c 2f       	mov	r24, r28
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	97 01       	movw	r18, r14
     c80:	21 50       	subi	r18, 0x01	; 1
     c82:	31 09       	sbc	r19, r1
     c84:	82 17       	cp	r24, r18
     c86:	93 07       	cpc	r25, r19
     c88:	90 f3       	brcs	.-28     	; 0xc6e <EEPROM_ReadString+0x50>
	{
		//receive the data from the EEPROM and send a ACK condition
		I2C_RecieveDataFrame(&pu8Data[i],ACK);
	}	
	//receive the data from the EEPROM and send a NACK condition
	I2C_RecieveDataFrame(&pu8Data[i],NACK);
     c8a:	61 e0       	ldi	r22, 0x01	; 1
     c8c:	80 0f       	add	r24, r16
     c8e:	91 1f       	adc	r25, r17
     c90:	0e 94 c2 0b 	call	0x1784	; 0x1784 <I2C_RecieveDataFrame>
	//send a stop bit
	I2C_Stop();
     c94:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <I2C_Stop>
	return E_OK;
     c98:	81 e0       	ldi	r24, 0x01	; 1
     c9a:	03 c0       	rjmp	.+6      	; 0xca2 <EEPROM_ReadString+0x84>
* Return value: 0=ERROR or 1=SUCCESS
* Description: A function to read a string from the EEPROM in a specific address
************************************************************************************/
enuErrorStatus_t EEPROM_ReadString  (uint16_t u16ByteAddress,uint16_t u16ByteCount,uint8_t *pu8Data)
{
	if (pu8Data==NULLPTR)		return E_ERROR;
     c9c:	80 e0       	ldi	r24, 0x00	; 0
     c9e:	01 c0       	rjmp	.+2      	; 0xca2 <EEPROM_ReadString+0x84>
	//set up the EEPROM page address frame
	uint8_t u8EEPROM_Address= EEPROM_DEVICE_BASE_ADDRESS | u8PageAddress;
	
	if (u16ByteAddress+u16ByteCount>2047)
	{
		return E_ERROR;
     ca0:	80 e0       	ldi	r24, 0x00	; 0
	I2C_RecieveDataFrame(&pu8Data[i],NACK);
	//send a stop bit
	I2C_Stop();
	return E_OK;

}
     ca2:	cf 91       	pop	r28
     ca4:	1f 91       	pop	r17
     ca6:	0f 91       	pop	r16
     ca8:	ff 90       	pop	r15
     caa:	ef 90       	pop	r14
     cac:	df 90       	pop	r13
     cae:	cf 90       	pop	r12
     cb0:	08 95       	ret

00000cb2 <Keypad_CharMapping>:
{
    uint8_t u8OutChar;
	 
    /* Calculating the value the corresponds the current row and column indexes         *
     * e.g: If 8 is pressed (Row = 2, Col = 1) -> Char = (1 + 1) + (3 * 2) = 2 + 6 = 8  */
    switch(KEYPAD_CALCULATE_CORRESPONDING_KEY_VALUE(u8ColIndex, u8RowIndex))
     cb2:	70 e0       	ldi	r23, 0x00	; 0
     cb4:	61 50       	subi	r22, 0x01	; 1
     cb6:	71 09       	sbc	r23, r1
     cb8:	fb 01       	movw	r30, r22
     cba:	ee 0f       	add	r30, r30
     cbc:	ff 1f       	adc	r31, r31
     cbe:	e6 0f       	add	r30, r22
     cc0:	f7 1f       	adc	r31, r23
     cc2:	e8 0f       	add	r30, r24
     cc4:	f1 1d       	adc	r31, r1
     cc6:	31 97       	sbiw	r30, 0x01	; 1
     cc8:	ed 30       	cpi	r30, 0x0D	; 13
     cca:	f1 05       	cpc	r31, r1
     ccc:	10 f5       	brcc	.+68     	; 0xd12 <Keypad_CharMapping+0x60>
     cce:	e6 5d       	subi	r30, 0xD6	; 214
     cd0:	ff 4f       	sbci	r31, 0xFF	; 255
     cd2:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__tablejump2__>
    {
        case 1:     u8OutChar = '1';
     cd6:	81 e3       	ldi	r24, 0x31	; 49
     cd8:	08 95       	ret
                    break;
        case 2:     u8OutChar = '2';
                    break;
        case 3:     u8OutChar = '3';
     cda:	83 e3       	ldi	r24, 0x33	; 51
                    break;
     cdc:	08 95       	ret
        case 4:     (u8ColIndex == 1) ? (u8OutChar = '4') : (u8OutChar = 'A');
     cde:	81 30       	cpi	r24, 0x01	; 1
     ce0:	e1 f4       	brne	.+56     	; 0xd1a <Keypad_CharMapping+0x68>
     ce2:	84 e3       	ldi	r24, 0x34	; 52
     ce4:	08 95       	ret
                    break;
        case 5:     u8OutChar = '5';
     ce6:	85 e3       	ldi	r24, 0x35	; 53
                    break;
     ce8:	08 95       	ret
        case 6:     u8OutChar = '6';
     cea:	86 e3       	ldi	r24, 0x36	; 54
                    break;
     cec:	08 95       	ret
        case 7:     (u8ColIndex == 1) ? (u8OutChar = '7') : (u8OutChar = 'B');
     cee:	81 30       	cpi	r24, 0x01	; 1
     cf0:	b1 f4       	brne	.+44     	; 0xd1e <Keypad_CharMapping+0x6c>
     cf2:	87 e3       	ldi	r24, 0x37	; 55
     cf4:	08 95       	ret
                    break;
        case 8:     u8OutChar = '8';
     cf6:	88 e3       	ldi	r24, 0x38	; 56
                    break;
     cf8:	08 95       	ret
        case 9:     u8OutChar = '9';
     cfa:	89 e3       	ldi	r24, 0x39	; 57
                    break;
     cfc:	08 95       	ret
        case 10:    (u8ColIndex == 1) ? (u8OutChar = '*') : (u8OutChar = 'C');
     cfe:	81 30       	cpi	r24, 0x01	; 1
     d00:	81 f4       	brne	.+32     	; 0xd22 <Keypad_CharMapping+0x70>
     d02:	8a e2       	ldi	r24, 0x2A	; 42
     d04:	08 95       	ret
                    break;
        case 11:    u8OutChar = '0';
     d06:	80 e3       	ldi	r24, 0x30	; 48
                    break;
     d08:	08 95       	ret
        case 12:    u8OutChar = '#';
     d0a:	83 e2       	ldi	r24, 0x23	; 35
                    break;
     d0c:	08 95       	ret
        case 13:    u8OutChar = 'D';
     d0e:	84 e4       	ldi	r24, 0x44	; 68
                    break;
     d10:	08 95       	ret
        default:    u8OutChar = ' ';
     d12:	80 e2       	ldi	r24, 0x20	; 32
     d14:	08 95       	ret
     * e.g: If 8 is pressed (Row = 2, Col = 1) -> Char = (1 + 1) + (3 * 2) = 2 + 6 = 8  */
    switch(KEYPAD_CALCULATE_CORRESPONDING_KEY_VALUE(u8ColIndex, u8RowIndex))
    {
        case 1:     u8OutChar = '1';
                    break;
        case 2:     u8OutChar = '2';
     d16:	82 e3       	ldi	r24, 0x32	; 50
     d18:	08 95       	ret
                    break;
        case 3:     u8OutChar = '3';
                    break;
        case 4:     (u8ColIndex == 1) ? (u8OutChar = '4') : (u8OutChar = 'A');
     d1a:	81 e4       	ldi	r24, 0x41	; 65
     d1c:	08 95       	ret
                    break;
        case 5:     u8OutChar = '5';
                    break;
        case 6:     u8OutChar = '6';
                    break;
        case 7:     (u8ColIndex == 1) ? (u8OutChar = '7') : (u8OutChar = 'B');
     d1e:	82 e4       	ldi	r24, 0x42	; 66
     d20:	08 95       	ret
                    break;
        case 8:     u8OutChar = '8';
                    break;
        case 9:     u8OutChar = '9';
                    break;
        case 10:    (u8ColIndex == 1) ? (u8OutChar = '*') : (u8OutChar = 'C');
     d22:	83 e4       	ldi	r24, 0x43	; 67
        case 13:    u8OutChar = 'D';
                    break;
        default:    u8OutChar = ' ';
    }
    return u8OutChar;
}
     d24:	08 95       	ret

00000d26 <Keypad_Init>:
* Parameters	: enuKeypadType
* Return Value	: enuErrorStatus_t
* Description  : Initialize the Keypad according to the configuration
*************************************************************************************************/
enuErrorStatus_t Keypad_Init(enuKeypadType_t enuKeypadType)
{
     d26:	1f 93       	push	r17
     d28:	cf 93       	push	r28
     d2a:	df 93       	push	r29
	enuErrorStatus_t enuRetVar;
	uint8_t u8LoopIndex;
	
	if((enuKeypadType > KEYPAD_TYPE_MIN_VALUE) && (enuKeypadType < KEYPAD_TYPE_MAX_VALUE))
     d2c:	82 30       	cpi	r24, 0x02	; 2
     d2e:	68 f0       	brcs	.+26     	; 0xd4a <Keypad_Init+0x24>
		enuKeypadState = KEYPAD_INIT_DONE;
		enuRetVar = E_OK;
	}
	else
	{
		enuRetVar = E_ERROR;
     d30:	80 e0       	ldi	r24, 0x00	; 0
     d32:	2e c0       	rjmp	.+92     	; 0xd90 <Keypad_Init+0x6a>
	if((enuKeypadType > KEYPAD_TYPE_MIN_VALUE) && (enuKeypadType < KEYPAD_TYPE_MAX_VALUE))
	{
		for(u8LoopIndex = 0; (u8LoopIndex < (KEYPAD_COLS_NUMBER - enuKeypadType)); u8LoopIndex++)
		{
			/* Initializing all col pins as input */
			DIO_PinInit(au8KeypadCols[u8LoopIndex], INPUT, PULL_UP_ENABLE);
     d34:	ec 2f       	mov	r30, r28
     d36:	f0 e0       	ldi	r31, 0x00	; 0
     d38:	e5 50       	subi	r30, 0x05	; 5
     d3a:	fd 4f       	sbci	r31, 0xFD	; 253
     d3c:	41 e0       	ldi	r20, 0x01	; 1
     d3e:	60 e0       	ldi	r22, 0x00	; 0
     d40:	80 81       	ld	r24, Z
     d42:	0e 94 39 09 	call	0x1272	; 0x1272 <DIO_PinInit>
	enuErrorStatus_t enuRetVar;
	uint8_t u8LoopIndex;
	
	if((enuKeypadType > KEYPAD_TYPE_MIN_VALUE) && (enuKeypadType < KEYPAD_TYPE_MAX_VALUE))
	{
		for(u8LoopIndex = 0; (u8LoopIndex < (KEYPAD_COLS_NUMBER - enuKeypadType)); u8LoopIndex++)
     d46:	cf 5f       	subi	r28, 0xFF	; 255
     d48:	02 c0       	rjmp	.+4      	; 0xd4e <Keypad_Init+0x28>
     d4a:	d8 2f       	mov	r29, r24
     d4c:	c0 e0       	ldi	r28, 0x00	; 0
     d4e:	4c 2f       	mov	r20, r28
     d50:	50 e0       	ldi	r21, 0x00	; 0
     d52:	24 e0       	ldi	r18, 0x04	; 4
     d54:	30 e0       	ldi	r19, 0x00	; 0
     d56:	2d 1b       	sub	r18, r29
     d58:	31 09       	sbc	r19, r1
     d5a:	42 17       	cp	r20, r18
     d5c:	53 07       	cpc	r21, r19
     d5e:	50 f3       	brcs	.-44     	; 0xd34 <Keypad_Init+0xe>
     d60:	c0 e0       	ldi	r28, 0x00	; 0
     d62:	0f c0       	rjmp	.+30     	; 0xd82 <Keypad_Init+0x5c>
			DIO_PinInit(au8KeypadCols[u8LoopIndex], INPUT, PULL_UP_ENABLE);
		}
		for(u8LoopIndex = 0; u8LoopIndex < KEYPAD_ROWS_NUMBER; u8LoopIndex++)
		{
			/* Initializing all row pins as output */
			DIO_PinInit(au8KeypadRows[u8LoopIndex], OUTPUT, NO_CONNECTION);
     d64:	ec 2f       	mov	r30, r28
     d66:	f0 e0       	ldi	r31, 0x00	; 0
     d68:	e1 50       	subi	r30, 0x01	; 1
     d6a:	fd 4f       	sbci	r31, 0xFD	; 253
     d6c:	10 81       	ld	r17, Z
     d6e:	40 e0       	ldi	r20, 0x00	; 0
     d70:	61 e0       	ldi	r22, 0x01	; 1
     d72:	81 2f       	mov	r24, r17
     d74:	0e 94 39 09 	call	0x1272	; 0x1272 <DIO_PinInit>
			/* Initializing all row pins to start detecting a LOW pulse from column pins */
			DIO_PinWrite(au8KeypadRows[u8LoopIndex], HIGH);
     d78:	61 e0       	ldi	r22, 0x01	; 1
     d7a:	81 2f       	mov	r24, r17
     d7c:	0e 94 77 09 	call	0x12ee	; 0x12ee <DIO_PinWrite>
		for(u8LoopIndex = 0; (u8LoopIndex < (KEYPAD_COLS_NUMBER - enuKeypadType)); u8LoopIndex++)
		{
			/* Initializing all col pins as input */
			DIO_PinInit(au8KeypadCols[u8LoopIndex], INPUT, PULL_UP_ENABLE);
		}
		for(u8LoopIndex = 0; u8LoopIndex < KEYPAD_ROWS_NUMBER; u8LoopIndex++)
     d80:	cf 5f       	subi	r28, 0xFF	; 255
     d82:	c4 30       	cpi	r28, 0x04	; 4
     d84:	78 f3       	brcs	.-34     	; 0xd64 <Keypad_Init+0x3e>
			/* Initializing all row pins as output */
			DIO_PinInit(au8KeypadRows[u8LoopIndex], OUTPUT, NO_CONNECTION);
			/* Initializing all row pins to start detecting a LOW pulse from column pins */
			DIO_PinWrite(au8KeypadRows[u8LoopIndex], HIGH);
		}
		enuKeypadTypeState = enuKeypadType;
     d86:	d0 93 13 07 	sts	0x0713, r29	; 0x800713 <enuKeypadTypeState>
		enuKeypadState = KEYPAD_INIT_DONE;
     d8a:	81 e0       	ldi	r24, 0x01	; 1
     d8c:	80 93 14 07 	sts	0x0714, r24	; 0x800714 <enuKeypadState>
	else
	{
		enuRetVar = E_ERROR;
	}
	return enuRetVar;	
}
     d90:	df 91       	pop	r29
     d92:	cf 91       	pop	r28
     d94:	1f 91       	pop	r17
     d96:	08 95       	ret

00000d98 <Keypad_GetChar>:
* Parameters	: pu8Data
* Return Value	: enuErrorStatus_t
* Description  : Get the current character of the pressed key from the Keypad
*************************************************************************************************/
enuErrorStatus_t Keypad_GetChar(uint8_t* pu8Data)
{
     d98:	8f 92       	push	r8
     d9a:	9f 92       	push	r9
     d9c:	bf 92       	push	r11
     d9e:	cf 92       	push	r12
     da0:	df 92       	push	r13
     da2:	ef 92       	push	r14
     da4:	ff 92       	push	r15
     da6:	0f 93       	push	r16
     da8:	1f 93       	push	r17
     daa:	cf 93       	push	r28
     dac:	df 93       	push	r29
     dae:	1f 92       	push	r1
     db0:	cd b7       	in	r28, 0x3d	; 61
     db2:	de b7       	in	r29, 0x3e	; 62
	enuDigitalStates_t enuDigitalState;
	enuDigitalStates_t u8Flag = LOW;
	uint8_t u8RowIndex = 0;
	uint8_t u8ColIndex = 0;
	
	if(enuKeypadState == KEYPAD_INIT_DONE)
     db4:	20 91 14 07 	lds	r18, 0x0714	; 0x800714 <enuKeypadState>
     db8:	21 30       	cpi	r18, 0x01	; 1
     dba:	09 f4       	brne	.+2      	; 0xdbe <Keypad_GetChar+0x26>
     dbc:	49 c0       	rjmp	.+146    	; 0xe50 <Keypad_GetChar+0xb8>
		*pu8Data = Keypad_CharMapping(u8ColIndex, u8RowIndex);
		enuRetVar = E_OK;
	}
	else
	{
		enuRetVar = E_ERROR;
     dbe:	80 e0       	ldi	r24, 0x00	; 0
     dc0:	54 c0       	rjmp	.+168    	; 0xe6a <Keypad_GetChar+0xd2>
		while(u8Flag == LOW)
		{
			for(u8RowIndex = 0; ((u8RowIndex < KEYPAD_ROWS_NUMBER) && (u8Flag == LOW)); u8RowIndex++)
			{
				/* Setting the value of one row */
				DIO_PinWrite(au8KeypadRows[u8RowIndex], LOW);
     dc2:	ec 2c       	mov	r14, r12
     dc4:	f1 2c       	mov	r15, r1
     dc6:	f7 01       	movw	r30, r14
     dc8:	e1 50       	subi	r30, 0x01	; 1
     dca:	fd 4f       	sbci	r31, 0xFD	; 253
     dcc:	60 e0       	ldi	r22, 0x00	; 0
     dce:	80 81       	ld	r24, Z
     dd0:	0e 94 77 09 	call	0x12ee	; 0x12ee <DIO_PinWrite>
				/* Looping on each column to read their values */
				for(u8ColIndex = 0; ((u8ColIndex < (KEYPAD_COLS_NUMBER - enuKeypadTypeState)) && (u8Flag == LOW)); u8ColIndex++)
     dd4:	d1 2c       	mov	r13, r1
     dd6:	1e c0       	rjmp	.+60     	; 0xe14 <Keypad_GetChar+0x7c>
				{
					/* Reading the value of the current column */
					DIO_PinRead(au8KeypadCols[u8ColIndex], &enuDigitalState);
     dd8:	0d 2d       	mov	r16, r13
     dda:	10 e0       	ldi	r17, 0x00	; 0
     ddc:	f8 01       	movw	r30, r16
     dde:	e5 50       	subi	r30, 0x05	; 5
     de0:	fd 4f       	sbci	r31, 0xFD	; 253
     de2:	be 01       	movw	r22, r28
     de4:	6f 5f       	subi	r22, 0xFF	; 255
     de6:	7f 4f       	sbci	r23, 0xFF	; 255
     de8:	80 81       	ld	r24, Z
     dea:	0e 94 9f 09 	call	0x133e	; 0x133e <DIO_PinRead>
					/* Checking if a column is attached to a row / key is pressed to raise a flag and break the loop */
					if(enuDigitalState == LOW)
     dee:	89 81       	ldd	r24, Y+1	; 0x01
     df0:	88 23       	and	r24, r24
     df2:	51 f0       	breq	.+20     	; 0xe08 <Keypad_GetChar+0x70>
     df4:	0e c0       	rjmp	.+28     	; 0xe12 <Keypad_GetChar+0x7a>
						/* Raising the flag to break the loop after a key is pressed */
						u8Flag = HIGH;
						/* Waiting for the key to be released */
						while(enuDigitalState == LOW)
						{
							DIO_PinRead(au8KeypadCols[u8ColIndex], &enuDigitalState);						
     df6:	be 01       	movw	r22, r28
     df8:	6f 5f       	subi	r22, 0xFF	; 255
     dfa:	7f 4f       	sbci	r23, 0xFF	; 255
     dfc:	f8 01       	movw	r30, r16
     dfe:	e5 50       	subi	r30, 0x05	; 5
     e00:	fd 4f       	sbci	r31, 0xFD	; 253
     e02:	80 81       	ld	r24, Z
     e04:	0e 94 9f 09 	call	0x133e	; 0x133e <DIO_PinRead>
					if(enuDigitalState == LOW)
					{
						/* Raising the flag to break the loop after a key is pressed */
						u8Flag = HIGH;
						/* Waiting for the key to be released */
						while(enuDigitalState == LOW)
     e08:	89 81       	ldd	r24, Y+1	; 0x01
     e0a:	88 23       	and	r24, r24
     e0c:	a1 f3       	breq	.-24     	; 0xdf6 <Keypad_GetChar+0x5e>
					DIO_PinRead(au8KeypadCols[u8ColIndex], &enuDigitalState);
					/* Checking if a column is attached to a row / key is pressed to raise a flag and break the loop */
					if(enuDigitalState == LOW)
					{
						/* Raising the flag to break the loop after a key is pressed */
						u8Flag = HIGH;
     e0e:	bb 24       	eor	r11, r11
     e10:	b3 94       	inc	r11
			for(u8RowIndex = 0; ((u8RowIndex < KEYPAD_ROWS_NUMBER) && (u8Flag == LOW)); u8RowIndex++)
			{
				/* Setting the value of one row */
				DIO_PinWrite(au8KeypadRows[u8RowIndex], LOW);
				/* Looping on each column to read their values */
				for(u8ColIndex = 0; ((u8ColIndex < (KEYPAD_COLS_NUMBER - enuKeypadTypeState)) && (u8Flag == LOW)); u8ColIndex++)
     e12:	d3 94       	inc	r13
     e14:	2d 2d       	mov	r18, r13
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	40 91 13 07 	lds	r20, 0x0713	; 0x800713 <enuKeypadTypeState>
     e1c:	84 e0       	ldi	r24, 0x04	; 4
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	84 1b       	sub	r24, r20
     e22:	91 09       	sbc	r25, r1
     e24:	28 17       	cp	r18, r24
     e26:	39 07       	cpc	r19, r25
     e28:	10 f4       	brcc	.+4      	; 0xe2e <Keypad_GetChar+0x96>
     e2a:	bb 20       	and	r11, r11
     e2c:	a9 f2       	breq	.-86     	; 0xdd8 <Keypad_GetChar+0x40>
					else
					{
					}					
				}
				/* Clearing the value of the already set row */
				DIO_PinWrite(au8KeypadRows[u8RowIndex], HIGH);
     e2e:	f7 01       	movw	r30, r14
     e30:	e1 50       	subi	r30, 0x01	; 1
     e32:	fd 4f       	sbci	r31, 0xFD	; 253
     e34:	61 e0       	ldi	r22, 0x01	; 1
     e36:	80 81       	ld	r24, Z
     e38:	0e 94 77 09 	call	0x12ee	; 0x12ee <DIO_PinWrite>
	if(enuKeypadState == KEYPAD_INIT_DONE)
	{
		/* Looping until a key is pressed */
		while(u8Flag == LOW)
		{
			for(u8RowIndex = 0; ((u8RowIndex < KEYPAD_ROWS_NUMBER) && (u8Flag == LOW)); u8RowIndex++)
     e3c:	c3 94       	inc	r12
     e3e:	01 c0       	rjmp	.+2      	; 0xe42 <Keypad_GetChar+0xaa>
     e40:	c1 2c       	mov	r12, r1
     e42:	83 e0       	ldi	r24, 0x03	; 3
     e44:	8c 15       	cp	r24, r12
     e46:	40 f0       	brcs	.+16     	; 0xe58 <Keypad_GetChar+0xc0>
     e48:	bb 20       	and	r11, r11
     e4a:	09 f4       	brne	.+2      	; 0xe4e <Keypad_GetChar+0xb6>
     e4c:	ba cf       	rjmp	.-140    	; 0xdc2 <Keypad_GetChar+0x2a>
     e4e:	04 c0       	rjmp	.+8      	; 0xe58 <Keypad_GetChar+0xc0>
     e50:	4c 01       	movw	r8, r24
     e52:	d1 2c       	mov	r13, r1
     e54:	c1 2c       	mov	r12, r1
     e56:	b1 2c       	mov	r11, r1
	uint8_t u8ColIndex = 0;
	
	if(enuKeypadState == KEYPAD_INIT_DONE)
	{
		/* Looping until a key is pressed */
		while(u8Flag == LOW)
     e58:	bb 20       	and	r11, r11
     e5a:	91 f3       	breq	.-28     	; 0xe40 <Keypad_GetChar+0xa8>
				/* Clearing the value of the already set row */
				DIO_PinWrite(au8KeypadRows[u8RowIndex], HIGH);
			}
		}
		/* Mapping the pressed key to get its corresponding value */
		*pu8Data = Keypad_CharMapping(u8ColIndex, u8RowIndex);
     e5c:	6c 2d       	mov	r22, r12
     e5e:	8d 2d       	mov	r24, r13
     e60:	0e 94 59 06 	call	0xcb2	; 0xcb2 <Keypad_CharMapping>
     e64:	f4 01       	movw	r30, r8
     e66:	80 83       	st	Z, r24
		enuRetVar = E_OK;
     e68:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		enuRetVar = E_ERROR;
	}
	return enuRetVar;
}
     e6a:	0f 90       	pop	r0
     e6c:	df 91       	pop	r29
     e6e:	cf 91       	pop	r28
     e70:	1f 91       	pop	r17
     e72:	0f 91       	pop	r16
     e74:	ff 90       	pop	r15
     e76:	ef 90       	pop	r14
     e78:	df 90       	pop	r13
     e7a:	cf 90       	pop	r12
     e7c:	bf 90       	pop	r11
     e7e:	9f 90       	pop	r9
     e80:	8f 90       	pop	r8
     e82:	08 95       	ret

00000e84 <LCD_Delay>:
* Parameters	: u8DelayValue
* Return Value	: void
* Description  : Give the LCD controller sufficient time to receive commands
*************************************************************************************************/
static void LCD_Delay(uint16_t u16DelayValue)
{
     e84:	0f 93       	push	r16
     e86:	1f 93       	push	r17
     e88:	cf 93       	push	r28
     e8a:	df 93       	push	r29
     e8c:	00 d0       	rcall	.+0      	; 0xe8e <LCD_Delay+0xa>
     e8e:	00 d0       	rcall	.+0      	; 0xe90 <LCD_Delay+0xc>
     e90:	cd b7       	in	r28, 0x3d	; 61
     e92:	de b7       	in	r29, 0x3e	; 62
	volatile uint32_t u32LoopIndex;
	for(u32LoopIndex = 0; (u32LoopIndex < (u16DelayValue * 4)); u32LoopIndex++);
     e94:	19 82       	std	Y+1, r1	; 0x01
     e96:	1a 82       	std	Y+2, r1	; 0x02
     e98:	1b 82       	std	Y+3, r1	; 0x03
     e9a:	1c 82       	std	Y+4, r1	; 0x04
     e9c:	0c c0       	rjmp	.+24     	; 0xeb6 <LCD_Delay+0x32>
     e9e:	49 81       	ldd	r20, Y+1	; 0x01
     ea0:	5a 81       	ldd	r21, Y+2	; 0x02
     ea2:	6b 81       	ldd	r22, Y+3	; 0x03
     ea4:	7c 81       	ldd	r23, Y+4	; 0x04
     ea6:	4f 5f       	subi	r20, 0xFF	; 255
     ea8:	5f 4f       	sbci	r21, 0xFF	; 255
     eaa:	6f 4f       	sbci	r22, 0xFF	; 255
     eac:	7f 4f       	sbci	r23, 0xFF	; 255
     eae:	49 83       	std	Y+1, r20	; 0x01
     eb0:	5a 83       	std	Y+2, r21	; 0x02
     eb2:	6b 83       	std	Y+3, r22	; 0x03
     eb4:	7c 83       	std	Y+4, r23	; 0x04
     eb6:	ac 01       	movw	r20, r24
     eb8:	44 0f       	add	r20, r20
     eba:	55 1f       	adc	r21, r21
     ebc:	44 0f       	add	r20, r20
     ebe:	55 1f       	adc	r21, r21
     ec0:	60 e0       	ldi	r22, 0x00	; 0
     ec2:	70 e0       	ldi	r23, 0x00	; 0
     ec4:	09 81       	ldd	r16, Y+1	; 0x01
     ec6:	1a 81       	ldd	r17, Y+2	; 0x02
     ec8:	2b 81       	ldd	r18, Y+3	; 0x03
     eca:	3c 81       	ldd	r19, Y+4	; 0x04
     ecc:	04 17       	cp	r16, r20
     ece:	15 07       	cpc	r17, r21
     ed0:	26 07       	cpc	r18, r22
     ed2:	37 07       	cpc	r19, r23
     ed4:	20 f3       	brcs	.-56     	; 0xe9e <LCD_Delay+0x1a>
}
     ed6:	0f 90       	pop	r0
     ed8:	0f 90       	pop	r0
     eda:	0f 90       	pop	r0
     edc:	0f 90       	pop	r0
     ede:	df 91       	pop	r29
     ee0:	cf 91       	pop	r28
     ee2:	1f 91       	pop	r17
     ee4:	0f 91       	pop	r16
     ee6:	08 95       	ret

00000ee8 <LCD_SendCommand>:
* Parameters	: u8CommandId
* Return Value	: void
* Description  : Send a given Command to the LCD controller
*************************************************************************************************/
static void LCD_SendCommand(uint8_t u8CommandId)
{
     ee8:	1f 93       	push	r17
     eea:	cf 93       	push	r28
     eec:	df 93       	push	r29
     eee:	c8 2f       	mov	r28, r24
	uint8_t u8LoopIndex;
	uint8_t u8DIOData;
	uint8_t u8Command;

    /* Sending a LOW value on RS to select the u8Command mode on LCD */
	DIO_PinWrite(LCD_RS_PIN_NO, LOW);
     ef0:	60 e0       	ldi	r22, 0x00	; 0
     ef2:	85 e1       	ldi	r24, 0x15	; 21
     ef4:	0e 94 77 09 	call	0x12ee	; 0x12ee <DIO_PinWrite>
	/* Sending a LOW value on RW to specify a write to LCD */
   DIO_PinWrite(LCD_RW_PIN_NO, LOW);
     ef8:	60 e0       	ldi	r22, 0x00	; 0
     efa:	86 e1       	ldi	r24, 0x16	; 22
     efc:	0e 94 77 09 	call	0x12ee	; 0x12ee <DIO_PinWrite>
   /* Sending the 8-bit u8Command on the 8 data pins once */
	if(enuLCDDataModeState == LCD_DATA_EIGHT_BIT_MODE)
     f00:	80 91 15 07 	lds	r24, 0x0715	; 0x800715 <enuLCDDataModeState>
     f04:	88 30       	cpi	r24, 0x08	; 8
     f06:	e1 f4       	brne	.+56     	; 0xf40 <LCD_SendCommand+0x58>
     f08:	0d c0       	rjmp	.+26     	; 0xf24 <LCD_SendCommand+0x3c>
	{
		for(u8LoopIndex = 0; u8LoopIndex < enuLCDDataModeState; u8LoopIndex++)
		{
			/* Getting the LSB of u8CommandId */
         u8DIOData = u8CommandId & 0x01;
     f0a:	6c 2f       	mov	r22, r28
     f0c:	61 70       	andi	r22, 0x01	; 1
         /* Converting from binary value into 8-bit value to be used in DIO_PinWrite() API *
          * e.g: u8DIOData = 0x01 -> u8DIOData = 0xFE + 1 = 0xFF (HIGH)                    *
          *      u8DIOData = 0x00 -> u8DIOData = 0xFF + 1 = 0x00 (LOW)                     */
			u8DIOData = (~u8DIOData)+ 1;
     f0e:	61 95       	neg	r22
         /* Shifting the u8CommandId variable by one for the next loop iteration */
			u8CommandId = u8CommandId >> 1;
     f10:	c6 95       	lsr	r28
         /* Writing the selected bit on its corresponding LCD pin */
			DIO_PinWrite(au8LCDDataPins8BitMode[u8LoopIndex], u8DIOData);
     f12:	ed 2f       	mov	r30, r29
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	e9 5f       	subi	r30, 0xF9	; 249
     f18:	fc 4f       	sbci	r31, 0xFC	; 252
     f1a:	80 81       	ld	r24, Z
     f1c:	0e 94 77 09 	call	0x12ee	; 0x12ee <DIO_PinWrite>
	/* Sending a LOW value on RW to specify a write to LCD */
   DIO_PinWrite(LCD_RW_PIN_NO, LOW);
   /* Sending the 8-bit u8Command on the 8 data pins once */
	if(enuLCDDataModeState == LCD_DATA_EIGHT_BIT_MODE)
	{
		for(u8LoopIndex = 0; u8LoopIndex < enuLCDDataModeState; u8LoopIndex++)
     f20:	df 5f       	subi	r29, 0xFF	; 255
     f22:	01 c0       	rjmp	.+2      	; 0xf26 <LCD_SendCommand+0x3e>
     f24:	d0 e0       	ldi	r29, 0x00	; 0
     f26:	80 91 15 07 	lds	r24, 0x0715	; 0x800715 <enuLCDDataModeState>
     f2a:	d8 17       	cp	r29, r24
     f2c:	70 f3       	brcs	.-36     	; 0xf0a <LCD_SendCommand+0x22>
			u8CommandId = u8CommandId >> 1;
         /* Writing the selected bit on its corresponding LCD pin */
			DIO_PinWrite(au8LCDDataPins8BitMode[u8LoopIndex], u8DIOData);
		}
      /* Triggering a falling edge on EN pin to send the u8Command */
		DIO_PinWrite(LCD_EN_PIN_NO, HIGH);
     f2e:	61 e0       	ldi	r22, 0x01	; 1
     f30:	87 e1       	ldi	r24, 0x17	; 23
     f32:	0e 94 77 09 	call	0x12ee	; 0x12ee <DIO_PinWrite>
		DIO_PinWrite(LCD_EN_PIN_NO, LOW);
     f36:	60 e0       	ldi	r22, 0x00	; 0
     f38:	87 e1       	ldi	r24, 0x17	; 23
     f3a:	0e 94 77 09 	call	0x12ee	; 0x12ee <DIO_PinWrite>
     f3e:	3e c0       	rjmp	.+124    	; 0xfbc <LCD_SendCommand+0xd4>
	}
   /* Sending the 8-bit u8Command on the 4 data pins twice */
	else if(enuLCDDataModeState == LCD_DATA_FOUR_BIT_MODE)
     f40:	84 30       	cpi	r24, 0x04	; 4
     f42:	e1 f5       	brne	.+120    	; 0xfbc <LCD_SendCommand+0xd4>
	{
		/* Specifying the 4 MSB of the u8CommandId */
      u8Command = (u8CommandId & 0xF0) >> 4;
     f44:	1c 2f       	mov	r17, r28
     f46:	12 95       	swap	r17
     f48:	1f 70       	andi	r17, 0x0F	; 15
      /* Sending the MSB on the 4-bit data pins */
		for(u8LoopIndex = 0; u8LoopIndex < enuLCDDataModeState; u8LoopIndex++)
     f4a:	d0 e0       	ldi	r29, 0x00	; 0
     f4c:	0c c0       	rjmp	.+24     	; 0xf66 <LCD_SendCommand+0x7e>
		{
			u8DIOData = u8Command & 0x01;
     f4e:	61 2f       	mov	r22, r17
     f50:	61 70       	andi	r22, 0x01	; 1
			u8DIOData = (~u8DIOData) + 1;
     f52:	61 95       	neg	r22
			u8Command = u8Command >> 1;
     f54:	16 95       	lsr	r17
			DIO_PinWrite(au8LCDDataPins4BitMode[u8LoopIndex], u8DIOData);
     f56:	ed 2f       	mov	r30, r29
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	ed 5f       	subi	r30, 0xFD	; 253
     f5c:	fc 4f       	sbci	r31, 0xFC	; 252
     f5e:	80 81       	ld	r24, Z
     f60:	0e 94 77 09 	call	0x12ee	; 0x12ee <DIO_PinWrite>
	else if(enuLCDDataModeState == LCD_DATA_FOUR_BIT_MODE)
	{
		/* Specifying the 4 MSB of the u8CommandId */
      u8Command = (u8CommandId & 0xF0) >> 4;
      /* Sending the MSB on the 4-bit data pins */
		for(u8LoopIndex = 0; u8LoopIndex < enuLCDDataModeState; u8LoopIndex++)
     f64:	df 5f       	subi	r29, 0xFF	; 255
     f66:	80 91 15 07 	lds	r24, 0x0715	; 0x800715 <enuLCDDataModeState>
     f6a:	d8 17       	cp	r29, r24
     f6c:	80 f3       	brcs	.-32     	; 0xf4e <LCD_SendCommand+0x66>
			u8DIOData = (~u8DIOData) + 1;
			u8Command = u8Command >> 1;
			DIO_PinWrite(au8LCDDataPins4BitMode[u8LoopIndex], u8DIOData);
		}
      /* Triggering a falling edge on EN pin to send the MSB of the u8Command */
		DIO_PinWrite(LCD_EN_PIN_NO, HIGH);
     f6e:	61 e0       	ldi	r22, 0x01	; 1
     f70:	87 e1       	ldi	r24, 0x17	; 23
     f72:	0e 94 77 09 	call	0x12ee	; 0x12ee <DIO_PinWrite>
		DIO_PinWrite(LCD_EN_PIN_NO, LOW);
     f76:	60 e0       	ldi	r22, 0x00	; 0
     f78:	87 e1       	ldi	r24, 0x17	; 23
     f7a:	0e 94 77 09 	call	0x12ee	; 0x12ee <DIO_PinWrite>
      /* Specifying the 4 LSB of the u8CommandId*/
		u8Command = (u8CommandId & 0x0F);
     f7e:	cf 70       	andi	r28, 0x0F	; 15
      /* Sending the LSB on the 4-bit data pins */
		for(u8LoopIndex = 0; u8LoopIndex < enuLCDDataModeState; u8LoopIndex++)
     f80:	d0 e0       	ldi	r29, 0x00	; 0
     f82:	0c c0       	rjmp	.+24     	; 0xf9c <LCD_SendCommand+0xb4>
		{
			u8DIOData = u8Command & 0x01;
     f84:	6c 2f       	mov	r22, r28
     f86:	61 70       	andi	r22, 0x01	; 1
			u8DIOData = (~u8DIOData) + 1;
     f88:	61 95       	neg	r22
			u8Command = u8Command >> 1;
     f8a:	c6 95       	lsr	r28
			DIO_PinWrite(au8LCDDataPins4BitMode[u8LoopIndex], u8DIOData);
     f8c:	ed 2f       	mov	r30, r29
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	ed 5f       	subi	r30, 0xFD	; 253
     f92:	fc 4f       	sbci	r31, 0xFC	; 252
     f94:	80 81       	ld	r24, Z
     f96:	0e 94 77 09 	call	0x12ee	; 0x12ee <DIO_PinWrite>
		DIO_PinWrite(LCD_EN_PIN_NO, HIGH);
		DIO_PinWrite(LCD_EN_PIN_NO, LOW);
      /* Specifying the 4 LSB of the u8CommandId*/
		u8Command = (u8CommandId & 0x0F);
      /* Sending the LSB on the 4-bit data pins */
		for(u8LoopIndex = 0; u8LoopIndex < enuLCDDataModeState; u8LoopIndex++)
     f9a:	df 5f       	subi	r29, 0xFF	; 255
     f9c:	80 91 15 07 	lds	r24, 0x0715	; 0x800715 <enuLCDDataModeState>
     fa0:	d8 17       	cp	r29, r24
     fa2:	80 f3       	brcs	.-32     	; 0xf84 <LCD_SendCommand+0x9c>
			u8DIOData = (~u8DIOData) + 1;
			u8Command = u8Command >> 1;
			DIO_PinWrite(au8LCDDataPins4BitMode[u8LoopIndex], u8DIOData);
		}
        /* Triggering a falling edge on EN pin to send the LSB of the u8Command */
		DIO_PinWrite(LCD_EN_PIN_NO, HIGH);
     fa4:	61 e0       	ldi	r22, 0x01	; 1
     fa6:	87 e1       	ldi	r24, 0x17	; 23
     fa8:	0e 94 77 09 	call	0x12ee	; 0x12ee <DIO_PinWrite>
		DIO_PinWrite(LCD_EN_PIN_NO, LOW);
     fac:	60 e0       	ldi	r22, 0x00	; 0
     fae:	87 e1       	ldi	r24, 0x17	; 23
     fb0:	0e 94 77 09 	call	0x12ee	; 0x12ee <DIO_PinWrite>
		LCD_Delay(200);
     fb4:	88 ec       	ldi	r24, 0xC8	; 200
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	0e 94 42 07 	call	0xe84	; 0xe84 <LCD_Delay>
	}
	else
	{
	}
}
     fbc:	df 91       	pop	r29
     fbe:	cf 91       	pop	r28
     fc0:	1f 91       	pop	r17
     fc2:	08 95       	ret

00000fc4 <LCD_SendData>:
* Parameters	: u8DataId
* Return Value	: void
* Description  : Send a given Data to the LCD controller
*************************************************************************************************/
static void LCD_SendData(uint8_t u8DataId)
{
     fc4:	0f 93       	push	r16
     fc6:	1f 93       	push	r17
     fc8:	cf 93       	push	r28
     fca:	df 93       	push	r29
     fcc:	c8 2f       	mov	r28, r24
	uint16_t u8LoopIndex;
	uint8_t u8DIOData;
	uint8_t u8Command;

   /* Sending a HIGH value on RS to select the data mode on LCD */
	DIO_PinWrite(LCD_RS_PIN_NO, HIGH);
     fce:	61 e0       	ldi	r22, 0x01	; 1
     fd0:	85 e1       	ldi	r24, 0x15	; 21
     fd2:	0e 94 77 09 	call	0x12ee	; 0x12ee <DIO_PinWrite>
	DIO_PinWrite(LCD_RW_PIN_NO, LOW);
     fd6:	60 e0       	ldi	r22, 0x00	; 0
     fd8:	86 e1       	ldi	r24, 0x16	; 22
     fda:	0e 94 77 09 	call	0x12ee	; 0x12ee <DIO_PinWrite>
	if(enuLCDDataModeState == LCD_DATA_EIGHT_BIT_MODE)
     fde:	80 91 15 07 	lds	r24, 0x0715	; 0x800715 <enuLCDDataModeState>
     fe2:	88 30       	cpi	r24, 0x08	; 8
     fe4:	f9 f4       	brne	.+62     	; 0x1024 <LCD_SendData+0x60>
     fe6:	0d c0       	rjmp	.+26     	; 0x1002 <LCD_SendData+0x3e>
	{
		for(u8LoopIndex = 0; u8LoopIndex < enuLCDDataModeState; u8LoopIndex++)
		{
			u8DIOData = u8DataId & 0x01;
     fe8:	6c 2f       	mov	r22, r28
     fea:	61 70       	andi	r22, 0x01	; 1
			u8DIOData = (~u8DIOData) + 1;
     fec:	61 95       	neg	r22
			u8DataId = u8DataId >> 1;
     fee:	c6 95       	lsr	r28
			DIO_PinWrite(au8LCDDataPins8BitMode[u8LoopIndex], u8DIOData);
     ff0:	f8 01       	movw	r30, r16
     ff2:	e9 5f       	subi	r30, 0xF9	; 249
     ff4:	fc 4f       	sbci	r31, 0xFC	; 252
     ff6:	80 81       	ld	r24, Z
     ff8:	0e 94 77 09 	call	0x12ee	; 0x12ee <DIO_PinWrite>
   /* Sending a HIGH value on RS to select the data mode on LCD */
	DIO_PinWrite(LCD_RS_PIN_NO, HIGH);
	DIO_PinWrite(LCD_RW_PIN_NO, LOW);
	if(enuLCDDataModeState == LCD_DATA_EIGHT_BIT_MODE)
	{
		for(u8LoopIndex = 0; u8LoopIndex < enuLCDDataModeState; u8LoopIndex++)
     ffc:	0f 5f       	subi	r16, 0xFF	; 255
     ffe:	1f 4f       	sbci	r17, 0xFF	; 255
    1000:	02 c0       	rjmp	.+4      	; 0x1006 <LCD_SendData+0x42>
    1002:	00 e0       	ldi	r16, 0x00	; 0
    1004:	10 e0       	ldi	r17, 0x00	; 0
    1006:	80 91 15 07 	lds	r24, 0x0715	; 0x800715 <enuLCDDataModeState>
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	08 17       	cp	r16, r24
    100e:	19 07       	cpc	r17, r25
    1010:	58 f3       	brcs	.-42     	; 0xfe8 <LCD_SendData+0x24>
			u8DIOData = u8DataId & 0x01;
			u8DIOData = (~u8DIOData) + 1;
			u8DataId = u8DataId >> 1;
			DIO_PinWrite(au8LCDDataPins8BitMode[u8LoopIndex], u8DIOData);
		}
		DIO_PinWrite(LCD_EN_PIN_NO, HIGH);
    1012:	61 e0       	ldi	r22, 0x01	; 1
    1014:	87 e1       	ldi	r24, 0x17	; 23
    1016:	0e 94 77 09 	call	0x12ee	; 0x12ee <DIO_PinWrite>
		DIO_PinWrite(LCD_EN_PIN_NO, LOW);
    101a:	60 e0       	ldi	r22, 0x00	; 0
    101c:	87 e1       	ldi	r24, 0x17	; 23
    101e:	0e 94 77 09 	call	0x12ee	; 0x12ee <DIO_PinWrite>
    1022:	40 c0       	rjmp	.+128    	; 0x10a4 <LCD_SendData+0xe0>
	}
	else if(enuLCDDataModeState == LCD_DATA_FOUR_BIT_MODE)
    1024:	84 30       	cpi	r24, 0x04	; 4
    1026:	f1 f5       	brne	.+124    	; 0x10a4 <LCD_SendData+0xe0>
	{
		u8Command = (u8DataId & 0xF0) >> 4;
    1028:	dc 2f       	mov	r29, r28
    102a:	d2 95       	swap	r29
    102c:	df 70       	andi	r29, 0x0F	; 15
		for(u8LoopIndex = 0; u8LoopIndex < enuLCDDataModeState; u8LoopIndex++)
    102e:	00 e0       	ldi	r16, 0x00	; 0
    1030:	10 e0       	ldi	r17, 0x00	; 0
    1032:	0c c0       	rjmp	.+24     	; 0x104c <LCD_SendData+0x88>
		{
			u8DIOData = u8Command & 0x01;
    1034:	6d 2f       	mov	r22, r29
    1036:	61 70       	andi	r22, 0x01	; 1
			u8DIOData = (~u8DIOData) + 1;
    1038:	61 95       	neg	r22
			u8Command = u8Command >> 1;
    103a:	d6 95       	lsr	r29
			DIO_PinWrite(au8LCDDataPins4BitMode[u8LoopIndex], u8DIOData);
    103c:	f8 01       	movw	r30, r16
    103e:	ed 5f       	subi	r30, 0xFD	; 253
    1040:	fc 4f       	sbci	r31, 0xFC	; 252
    1042:	80 81       	ld	r24, Z
    1044:	0e 94 77 09 	call	0x12ee	; 0x12ee <DIO_PinWrite>
		DIO_PinWrite(LCD_EN_PIN_NO, LOW);
	}
	else if(enuLCDDataModeState == LCD_DATA_FOUR_BIT_MODE)
	{
		u8Command = (u8DataId & 0xF0) >> 4;
		for(u8LoopIndex = 0; u8LoopIndex < enuLCDDataModeState; u8LoopIndex++)
    1048:	0f 5f       	subi	r16, 0xFF	; 255
    104a:	1f 4f       	sbci	r17, 0xFF	; 255
    104c:	80 91 15 07 	lds	r24, 0x0715	; 0x800715 <enuLCDDataModeState>
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	08 17       	cp	r16, r24
    1054:	19 07       	cpc	r17, r25
    1056:	70 f3       	brcs	.-36     	; 0x1034 <LCD_SendData+0x70>
			u8DIOData = u8Command & 0x01;
			u8DIOData = (~u8DIOData) + 1;
			u8Command = u8Command >> 1;
			DIO_PinWrite(au8LCDDataPins4BitMode[u8LoopIndex], u8DIOData);
		}
		DIO_PinWrite(LCD_EN_PIN_NO, HIGH);
    1058:	61 e0       	ldi	r22, 0x01	; 1
    105a:	87 e1       	ldi	r24, 0x17	; 23
    105c:	0e 94 77 09 	call	0x12ee	; 0x12ee <DIO_PinWrite>
		DIO_PinWrite(LCD_EN_PIN_NO, LOW);
    1060:	60 e0       	ldi	r22, 0x00	; 0
    1062:	87 e1       	ldi	r24, 0x17	; 23
    1064:	0e 94 77 09 	call	0x12ee	; 0x12ee <DIO_PinWrite>
		u8Command = (u8DataId & 0x0F);
    1068:	cf 70       	andi	r28, 0x0F	; 15
		for(u8LoopIndex = 0; u8LoopIndex < enuLCDDataModeState; u8LoopIndex++)
    106a:	00 e0       	ldi	r16, 0x00	; 0
    106c:	10 e0       	ldi	r17, 0x00	; 0
    106e:	0c c0       	rjmp	.+24     	; 0x1088 <LCD_SendData+0xc4>
		{
			u8DIOData = u8Command & 0x01;
    1070:	6c 2f       	mov	r22, r28
    1072:	61 70       	andi	r22, 0x01	; 1
			u8DIOData = (~u8DIOData) + 1;
    1074:	61 95       	neg	r22
			u8Command = u8Command >> 1;
    1076:	c6 95       	lsr	r28
			DIO_PinWrite(au8LCDDataPins4BitMode[u8LoopIndex], u8DIOData);
    1078:	f8 01       	movw	r30, r16
    107a:	ed 5f       	subi	r30, 0xFD	; 253
    107c:	fc 4f       	sbci	r31, 0xFC	; 252
    107e:	80 81       	ld	r24, Z
    1080:	0e 94 77 09 	call	0x12ee	; 0x12ee <DIO_PinWrite>
			DIO_PinWrite(au8LCDDataPins4BitMode[u8LoopIndex], u8DIOData);
		}
		DIO_PinWrite(LCD_EN_PIN_NO, HIGH);
		DIO_PinWrite(LCD_EN_PIN_NO, LOW);
		u8Command = (u8DataId & 0x0F);
		for(u8LoopIndex = 0; u8LoopIndex < enuLCDDataModeState; u8LoopIndex++)
    1084:	0f 5f       	subi	r16, 0xFF	; 255
    1086:	1f 4f       	sbci	r17, 0xFF	; 255
    1088:	80 91 15 07 	lds	r24, 0x0715	; 0x800715 <enuLCDDataModeState>
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	08 17       	cp	r16, r24
    1090:	19 07       	cpc	r17, r25
    1092:	70 f3       	brcs	.-36     	; 0x1070 <LCD_SendData+0xac>
			u8DIOData = u8Command & 0x01;
			u8DIOData = (~u8DIOData) + 1;
			u8Command = u8Command >> 1;
			DIO_PinWrite(au8LCDDataPins4BitMode[u8LoopIndex], u8DIOData);
		}
		DIO_PinWrite(LCD_EN_PIN_NO, HIGH);
    1094:	61 e0       	ldi	r22, 0x01	; 1
    1096:	87 e1       	ldi	r24, 0x17	; 23
    1098:	0e 94 77 09 	call	0x12ee	; 0x12ee <DIO_PinWrite>
		DIO_PinWrite(LCD_EN_PIN_NO, LOW);
    109c:	60 e0       	ldi	r22, 0x00	; 0
    109e:	87 e1       	ldi	r24, 0x17	; 23
    10a0:	0e 94 77 09 	call	0x12ee	; 0x12ee <DIO_PinWrite>
	}
	else
	{
	}
}
    10a4:	df 91       	pop	r29
    10a6:	cf 91       	pop	r28
    10a8:	1f 91       	pop	r17
    10aa:	0f 91       	pop	r16
    10ac:	08 95       	ret

000010ae <LCD_Init>:
* Parameters	: enuLCDDataMode, enuLCDCursorMode
* Return Value	: enuErrorStatus_t
* Description  : Initialize LCD module according to the configuration parameters
*************************************************************************************************/
enuErrorStatus_t LCD_Init(enuLCDDataMode_t enuLCDDataMode, enuLCDCursorMode_t enuLCDCursorMode)
{
    10ae:	1f 93       	push	r17
    10b0:	cf 93       	push	r28
    10b2:	df 93       	push	r29
	enuErrorStatus_t enuRetVar;
	uint8_t u8LoopIndex;
	
	if(((enuLCDDataMode == LCD_DATA_FOUR_BIT_MODE)		|| (enuLCDDataMode == LCD_DATA_EIGHT_BIT_MODE))	&&
    10b4:	84 30       	cpi	r24, 0x04	; 4
    10b6:	19 f0       	breq	.+6      	; 0x10be <LCD_Init+0x10>
    10b8:	88 30       	cpi	r24, 0x08	; 8
    10ba:	09 f0       	breq	.+2      	; 0x10be <LCD_Init+0x10>
    10bc:	51 c0       	rjmp	.+162    	; 0x1160 <LCD_Init+0xb2>
		 (enuLCDCursorMode > LCD_CUROSR_MODE_MIN_VALUE)	&& (enuLCDCursorMode < LCD_CUROSR_MODE_MAX_VALUE))
    10be:	62 30       	cpi	r22, 0x02	; 2
    10c0:	08 f0       	brcs	.+2      	; 0x10c4 <LCD_Init+0x16>
    10c2:	50 c0       	rjmp	.+160    	; 0x1164 <LCD_Init+0xb6>
    10c4:	16 2f       	mov	r17, r22
    10c6:	c8 2f       	mov	r28, r24
	{
		enuLCDDataModeState = enuLCDDataMode;
    10c8:	80 93 15 07 	sts	0x0715, r24	; 0x800715 <enuLCDDataModeState>
		/* Initializing RS pin as output */
		DIO_PinInit(LCD_RS_PIN_NO, OUTPUT, NO_CONNECTION);
    10cc:	40 e0       	ldi	r20, 0x00	; 0
    10ce:	61 e0       	ldi	r22, 0x01	; 1
    10d0:	85 e1       	ldi	r24, 0x15	; 21
    10d2:	0e 94 39 09 	call	0x1272	; 0x1272 <DIO_PinInit>
		/* Initializing RW pin as output */
		DIO_PinInit(LCD_RW_PIN_NO, OUTPUT, NO_CONNECTION);
    10d6:	40 e0       	ldi	r20, 0x00	; 0
    10d8:	61 e0       	ldi	r22, 0x01	; 1
    10da:	86 e1       	ldi	r24, 0x16	; 22
    10dc:	0e 94 39 09 	call	0x1272	; 0x1272 <DIO_PinInit>
		/* Initializing EN pin as output */
		DIO_PinInit(LCD_EN_PIN_NO, OUTPUT, NO_CONNECTION);
    10e0:	40 e0       	ldi	r20, 0x00	; 0
    10e2:	61 e0       	ldi	r22, 0x01	; 1
    10e4:	87 e1       	ldi	r24, 0x17	; 23
    10e6:	0e 94 39 09 	call	0x1272	; 0x1272 <DIO_PinInit>
		/* Selecting whether to interface LCD in 4-bit mode or 8-bit mode */
		if(enuLCDDataMode == LCD_DATA_FOUR_BIT_MODE)
    10ea:	c4 30       	cpi	r28, 0x04	; 4
    10ec:	69 f0       	breq	.+26     	; 0x1108 <LCD_Init+0x5a>
    10ee:	d0 e0       	ldi	r29, 0x00	; 0
    10f0:	22 c0       	rjmp	.+68     	; 0x1136 <LCD_Init+0x88>
		{
			/* Initializing all LCD data pins as outputs */
			for(u8LoopIndex = 0; u8LoopIndex < enuLCDDataMode; u8LoopIndex++)
			{
				DIO_PinInit(au8LCDDataPins4BitMode[u8LoopIndex], OUTPUT, NO_CONNECTION);
    10f2:	ed 2f       	mov	r30, r29
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	ed 5f       	subi	r30, 0xFD	; 253
    10f8:	fc 4f       	sbci	r31, 0xFC	; 252
    10fa:	40 e0       	ldi	r20, 0x00	; 0
    10fc:	61 e0       	ldi	r22, 0x01	; 1
    10fe:	80 81       	ld	r24, Z
    1100:	0e 94 39 09 	call	0x1272	; 0x1272 <DIO_PinInit>
		DIO_PinInit(LCD_EN_PIN_NO, OUTPUT, NO_CONNECTION);
		/* Selecting whether to interface LCD in 4-bit mode or 8-bit mode */
		if(enuLCDDataMode == LCD_DATA_FOUR_BIT_MODE)
		{
			/* Initializing all LCD data pins as outputs */
			for(u8LoopIndex = 0; u8LoopIndex < enuLCDDataMode; u8LoopIndex++)
    1104:	df 5f       	subi	r29, 0xFF	; 255
    1106:	01 c0       	rjmp	.+2      	; 0x110a <LCD_Init+0x5c>
    1108:	d0 e0       	ldi	r29, 0x00	; 0
    110a:	dc 17       	cp	r29, r28
    110c:	90 f3       	brcs	.-28     	; 0x10f2 <LCD_Init+0x44>
			{
				DIO_PinInit(au8LCDDataPins4BitMode[u8LoopIndex], OUTPUT, NO_CONNECTION);
			}
			/* Initializing the LCD module to work as 4-bit data mode */
			LCD_SendCommand(LCD_DATA_FOUR_BIT_MODE_CONFIG_ONE_COMMAND);
    110e:	83 e3       	ldi	r24, 0x33	; 51
    1110:	0e 94 74 07 	call	0xee8	; 0xee8 <LCD_SendCommand>
			LCD_SendCommand(LCD_DATA_FOUR_BIT_MODE_CONFIG_TWO_COMMAND);
    1114:	82 e3       	ldi	r24, 0x32	; 50
    1116:	0e 94 74 07 	call	0xee8	; 0xee8 <LCD_SendCommand>
			LCD_SendCommand(LCD_TWO_LINES_FIVE_TIMES_SEVEN_MATRIX_FOUR_BIT_MODE_COMMAND);
    111a:	88 e2       	ldi	r24, 0x28	; 40
    111c:	0e 94 74 07 	call	0xee8	; 0xee8 <LCD_SendCommand>
    1120:	0f c0       	rjmp	.+30     	; 0x1140 <LCD_Init+0x92>
		else
		{
			/* Initializing all LCD data pins as outputs */
			for(u8LoopIndex = 0; u8LoopIndex < enuLCDDataMode; u8LoopIndex++)
			{
				DIO_PinInit(au8LCDDataPins8BitMode[u8LoopIndex], OUTPUT, NO_CONNECTION);
    1122:	ed 2f       	mov	r30, r29
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	e9 5f       	subi	r30, 0xF9	; 249
    1128:	fc 4f       	sbci	r31, 0xFC	; 252
    112a:	40 e0       	ldi	r20, 0x00	; 0
    112c:	61 e0       	ldi	r22, 0x01	; 1
    112e:	80 81       	ld	r24, Z
    1130:	0e 94 39 09 	call	0x1272	; 0x1272 <DIO_PinInit>
			LCD_SendCommand(LCD_TWO_LINES_FIVE_TIMES_SEVEN_MATRIX_FOUR_BIT_MODE_COMMAND);
		}
		else
		{
			/* Initializing all LCD data pins as outputs */
			for(u8LoopIndex = 0; u8LoopIndex < enuLCDDataMode; u8LoopIndex++)
    1134:	df 5f       	subi	r29, 0xFF	; 255
    1136:	dc 17       	cp	r29, r28
    1138:	a0 f3       	brcs	.-24     	; 0x1122 <LCD_Init+0x74>
			{
				DIO_PinInit(au8LCDDataPins8BitMode[u8LoopIndex], OUTPUT, NO_CONNECTION);
			}		
			/* Initializing the LCD module to work as 8-bit data mode */
			LCD_SendCommand(LCD_TWO_LINES_FIVE_TIMES_SEVEN_MATRIX_EIGHT_BIT_MODE_COMMAND);
    113a:	88 e3       	ldi	r24, 0x38	; 56
    113c:	0e 94 74 07 	call	0xee8	; 0xee8 <LCD_SendCommand>
		}
		/* Selecting whether to turn on/off the blinking cursor */
		if(enuLCDCursorMode == LCD_CURSOR_OFF)
    1140:	11 11       	cpse	r17, r1
    1142:	04 c0       	rjmp	.+8      	; 0x114c <LCD_Init+0x9e>
		{
			LCD_SendCommand(LCD_DISPLAY_ON_CURSOR_OFF_COMMAND);
    1144:	8c e0       	ldi	r24, 0x0C	; 12
    1146:	0e 94 74 07 	call	0xee8	; 0xee8 <LCD_SendCommand>
    114a:	03 c0       	rjmp	.+6      	; 0x1152 <LCD_Init+0xa4>
		}
		else
		{
			LCD_SendCommand(LCD_DISPLAY_ON_CURSOR_BLINKING_COMMAND);
    114c:	8e e0       	ldi	r24, 0x0E	; 14
    114e:	0e 94 74 07 	call	0xee8	; 0xee8 <LCD_SendCommand>
		}
		/* Clearing the LCD screen before use */
		LCD_SendCommand(LCD_CLEAR_DISPLAY_SCREEN_COMMAND);
    1152:	81 e0       	ldi	r24, 0x01	; 1
    1154:	0e 94 74 07 	call	0xee8	; 0xee8 <LCD_SendCommand>
		enuLCDState = LCD_INIT_DONE;
    1158:	81 e0       	ldi	r24, 0x01	; 1
    115a:	80 93 16 07 	sts	0x0716, r24	; 0x800716 <enuLCDState>
		enuRetVar = E_OK;
    115e:	03 c0       	rjmp	.+6      	; 0x1166 <LCD_Init+0xb8>
	}
	else
	{
		enuRetVar = E_ERROR;
    1160:	80 e0       	ldi	r24, 0x00	; 0
    1162:	01 c0       	rjmp	.+2      	; 0x1166 <LCD_Init+0xb8>
    1164:	80 e0       	ldi	r24, 0x00	; 0
	}
	return enuRetVar;
}
    1166:	df 91       	pop	r29
    1168:	cf 91       	pop	r28
    116a:	1f 91       	pop	r17
    116c:	08 95       	ret

0000116e <LCD_Clear>:
*************************************************************************************************/
enuErrorStatus_t LCD_Clear(void)
{
	enuErrorStatus_t enuRetVar;
	
	if(enuLCDState == LCD_INIT_DONE)
    116e:	80 91 16 07 	lds	r24, 0x0716	; 0x800716 <enuLCDState>
    1172:	81 30       	cpi	r24, 0x01	; 1
    1174:	21 f4       	brne	.+8      	; 0x117e <LCD_Clear+0x10>
	{
		/* Clearing the screen */
		LCD_SendCommand(LCD_CLEAR_DISPLAY_SCREEN_COMMAND);
    1176:	0e 94 74 07 	call	0xee8	; 0xee8 <LCD_SendCommand>
		enuRetVar = E_OK;
    117a:	81 e0       	ldi	r24, 0x01	; 1
    117c:	08 95       	ret
	}
	else
	{
		enuRetVar = E_ERROR;
    117e:	80 e0       	ldi	r24, 0x00	; 0
	}
	return enuRetVar;
}
    1180:	08 95       	ret

00001182 <LCD_SetCursorPosition>:
*************************************************************************************************/
enuErrorStatus_t LCD_SetCursorPosition(uint8_t u8Horizontal, uint8_t u8Vertical)
{
	enuErrorStatus_t enuRetVar;
	
	if((u8Vertical == 0) && (enuLCDState == LCD_INIT_DONE))
    1182:	61 11       	cpse	r22, r1
    1184:	09 c0       	rjmp	.+18     	; 0x1198 <LCD_SetCursorPosition+0x16>
    1186:	90 91 16 07 	lds	r25, 0x0716	; 0x800716 <enuLCDState>
    118a:	91 30       	cpi	r25, 0x01	; 1
    118c:	29 f4       	brne	.+10     	; 0x1198 <LCD_SetCursorPosition+0x16>
	{
		/* Moving the cursor in the selected place in the first row */
		LCD_SendCommand(LCD_FORCE_CURSOR_TO_FIRST_LINE_COMMAND + u8Horizontal);
    118e:	80 58       	subi	r24, 0x80	; 128
    1190:	0e 94 74 07 	call	0xee8	; 0xee8 <LCD_SendCommand>
		enuRetVar = E_OK;
    1194:	81 e0       	ldi	r24, 0x01	; 1
    1196:	08 95       	ret
	}
	else if((u8Vertical == 1) && (enuLCDState == LCD_INIT_DONE))
    1198:	61 30       	cpi	r22, 0x01	; 1
    119a:	49 f4       	brne	.+18     	; 0x11ae <LCD_SetCursorPosition+0x2c>
    119c:	90 91 16 07 	lds	r25, 0x0716	; 0x800716 <enuLCDState>
    11a0:	91 30       	cpi	r25, 0x01	; 1
    11a2:	39 f4       	brne	.+14     	; 0x11b2 <LCD_SetCursorPosition+0x30>
	{
		/* Moving the cursor in the selected place in the second row */
		LCD_SendCommand(LCD_FORCE_CURSOR_TO_SECOND_LINE_COMMAND + u8Horizontal);
    11a4:	80 54       	subi	r24, 0x40	; 64
    11a6:	0e 94 74 07 	call	0xee8	; 0xee8 <LCD_SendCommand>
		enuRetVar = E_OK;
    11aa:	81 e0       	ldi	r24, 0x01	; 1
    11ac:	08 95       	ret
	}
	else
	{
		enuRetVar = E_ERROR;
    11ae:	80 e0       	ldi	r24, 0x00	; 0
    11b0:	08 95       	ret
    11b2:	80 e0       	ldi	r24, 0x00	; 0
	}
	return enuRetVar;
}
    11b4:	08 95       	ret

000011b6 <LCD_DisplayChar>:
*************************************************************************************************/
enuErrorStatus_t LCD_DisplayChar(uint8_t u8Char)
{
	enuErrorStatus_t enuRetVar;
	
	if(enuLCDState == LCD_INIT_DONE)
    11b6:	90 91 16 07 	lds	r25, 0x0716	; 0x800716 <enuLCDState>
    11ba:	91 30       	cpi	r25, 0x01	; 1
    11bc:	21 f4       	brne	.+8      	; 0x11c6 <LCD_DisplayChar+0x10>
	{
		/* Displaying the character data on the LCD */
      LCD_SendData(u8Char);
    11be:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <LCD_SendData>
		enuRetVar = E_OK;
    11c2:	81 e0       	ldi	r24, 0x01	; 1
    11c4:	08 95       	ret
	}
	else
	{
		enuRetVar = E_ERROR;
    11c6:	80 e0       	ldi	r24, 0x00	; 0
	}
	return enuRetVar;
}
    11c8:	08 95       	ret

000011ca <LCD_DisplayString>:
* Parameters	: pu8String
* Return Value	: enuErrorStatus_t
* Description  : Display a string on the LCD screen
*************************************************************************************************/
enuErrorStatus_t LCD_DisplayString(uint8_t* pu8String)
{
    11ca:	cf 93       	push	r28
    11cc:	df 93       	push	r29
    11ce:	ec 01       	movw	r28, r24
	enuErrorStatus_t enuRetVar;
	
	if(enuLCDState == LCD_INIT_DONE)
    11d0:	80 91 16 07 	lds	r24, 0x0716	; 0x800716 <enuLCDState>
    11d4:	81 30       	cpi	r24, 0x01	; 1
    11d6:	29 f0       	breq	.+10     	; 0x11e2 <LCD_DisplayString+0x18>
		}
		enuRetVar = E_OK;
	}
	else
	{
		enuRetVar = E_ERROR;
    11d8:	80 e0       	ldi	r24, 0x00	; 0
    11da:	07 c0       	rjmp	.+14     	; 0x11ea <LCD_DisplayString+0x20>
	if(enuLCDState == LCD_INIT_DONE)
	{
		/* Displaying the string data on the LCD */
		while((*pu8String) != '\0')
		{
			LCD_SendData(*pu8String);
    11dc:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <LCD_SendData>
			pu8String ++;
    11e0:	21 96       	adiw	r28, 0x01	; 1
	enuErrorStatus_t enuRetVar;
	
	if(enuLCDState == LCD_INIT_DONE)
	{
		/* Displaying the string data on the LCD */
		while((*pu8String) != '\0')
    11e2:	88 81       	ld	r24, Y
    11e4:	81 11       	cpse	r24, r1
    11e6:	fa cf       	rjmp	.-12     	; 0x11dc <LCD_DisplayString+0x12>
		{
			LCD_SendData(*pu8String);
			pu8String ++;
		}
		enuRetVar = E_OK;
    11e8:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		enuRetVar = E_ERROR;
	}
	return enuRetVar;
}
    11ea:	df 91       	pop	r29
    11ec:	cf 91       	pop	r28
    11ee:	08 95       	ret

000011f0 <LM35_Init>:
* Description  : Initialize the LM35 sensor with the ADC module
*************************************************************************************************/
void LM35_Init(void)
{
	/* Initializing the ADC module to start reading from the LM35 sensor */
	ADC_Init(ADC_AVCC, ADC_DISABLE_LEFT_ADJUST_RESULT, ADC_DIVISOR_FACTOR_IS_128);
    11f0:	47 e0       	ldi	r20, 0x07	; 7
    11f2:	60 e0       	ldi	r22, 0x00	; 0
    11f4:	81 e0       	ldi	r24, 0x01	; 1
    11f6:	0e 94 cb 09 	call	0x1396	; 0x1396 <ADC_Init>
	enuLM35State = LM35_INIT_DONE;
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	80 93 17 07 	sts	0x0717, r24	; 0x800717 <enuLM35State>
    1200:	08 95       	ret

00001202 <LM35_ReadTemperature>:
* Parameters	: pu8Temperature
* Return Value	: enuErrorStatus_t
* Description  : Read the value of the sensor's temperature
*************************************************************************************************/
enuErrorStatus_t LM35_ReadTemperature(uint8_t* pu8Temperature)
{
    1202:	0f 93       	push	r16
    1204:	1f 93       	push	r17
    1206:	cf 93       	push	r28
    1208:	df 93       	push	r29
    120a:	00 d0       	rcall	.+0      	; 0x120c <LM35_ReadTemperature+0xa>
    120c:	cd b7       	in	r28, 0x3d	; 61
    120e:	de b7       	in	r29, 0x3e	; 62
    1210:	9c 01       	movw	r18, r24
	enuErrorStatus_t enuRetVar;
	uint16_t u16ADCData;
	
	if(enuLM35State == LM35_INIT_DONE)
    1212:	90 91 17 07 	lds	r25, 0x0717	; 0x800717 <enuLM35State>
    1216:	91 30       	cpi	r25, 0x01	; 1
    1218:	f9 f4       	brne	.+62     	; 0x1258 <LM35_ReadTemperature+0x56>
    121a:	89 01       	movw	r16, r18
	{
		/* Reading the value of the ADC channel connected to the LM35 sensor */
		ADC_ReadChannel(LM35_ANALOG_DATA_PIN_NO, &u16ADCData);
    121c:	be 01       	movw	r22, r28
    121e:	6f 5f       	subi	r22, 0xFF	; 255
    1220:	7f 4f       	sbci	r23, 0xFF	; 255
    1222:	80 e0       	ldi	r24, 0x00	; 0
    1224:	0e 94 fe 09 	call	0x13fc	; 0x13fc <ADC_ReadChannel>
		/* Converting the ADC value from voltage to Celsius */
		*pu8Temperature = LM35_CALCULATE_TEMPERATURE(u16ADCData);
    1228:	69 81       	ldd	r22, Y+1	; 0x01
    122a:	7a 81       	ldd	r23, Y+2	; 0x02
    122c:	80 e0       	ldi	r24, 0x00	; 0
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <__floatunsisf>
    1234:	20 e0       	ldi	r18, 0x00	; 0
    1236:	30 e4       	ldi	r19, 0x40	; 64
    1238:	4c e9       	ldi	r20, 0x9C	; 156
    123a:	50 e4       	ldi	r21, 0x40	; 64
    123c:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <__mulsf3>
    1240:	20 e0       	ldi	r18, 0x00	; 0
    1242:	30 e0       	ldi	r19, 0x00	; 0
    1244:	40 e2       	ldi	r20, 0x20	; 32
    1246:	51 e4       	ldi	r21, 0x41	; 65
    1248:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <__divsf3>
    124c:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <__fixunssfsi>
    1250:	f8 01       	movw	r30, r16
    1252:	60 83       	st	Z, r22
		enuRetVar = E_OK;
    1254:	81 e0       	ldi	r24, 0x01	; 1
    1256:	01 c0       	rjmp	.+2      	; 0x125a <LM35_ReadTemperature+0x58>
	}
	else
	{
		enuRetVar = E_ERROR;
    1258:	80 e0       	ldi	r24, 0x00	; 0
	}
	return enuRetVar;
}
    125a:	0f 90       	pop	r0
    125c:	0f 90       	pop	r0
    125e:	df 91       	pop	r29
    1260:	cf 91       	pop	r28
    1262:	1f 91       	pop	r17
    1264:	0f 91       	pop	r16
    1266:	08 95       	ret

00001268 <main>:



int main(void)
{
	APP_Init();
    1268:	0e 94 4f 03 	call	0x69e	; 0x69e <APP_Init>

	while(1)
	{
		APP_Update();
    126c:	0e 94 7e 03 	call	0x6fc	; 0x6fc <APP_Update>
    1270:	fd cf       	rjmp	.-6      	; 0x126c <main+0x4>

00001272 <DIO_PinInit>:
	else
	{
		enuRetVar = E_ERROR;
	}
	return enuRetVar;	
}
    1272:	80 32       	cpi	r24, 0x20	; 32
    1274:	b0 f5       	brcc	.+108    	; 0x12e2 <DIO_PinInit+0x70>
    1276:	62 30       	cpi	r22, 0x02	; 2
    1278:	b0 f5       	brcc	.+108    	; 0x12e6 <DIO_PinInit+0x74>
    127a:	42 30       	cpi	r20, 0x02	; 2
    127c:	b0 f5       	brcc	.+108    	; 0x12ea <DIO_PinInit+0x78>
    127e:	e8 2f       	mov	r30, r24
    1280:	e6 95       	lsr	r30
    1282:	e6 95       	lsr	r30
    1284:	e6 95       	lsr	r30
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	e1 5f       	subi	r30, 0xF1	; 241
    128a:	fc 4f       	sbci	r31, 0xFC	; 252
    128c:	e0 81       	ld	r30, Z
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	df 01       	movw	r26, r30
    1292:	5e 91       	ld	r21, -X
    1294:	98 2f       	mov	r25, r24
    1296:	97 70       	andi	r25, 0x07	; 7
    1298:	21 e0       	ldi	r18, 0x01	; 1
    129a:	30 e0       	ldi	r19, 0x00	; 0
    129c:	09 2e       	mov	r0, r25
    129e:	02 c0       	rjmp	.+4      	; 0x12a4 <DIO_PinInit+0x32>
    12a0:	22 0f       	add	r18, r18
    12a2:	33 1f       	adc	r19, r19
    12a4:	0a 94       	dec	r0
    12a6:	e2 f7       	brpl	.-8      	; 0x12a0 <DIO_PinInit+0x2e>
    12a8:	20 95       	com	r18
    12aa:	70 e0       	ldi	r23, 0x00	; 0
    12ac:	09 2e       	mov	r0, r25
    12ae:	02 c0       	rjmp	.+4      	; 0x12b4 <DIO_PinInit+0x42>
    12b0:	66 0f       	add	r22, r22
    12b2:	77 1f       	adc	r23, r23
    12b4:	0a 94       	dec	r0
    12b6:	e2 f7       	brpl	.-8      	; 0x12b0 <DIO_PinInit+0x3e>
    12b8:	35 2f       	mov	r19, r21
    12ba:	32 23       	and	r19, r18
    12bc:	63 2b       	or	r22, r19
    12be:	6c 93       	st	X, r22
    12c0:	30 81       	ld	r19, Z
    12c2:	50 e0       	ldi	r21, 0x00	; 0
    12c4:	02 c0       	rjmp	.+4      	; 0x12ca <DIO_PinInit+0x58>
    12c6:	44 0f       	add	r20, r20
    12c8:	55 1f       	adc	r21, r21
    12ca:	9a 95       	dec	r25
    12cc:	e2 f7       	brpl	.-8      	; 0x12c6 <DIO_PinInit+0x54>
    12ce:	23 23       	and	r18, r19
    12d0:	42 2b       	or	r20, r18
    12d2:	40 83       	st	Z, r20
    12d4:	e8 2f       	mov	r30, r24
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	e8 5e       	subi	r30, 0xE8	; 232
    12da:	f8 4f       	sbci	r31, 0xF8	; 248
    12dc:	81 e0       	ldi	r24, 0x01	; 1
    12de:	80 83       	st	Z, r24
    12e0:	08 95       	ret
    12e2:	80 e0       	ldi	r24, 0x00	; 0
    12e4:	08 95       	ret
    12e6:	80 e0       	ldi	r24, 0x00	; 0
    12e8:	08 95       	ret
    12ea:	80 e0       	ldi	r24, 0x00	; 0
    12ec:	08 95       	ret

000012ee <DIO_PinWrite>:
    12ee:	e8 2f       	mov	r30, r24
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	e8 5e       	subi	r30, 0xE8	; 232
    12f4:	f8 4f       	sbci	r31, 0xF8	; 248
    12f6:	90 81       	ld	r25, Z
    12f8:	91 30       	cpi	r25, 0x01	; 1
    12fa:	f9 f4       	brne	.+62     	; 0x133a <DIO_PinWrite+0x4c>
    12fc:	e8 2f       	mov	r30, r24
    12fe:	e6 95       	lsr	r30
    1300:	e6 95       	lsr	r30
    1302:	e6 95       	lsr	r30
    1304:	f0 e0       	ldi	r31, 0x00	; 0
    1306:	e1 5f       	subi	r30, 0xF1	; 241
    1308:	fc 4f       	sbci	r31, 0xFC	; 252
    130a:	e0 81       	ld	r30, Z
    130c:	f0 e0       	ldi	r31, 0x00	; 0
    130e:	90 81       	ld	r25, Z
    1310:	87 70       	andi	r24, 0x07	; 7
    1312:	21 e0       	ldi	r18, 0x01	; 1
    1314:	30 e0       	ldi	r19, 0x00	; 0
    1316:	08 2e       	mov	r0, r24
    1318:	02 c0       	rjmp	.+4      	; 0x131e <DIO_PinWrite+0x30>
    131a:	22 0f       	add	r18, r18
    131c:	33 1f       	adc	r19, r19
    131e:	0a 94       	dec	r0
    1320:	e2 f7       	brpl	.-8      	; 0x131a <DIO_PinWrite+0x2c>
    1322:	70 e0       	ldi	r23, 0x00	; 0
    1324:	02 c0       	rjmp	.+4      	; 0x132a <DIO_PinWrite+0x3c>
    1326:	66 0f       	add	r22, r22
    1328:	77 1f       	adc	r23, r23
    132a:	8a 95       	dec	r24
    132c:	e2 f7       	brpl	.-8      	; 0x1326 <DIO_PinWrite+0x38>
    132e:	20 95       	com	r18
    1330:	29 23       	and	r18, r25
    1332:	62 2b       	or	r22, r18
    1334:	60 83       	st	Z, r22
    1336:	81 e0       	ldi	r24, 0x01	; 1
    1338:	08 95       	ret
    133a:	80 e0       	ldi	r24, 0x00	; 0
    133c:	08 95       	ret

0000133e <DIO_PinRead>:
*************************************************************************************************/
enuErrorStatus_t DIO_PinRead(enuDIOPinNo_t enuDIOPinNo, uint8_t* pu8PinData)
{
	enuErrorStatus_t enuRetVar;
	
	if(aenuDIOPinState[enuDIOPinNo] == DIO_INIT_DONE)
    133e:	e8 2f       	mov	r30, r24
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	e8 5e       	subi	r30, 0xE8	; 232
    1344:	f8 4f       	sbci	r31, 0xF8	; 248
    1346:	90 81       	ld	r25, Z
    1348:	91 30       	cpi	r25, 0x01	; 1
    134a:	19 f5       	brne	.+70     	; 0x1392 <DIO_PinRead+0x54>
	{
		/* Reading the value from the corresponding pin */
		*pu8PinData = GET_BIT(PINx_R(DIO_PORT_NO(enuDIOPinNo)), DIO_PIN_NO(enuDIOPinNo));
    134c:	e8 2f       	mov	r30, r24
    134e:	e6 95       	lsr	r30
    1350:	e6 95       	lsr	r30
    1352:	e6 95       	lsr	r30
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	e1 5f       	subi	r30, 0xF1	; 241
    1358:	fc 4f       	sbci	r31, 0xFC	; 252
    135a:	e0 81       	ld	r30, Z
    135c:	f0 e0       	ldi	r31, 0x00	; 0
    135e:	32 97       	sbiw	r30, 0x02	; 2
    1360:	90 81       	ld	r25, Z
    1362:	87 70       	andi	r24, 0x07	; 7
    1364:	21 e0       	ldi	r18, 0x01	; 1
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	a9 01       	movw	r20, r18
    136a:	08 2e       	mov	r0, r24
    136c:	02 c0       	rjmp	.+4      	; 0x1372 <DIO_PinRead+0x34>
    136e:	44 0f       	add	r20, r20
    1370:	55 1f       	adc	r21, r21
    1372:	0a 94       	dec	r0
    1374:	e2 f7       	brpl	.-8      	; 0x136e <DIO_PinRead+0x30>
    1376:	29 2f       	mov	r18, r25
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	24 23       	and	r18, r20
    137c:	35 23       	and	r19, r21
    137e:	a9 01       	movw	r20, r18
    1380:	02 c0       	rjmp	.+4      	; 0x1386 <DIO_PinRead+0x48>
    1382:	55 95       	asr	r21
    1384:	47 95       	ror	r20
    1386:	8a 95       	dec	r24
    1388:	e2 f7       	brpl	.-8      	; 0x1382 <DIO_PinRead+0x44>
    138a:	fb 01       	movw	r30, r22
    138c:	40 83       	st	Z, r20
		enuRetVar = E_OK;
    138e:	81 e0       	ldi	r24, 0x01	; 1
    1390:	08 95       	ret
	}
	else
	{
		enuRetVar = E_ERROR;
    1392:	80 e0       	ldi	r24, 0x00	; 0
	}
	return enuRetVar;	
}
    1394:	08 95       	ret

00001396 <ADC_Init>:
*************************************************************************************************/
enuErrorStatus_t ADC_Init(enuADCReferenceSelectionBits_t enuADCReferenceSelectionBits, enuADCLeftAdjustResult_t enuADCLeftAdjustResult, enuADCPrescalerSelectBits_t enuADCPrescalerSelectBits)
{
	enuErrorStatus_t enuRetVar;
    
	if((enuADCReferenceSelectionBits > ADC_REFERENCE_SELECTION_BITS_MIN_VALUE)				&& (enuADCReferenceSelectionBits < ADC_REFERENCE_SELECTION_BITS_MAX_VALUE) &&
    1396:	84 30       	cpi	r24, 0x04	; 4
    1398:	48 f5       	brcc	.+82     	; 0x13ec <ADC_Init+0x56>
		(enuADCReferenceSelectionBits != ADC_REFERENCE_SELECTION_BITS_NOT_VALID_VALUE)	&& (enuADCLeftAdjustResult > ADC_LEFT_ADJUST_RESULT_MIN_VALUE)					&& 
    139a:	82 30       	cpi	r24, 0x02	; 2
    139c:	49 f1       	breq	.+82     	; 0x13f0 <ADC_Init+0x5a>
		(enuADCLeftAdjustResult < ADC_LEFT_ADJUST_RESULT_MAX_VALUE)								&& (enuADCPrescalerSelectBits > ADC_PRESCALER_SELECT_BITS_MIN_VALUE)			&& 
    139e:	62 30       	cpi	r22, 0x02	; 2
    13a0:	48 f5       	brcc	.+82     	; 0x13f4 <ADC_Init+0x5e>
    13a2:	48 30       	cpi	r20, 0x08	; 8
    13a4:	48 f5       	brcc	.+82     	; 0x13f8 <ADC_Init+0x62>
		(enuADCPrescalerSelectBits < ADC_PRESCALER_SELECT_BITS_MAX_VALUE))
	{	   
		/* Selecting whether the voltage reference is AREF, AVCC or Internal VREF */
		ASSIGN_BITS(ADMUX_R, ADC_REFERENCE_SELECT_START_BIT, enuADCReferenceSelectionBits, ADC_REFERENCE_SELECT_MASK);
    13a6:	27 b1       	in	r18, 0x07	; 7
    13a8:	30 e4       	ldi	r19, 0x40	; 64
    13aa:	83 9f       	mul	r24, r19
    13ac:	c0 01       	movw	r24, r0
    13ae:	11 24       	eor	r1, r1
    13b0:	92 2f       	mov	r25, r18
    13b2:	9f 73       	andi	r25, 0x3F	; 63
    13b4:	89 2b       	or	r24, r25
    13b6:	87 b9       	out	0x07, r24	; 7
		/* Selecting whether the output is right adjusted or left adjusted */
		ASSIGN_BIT(ADMUX_R, ADC_LEFT_ADJUST_RESULT_BIT, enuADCLeftAdjustResult);
    13b8:	27 b1       	in	r18, 0x07	; 7
    13ba:	30 e2       	ldi	r19, 0x20	; 32
    13bc:	63 9f       	mul	r22, r19
    13be:	c0 01       	movw	r24, r0
    13c0:	11 24       	eor	r1, r1
    13c2:	92 2f       	mov	r25, r18
    13c4:	9f 7d       	andi	r25, 0xDF	; 223
    13c6:	89 2b       	or	r24, r25
    13c8:	87 b9       	out	0x07, r24	; 7
		/* Saving the state of left adjust result into a temporary variable to be used in the other API */
		enuADCLeftAdjustResultState = enuADCLeftAdjustResult;
    13ca:	60 93 38 07 	sts	0x0738, r22	; 0x800738 <enuADCLeftAdjustResultState>
		/* Selecting the value of the prescaler divisor factor */
		ASSIGN_BITS(ADCSRA_R, ADC_PRESCALER_SELECT_START_BIT, ADC_PRESCALER_SELECT_VALUE(enuADCPrescalerSelectBits), ADC_PRESCALER_SELECT_MASK);
    13ce:	86 b1       	in	r24, 0x06	; 6
    13d0:	88 7f       	andi	r24, 0xF8	; 248
    13d2:	4f 5f       	subi	r20, 0xFF	; 255
    13d4:	48 2b       	or	r20, r24
    13d6:	46 b9       	out	0x06, r20	; 6
		/* Enabling the ADC module */
		SET_BIT(ADCSRA_R, ADC_MODULE_EN_BIT);
    13d8:	86 b1       	in	r24, 0x06	; 6
    13da:	80 68       	ori	r24, 0x80	; 128
    13dc:	86 b9       	out	0x06, r24	; 6
      CLEAR_BIT(ADCSRA_R,3);
    13de:	86 b1       	in	r24, 0x06	; 6
    13e0:	87 7f       	andi	r24, 0xF7	; 247
    13e2:	86 b9       	out	0x06, r24	; 6
		enuADCState = ADC_INIT_DONE;
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	80 93 39 07 	sts	0x0739, r24	; 0x800739 <enuADCState>
		enuRetVar = E_OK;
    13ea:	08 95       	ret
	}
	else
	{
		enuRetVar = E_ERROR;
    13ec:	80 e0       	ldi	r24, 0x00	; 0
    13ee:	08 95       	ret
    13f0:	80 e0       	ldi	r24, 0x00	; 0
    13f2:	08 95       	ret
    13f4:	80 e0       	ldi	r24, 0x00	; 0
    13f6:	08 95       	ret
    13f8:	80 e0       	ldi	r24, 0x00	; 0
	}
	return enuRetVar;
}
    13fa:	08 95       	ret

000013fc <ADC_ReadChannel>:
*************************************************************************************************/
enuErrorStatus_t ADC_ReadChannel(enuADCAnalogChannel_t enuAnalogChannel, uint16_t* pu16Data)
{
	enuErrorStatus_t enuRetVar;
	
   if(enuADCState == ADC_INIT_DONE)
    13fc:	90 91 39 07 	lds	r25, 0x0739	; 0x800739 <enuADCState>
    1400:	91 30       	cpi	r25, 0x01	; 1
    1402:	51 f5       	brne	.+84     	; 0x1458 <ADC_ReadChannel+0x5c>
   {
	   /* Selecting the analog channel(s) used (Single or Differential Input) */
	   ASSIGN_BITS(ADMUX_R, ADC_CHANNEL_SELECT_START_BIT, enuAnalogChannel, ADC_CHANNEL_SELECT_MASK);
    1404:	97 b1       	in	r25, 0x07	; 7
    1406:	90 7e       	andi	r25, 0xE0	; 224
    1408:	89 2b       	or	r24, r25
    140a:	87 b9       	out	0x07, r24	; 7
	   /* Starting the conversion process */
	   SET_BIT(ADCSRA_R, ADC_START_CONVERSION_EN_BIT);
    140c:	86 b1       	in	r24, 0x06	; 6
    140e:	80 64       	ori	r24, 0x40	; 64
    1410:	86 b9       	out	0x06, r24	; 6
		/* Waiting for the ADC conversion until it has successfully been completely */
		while(IS_BIT_CLEAR(ADCSRA_R, ADC_CONVERSION_COMPLETE_FLAG_BIT));
    1412:	34 9b       	sbis	0x06, 4	; 6
    1414:	fe cf       	rjmp	.-4      	; 0x1412 <ADC_ReadChannel+0x16>
		/* Reading the value from the corresponding ADC channel */
      
		if(enuADCLeftAdjustResultState == ADC_DISABLE_LEFT_ADJUST_RESULT)
    1416:	80 91 38 07 	lds	r24, 0x0738	; 0x800738 <enuADCLeftAdjustResultState>
    141a:	81 11       	cpse	r24, r1
    141c:	0c c0       	rjmp	.+24     	; 0x1436 <ADC_ReadChannel+0x3a>
		{
			*pu16Data = ADC_VALUE_RIGHT_ADJUSTED;
    141e:	24 b1       	in	r18, 0x04	; 4
    1420:	85 b1       	in	r24, 0x05	; 5
    1422:	83 70       	andi	r24, 0x03	; 3
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	98 2f       	mov	r25, r24
    1428:	88 27       	eor	r24, r24
    142a:	82 2b       	or	r24, r18
    142c:	fb 01       	movw	r30, r22
    142e:	91 83       	std	Z+1, r25	; 0x01
    1430:	80 83       	st	Z, r24
		}
		else
		{
			*pu16Data = ADC_VALUE_LEFT_ADJUSTED;
		}
	   enuRetVar = E_OK;
    1432:	81 e0       	ldi	r24, 0x01	; 1
    1434:	08 95       	ret
		{
			*pu16Data = ADC_VALUE_RIGHT_ADJUSTED;
		}
		else
		{
			*pu16Data = ADC_VALUE_LEFT_ADJUSTED;
    1436:	24 b1       	in	r18, 0x04	; 4
    1438:	22 95       	swap	r18
    143a:	26 95       	lsr	r18
    143c:	26 95       	lsr	r18
    143e:	23 70       	andi	r18, 0x03	; 3
    1440:	85 b1       	in	r24, 0x05	; 5
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	88 0f       	add	r24, r24
    1446:	99 1f       	adc	r25, r25
    1448:	88 0f       	add	r24, r24
    144a:	99 1f       	adc	r25, r25
    144c:	82 2b       	or	r24, r18
    144e:	fb 01       	movw	r30, r22
    1450:	91 83       	std	Z+1, r25	; 0x01
    1452:	80 83       	st	Z, r24
		}
	   enuRetVar = E_OK;
    1454:	81 e0       	ldi	r24, 0x01	; 1
    1456:	08 95       	ret
   }
   else
   {
	   enuRetVar = E_ERROR;
    1458:	80 e0       	ldi	r24, 0x00	; 0
   }
   return enuRetVar;	
} 
    145a:	08 95       	ret

0000145c <EXTINT_Init>:
enuEXTINTErrorStatus EXTINT_Init(enuEXTINTNum enuInterruptNum)
{
	enuEXTINTErrorStatus enuStatus = EXTINT_ERROR;

	//Enable peripheral interrupt enable
	switch(enuInterruptNum)
    145c:	81 30       	cpi	r24, 0x01	; 1
    145e:	41 f0       	breq	.+16     	; 0x1470 <EXTINT_Init+0x14>
    1460:	18 f0       	brcs	.+6      	; 0x1468 <EXTINT_Init+0xc>
    1462:	82 30       	cpi	r24, 0x02	; 2
    1464:	49 f0       	breq	.+18     	; 0x1478 <EXTINT_Init+0x1c>
    1466:	0b c0       	rjmp	.+22     	; 0x147e <EXTINT_Init+0x22>
	{
	case EXTINT_INT0:
		SET_BIT(GICR_R, INT0_B);
    1468:	8b b7       	in	r24, 0x3b	; 59
    146a:	80 64       	ori	r24, 0x40	; 64
    146c:	8b bf       	out	0x3b, r24	; 59
		break;
    146e:	07 c0       	rjmp	.+14     	; 0x147e <EXTINT_Init+0x22>
	case EXTINT_INT1:
		SET_BIT(GICR_R, INT1_B);
    1470:	8b b7       	in	r24, 0x3b	; 59
    1472:	80 68       	ori	r24, 0x80	; 128
    1474:	8b bf       	out	0x3b, r24	; 59
		break;
    1476:	03 c0       	rjmp	.+6      	; 0x147e <EXTINT_Init+0x22>
	case EXTINT_INT2:
		SET_BIT(GICR_R, INT2_B);
    1478:	8b b7       	in	r24, 0x3b	; 59
    147a:	80 62       	ori	r24, 0x20	; 32
    147c:	8b bf       	out	0x3b, r24	; 59
		break;
	default:
		break;
	}
    //Enable GIE
	SET_BIT(SREG_R, SREG_I_B);
    147e:	8f b7       	in	r24, 0x3f	; 63
    1480:	80 68       	ori	r24, 0x80	; 128
    1482:	8f bf       	out	0x3f, r24	; 63

	enuStatus = EXTINT_OK;

	return enuStatus;
}
    1484:	81 e0       	ldi	r24, 0x01	; 1
    1486:	08 95       	ret

00001488 <EXTINT_SetSenseMode>:
************************************************************************************************/
enuEXTINTErrorStatus EXTINT_SetSenseMode(enuEXTINTSenseControl enuSenseMode, enuEXTINTNum enuInterruptNum)
{
	enuEXTINTErrorStatus enuStatus = EXTINT_ERROR;

    if (enuInterruptNum==EXTINT_INT0)
    1488:	61 11       	cpse	r22, r1
    148a:	24 c0       	rjmp	.+72     	; 0x14d4 <EXTINT_SetSenseMode+0x4c>
    {
		switch(enuSenseMode)
    148c:	81 30       	cpi	r24, 0x01	; 1
    148e:	d9 f0       	breq	.+54     	; 0x14c6 <EXTINT_SetSenseMode+0x3e>
    1490:	28 f0       	brcs	.+10     	; 0x149c <EXTINT_SetSenseMode+0x14>
    1492:	82 30       	cpi	r24, 0x02	; 2
    1494:	89 f0       	breq	.+34     	; 0x14b8 <EXTINT_SetSenseMode+0x30>
    1496:	83 30       	cpi	r24, 0x03	; 3
    1498:	41 f0       	breq	.+16     	; 0x14aa <EXTINT_SetSenseMode+0x22>
    149a:	4f c0       	rjmp	.+158    	; 0x153a <EXTINT_SetSenseMode+0xb2>
		{
		case EXT_LOW_MODE :
		  CLEAR_BIT(MCUCR_R,0);
    149c:	85 b7       	in	r24, 0x35	; 53
    149e:	8e 7f       	andi	r24, 0xFE	; 254
    14a0:	85 bf       	out	0x35, r24	; 53
		  CLEAR_BIT(MCUCR_R,1);
    14a2:	85 b7       	in	r24, 0x35	; 53
    14a4:	8d 7f       	andi	r24, 0xFD	; 253
    14a6:	85 bf       	out	0x35, r24	; 53
		  break;
    14a8:	48 c0       	rjmp	.+144    	; 0x153a <EXTINT_SetSenseMode+0xb2>
		case EXT_RAISING_MODE :
		 SET_BIT(MCUCR_R,0);
    14aa:	85 b7       	in	r24, 0x35	; 53
    14ac:	81 60       	ori	r24, 0x01	; 1
    14ae:	85 bf       	out	0x35, r24	; 53
		 SET_BIT(MCUCR_R,1);
    14b0:	85 b7       	in	r24, 0x35	; 53
    14b2:	82 60       	ori	r24, 0x02	; 2
    14b4:	85 bf       	out	0x35, r24	; 53
		  break;
    14b6:	41 c0       	rjmp	.+130    	; 0x153a <EXTINT_SetSenseMode+0xb2>
		case EXT_FAILLING_MODE :
		  CLEAR_BIT(MCUCR_R,0);
    14b8:	85 b7       	in	r24, 0x35	; 53
    14ba:	8e 7f       	andi	r24, 0xFE	; 254
    14bc:	85 bf       	out	0x35, r24	; 53
		  SET_BIT(MCUCR_R,1);
    14be:	85 b7       	in	r24, 0x35	; 53
    14c0:	82 60       	ori	r24, 0x02	; 2
    14c2:	85 bf       	out	0x35, r24	; 53
		  break;
    14c4:	3a c0       	rjmp	.+116    	; 0x153a <EXTINT_SetSenseMode+0xb2>
		case EXT_CHANGE_MODE :
		  SET_BIT(MCUCR_R,0);
    14c6:	85 b7       	in	r24, 0x35	; 53
    14c8:	81 60       	ori	r24, 0x01	; 1
    14ca:	85 bf       	out	0x35, r24	; 53
		  CLEAR_BIT(MCUCR_R,1);
    14cc:	85 b7       	in	r24, 0x35	; 53
    14ce:	8d 7f       	andi	r24, 0xFD	; 253
    14d0:	85 bf       	out	0x35, r24	; 53
		  break;
    14d2:	33 c0       	rjmp	.+102    	; 0x153a <EXTINT_SetSenseMode+0xb2>
		default:
			break;
		}
    }
    else if (enuInterruptNum==EXTINT_INT1)
    14d4:	61 30       	cpi	r22, 0x01	; 1
    14d6:	21 f5       	brne	.+72     	; 0x1520 <EXTINT_SetSenseMode+0x98>
    {
		switch(enuSenseMode)
    14d8:	81 30       	cpi	r24, 0x01	; 1
    14da:	d9 f0       	breq	.+54     	; 0x1512 <EXTINT_SetSenseMode+0x8a>
    14dc:	28 f0       	brcs	.+10     	; 0x14e8 <EXTINT_SetSenseMode+0x60>
    14de:	82 30       	cpi	r24, 0x02	; 2
    14e0:	89 f0       	breq	.+34     	; 0x1504 <EXTINT_SetSenseMode+0x7c>
    14e2:	83 30       	cpi	r24, 0x03	; 3
    14e4:	41 f0       	breq	.+16     	; 0x14f6 <EXTINT_SetSenseMode+0x6e>
    14e6:	29 c0       	rjmp	.+82     	; 0x153a <EXTINT_SetSenseMode+0xb2>
		{
		case EXT_LOW_MODE :
		  CLEAR_BIT(MCUCR_R,2);
    14e8:	85 b7       	in	r24, 0x35	; 53
    14ea:	8b 7f       	andi	r24, 0xFB	; 251
    14ec:	85 bf       	out	0x35, r24	; 53
	      CLEAR_BIT(MCUCR_R,3);
    14ee:	85 b7       	in	r24, 0x35	; 53
    14f0:	87 7f       	andi	r24, 0xF7	; 247
    14f2:	85 bf       	out	0x35, r24	; 53
		  break;
    14f4:	22 c0       	rjmp	.+68     	; 0x153a <EXTINT_SetSenseMode+0xb2>
		case EXT_RAISING_MODE :
		  SET_BIT(MCUCR_R,2);
    14f6:	85 b7       	in	r24, 0x35	; 53
    14f8:	84 60       	ori	r24, 0x04	; 4
    14fa:	85 bf       	out	0x35, r24	; 53
		  SET_BIT(MCUCR_R,3);
    14fc:	85 b7       	in	r24, 0x35	; 53
    14fe:	88 60       	ori	r24, 0x08	; 8
    1500:	85 bf       	out	0x35, r24	; 53
		  break;
    1502:	1b c0       	rjmp	.+54     	; 0x153a <EXTINT_SetSenseMode+0xb2>
		case EXT_FAILLING_MODE :
		  CLEAR_BIT(MCUCR_R,2);
    1504:	85 b7       	in	r24, 0x35	; 53
    1506:	8b 7f       	andi	r24, 0xFB	; 251
    1508:	85 bf       	out	0x35, r24	; 53
		  SET_BIT(MCUCR_R,3);
    150a:	85 b7       	in	r24, 0x35	; 53
    150c:	88 60       	ori	r24, 0x08	; 8
    150e:	85 bf       	out	0x35, r24	; 53
		  break;
    1510:	14 c0       	rjmp	.+40     	; 0x153a <EXTINT_SetSenseMode+0xb2>
		case EXT_CHANGE_MODE :
		  SET_BIT(MCUCR_R,2);
    1512:	85 b7       	in	r24, 0x35	; 53
    1514:	84 60       	ori	r24, 0x04	; 4
    1516:	85 bf       	out	0x35, r24	; 53
		  CLEAR_BIT(MCUCR_R,3);
    1518:	85 b7       	in	r24, 0x35	; 53
    151a:	87 7f       	andi	r24, 0xF7	; 247
    151c:	85 bf       	out	0x35, r24	; 53
		  break;
    151e:	0d c0       	rjmp	.+26     	; 0x153a <EXTINT_SetSenseMode+0xb2>
		default:
			break;
		}
    }
    else if (enuInterruptNum==EXTINT_INT2)
    1520:	62 30       	cpi	r22, 0x02	; 2
    1522:	59 f4       	brne	.+22     	; 0x153a <EXTINT_SetSenseMode+0xb2>
    {
		switch(enuSenseMode)
    1524:	82 30       	cpi	r24, 0x02	; 2
    1526:	31 f0       	breq	.+12     	; 0x1534 <EXTINT_SetSenseMode+0xac>
    1528:	83 30       	cpi	r24, 0x03	; 3
    152a:	39 f4       	brne	.+14     	; 0x153a <EXTINT_SetSenseMode+0xb2>
		{
		case EXT_RAISING_MODE :
			SET_BIT(MCUCR_R,6);
    152c:	85 b7       	in	r24, 0x35	; 53
    152e:	80 64       	ori	r24, 0x40	; 64
    1530:	85 bf       	out	0x35, r24	; 53
			break;
    1532:	03 c0       	rjmp	.+6      	; 0x153a <EXTINT_SetSenseMode+0xb2>
		case EXT_FAILLING_MODE :
			CLEAR_BIT(MCUCR_R,6);
    1534:	85 b7       	in	r24, 0x35	; 53
    1536:	8f 7b       	andi	r24, 0xBF	; 191
    1538:	85 bf       	out	0x35, r24	; 53
    }

	enuStatus = EXTINT_OK;

	return enuStatus;
}
    153a:	81 e0       	ldi	r24, 0x01	; 1
    153c:	08 95       	ret

0000153e <EXTINT_SetCallBack>:
* Return Value    : enuEXTINTErrorStatus - For error handling if the user input an invalid parameter
* Description     : A function to set the sense mode of the External interrupt
************************************************************************************************/
enuEXTINTErrorStatus EXTINT_SetCallBack(void(*pCallBack)(void), enuEXTINTNum enuInterruptNum)
{
   if (pCallBack==NULLPTR)
    153e:	00 97       	sbiw	r24, 0x00	; 0
    1540:	c1 f0       	breq	.+48     	; 0x1572 <EXTINT_SetCallBack+0x34>
   {
      return EXTINT_ERROR;
   }
	if(enuInterruptNum==EXTINT_INT0)
    1542:	61 11       	cpse	r22, r1
    1544:	06 c0       	rjmp	.+12     	; 0x1552 <EXTINT_SetCallBack+0x14>
		pEXTINT0CallBack = pCallBack;
    1546:	90 93 46 07 	sts	0x0746, r25	; 0x800746 <pEXTINT0CallBack+0x1>
    154a:	80 93 45 07 	sts	0x0745, r24	; 0x800745 <pEXTINT0CallBack>
	else if(enuInterruptNum==EXTINT_INT1)
		pEXTINT1CallBack = pCallBack;
	else if(enuInterruptNum==EXTINT_INT2)
		pEXTINT2CallBack = pCallBack;

	return EXTINT_OK;
    154e:	81 e0       	ldi	r24, 0x01	; 1
    1550:	08 95       	ret
   {
      return EXTINT_ERROR;
   }
	if(enuInterruptNum==EXTINT_INT0)
		pEXTINT0CallBack = pCallBack;
	else if(enuInterruptNum==EXTINT_INT1)
    1552:	61 30       	cpi	r22, 0x01	; 1
    1554:	31 f4       	brne	.+12     	; 0x1562 <EXTINT_SetCallBack+0x24>
		pEXTINT1CallBack = pCallBack;
    1556:	90 93 42 07 	sts	0x0742, r25	; 0x800742 <pEXTINT1CallBack+0x1>
    155a:	80 93 41 07 	sts	0x0741, r24	; 0x800741 <pEXTINT1CallBack>
	else if(enuInterruptNum==EXTINT_INT2)
		pEXTINT2CallBack = pCallBack;

	return EXTINT_OK;
    155e:	81 e0       	ldi	r24, 0x01	; 1
    1560:	08 95       	ret
   }
	if(enuInterruptNum==EXTINT_INT0)
		pEXTINT0CallBack = pCallBack;
	else if(enuInterruptNum==EXTINT_INT1)
		pEXTINT1CallBack = pCallBack;
	else if(enuInterruptNum==EXTINT_INT2)
    1562:	62 30       	cpi	r22, 0x02	; 2
    1564:	41 f4       	brne	.+16     	; 0x1576 <EXTINT_SetCallBack+0x38>
		pEXTINT2CallBack = pCallBack;
    1566:	90 93 44 07 	sts	0x0744, r25	; 0x800744 <pEXTINT2CallBack+0x1>
    156a:	80 93 43 07 	sts	0x0743, r24	; 0x800743 <pEXTINT2CallBack>

	return EXTINT_OK;
    156e:	81 e0       	ldi	r24, 0x01	; 1
    1570:	08 95       	ret
************************************************************************************************/
enuEXTINTErrorStatus EXTINT_SetCallBack(void(*pCallBack)(void), enuEXTINTNum enuInterruptNum)
{
   if (pCallBack==NULLPTR)
   {
      return EXTINT_ERROR;
    1572:	80 e0       	ldi	r24, 0x00	; 0
    1574:	08 95       	ret
	else if(enuInterruptNum==EXTINT_INT1)
		pEXTINT1CallBack = pCallBack;
	else if(enuInterruptNum==EXTINT_INT2)
		pEXTINT2CallBack = pCallBack;

	return EXTINT_OK;
    1576:	81 e0       	ldi	r24, 0x01	; 1
}
    1578:	08 95       	ret

0000157a <__vector_1>:
/* ISR to handle the External Interrupt Request 2 */
void __vector_3(void) __attribute__ ((signal,used));

/* ISR to handle the External Interrupt Request 0 */
void __vector_1(void)
{
    157a:	1f 92       	push	r1
    157c:	0f 92       	push	r0
    157e:	0f b6       	in	r0, 0x3f	; 63
    1580:	0f 92       	push	r0
    1582:	11 24       	eor	r1, r1
    1584:	2f 93       	push	r18
    1586:	3f 93       	push	r19
    1588:	4f 93       	push	r20
    158a:	5f 93       	push	r21
    158c:	6f 93       	push	r22
    158e:	7f 93       	push	r23
    1590:	8f 93       	push	r24
    1592:	9f 93       	push	r25
    1594:	af 93       	push	r26
    1596:	bf 93       	push	r27
    1598:	ef 93       	push	r30
    159a:	ff 93       	push	r31
   if (pEXTINT0CallBack!=NULLPTR)
    159c:	e0 91 45 07 	lds	r30, 0x0745	; 0x800745 <pEXTINT0CallBack>
    15a0:	f0 91 46 07 	lds	r31, 0x0746	; 0x800746 <pEXTINT0CallBack+0x1>
    15a4:	30 97       	sbiw	r30, 0x00	; 0
    15a6:	09 f0       	breq	.+2      	; 0x15aa <__vector_1+0x30>
   {
      pEXTINT0CallBack();
    15a8:	09 95       	icall
   }
}
    15aa:	ff 91       	pop	r31
    15ac:	ef 91       	pop	r30
    15ae:	bf 91       	pop	r27
    15b0:	af 91       	pop	r26
    15b2:	9f 91       	pop	r25
    15b4:	8f 91       	pop	r24
    15b6:	7f 91       	pop	r23
    15b8:	6f 91       	pop	r22
    15ba:	5f 91       	pop	r21
    15bc:	4f 91       	pop	r20
    15be:	3f 91       	pop	r19
    15c0:	2f 91       	pop	r18
    15c2:	0f 90       	pop	r0
    15c4:	0f be       	out	0x3f, r0	; 63
    15c6:	0f 90       	pop	r0
    15c8:	1f 90       	pop	r1
    15ca:	18 95       	reti

000015cc <__vector_2>:

/* ISR to handle the External Interrupt Request 1 */
void __vector_2(void)
{
    15cc:	1f 92       	push	r1
    15ce:	0f 92       	push	r0
    15d0:	0f b6       	in	r0, 0x3f	; 63
    15d2:	0f 92       	push	r0
    15d4:	11 24       	eor	r1, r1
    15d6:	2f 93       	push	r18
    15d8:	3f 93       	push	r19
    15da:	4f 93       	push	r20
    15dc:	5f 93       	push	r21
    15de:	6f 93       	push	r22
    15e0:	7f 93       	push	r23
    15e2:	8f 93       	push	r24
    15e4:	9f 93       	push	r25
    15e6:	af 93       	push	r26
    15e8:	bf 93       	push	r27
    15ea:	ef 93       	push	r30
    15ec:	ff 93       	push	r31
   if (pEXTINT1CallBack!=NULLPTR)
    15ee:	e0 91 41 07 	lds	r30, 0x0741	; 0x800741 <pEXTINT1CallBack>
    15f2:	f0 91 42 07 	lds	r31, 0x0742	; 0x800742 <pEXTINT1CallBack+0x1>
    15f6:	30 97       	sbiw	r30, 0x00	; 0
    15f8:	09 f0       	breq	.+2      	; 0x15fc <__vector_2+0x30>
   {
      pEXTINT1CallBack();
    15fa:	09 95       	icall
   }
}
    15fc:	ff 91       	pop	r31
    15fe:	ef 91       	pop	r30
    1600:	bf 91       	pop	r27
    1602:	af 91       	pop	r26
    1604:	9f 91       	pop	r25
    1606:	8f 91       	pop	r24
    1608:	7f 91       	pop	r23
    160a:	6f 91       	pop	r22
    160c:	5f 91       	pop	r21
    160e:	4f 91       	pop	r20
    1610:	3f 91       	pop	r19
    1612:	2f 91       	pop	r18
    1614:	0f 90       	pop	r0
    1616:	0f be       	out	0x3f, r0	; 63
    1618:	0f 90       	pop	r0
    161a:	1f 90       	pop	r1
    161c:	18 95       	reti

0000161e <__vector_3>:

/* ISR to handle the External Interrupt Request 2 */
void __vector_3(void)
{
    161e:	1f 92       	push	r1
    1620:	0f 92       	push	r0
    1622:	0f b6       	in	r0, 0x3f	; 63
    1624:	0f 92       	push	r0
    1626:	11 24       	eor	r1, r1
    1628:	2f 93       	push	r18
    162a:	3f 93       	push	r19
    162c:	4f 93       	push	r20
    162e:	5f 93       	push	r21
    1630:	6f 93       	push	r22
    1632:	7f 93       	push	r23
    1634:	8f 93       	push	r24
    1636:	9f 93       	push	r25
    1638:	af 93       	push	r26
    163a:	bf 93       	push	r27
    163c:	ef 93       	push	r30
    163e:	ff 93       	push	r31
   if (pEXTINT2CallBack!=NULLPTR)
    1640:	e0 91 43 07 	lds	r30, 0x0743	; 0x800743 <pEXTINT2CallBack>
    1644:	f0 91 44 07 	lds	r31, 0x0744	; 0x800744 <pEXTINT2CallBack+0x1>
    1648:	30 97       	sbiw	r30, 0x00	; 0
    164a:	09 f0       	breq	.+2      	; 0x164e <__vector_3+0x30>
   {
      pEXTINT2CallBack();
    164c:	09 95       	icall
   }
}
    164e:	ff 91       	pop	r31
    1650:	ef 91       	pop	r30
    1652:	bf 91       	pop	r27
    1654:	af 91       	pop	r26
    1656:	9f 91       	pop	r25
    1658:	8f 91       	pop	r24
    165a:	7f 91       	pop	r23
    165c:	6f 91       	pop	r22
    165e:	5f 91       	pop	r21
    1660:	4f 91       	pop	r20
    1662:	3f 91       	pop	r19
    1664:	2f 91       	pop	r18
    1666:	0f 90       	pop	r0
    1668:	0f be       	out	0x3f, r0	; 63
    166a:	0f 90       	pop	r0
    166c:	1f 90       	pop	r1
    166e:	18 95       	reti

00001670 <I2C_GetStatus>:
      return E_ERROR;
   }
   //set the callback function to the sent function pointer
   I2C_Callback=local_fptr;
   return E_OK;
}
    1670:	81 b1       	in	r24, 0x01	; 1
    1672:	88 7f       	andi	r24, 0xF8	; 248
    1674:	08 95       	ret

00001676 <I2C_Init>:
    1676:	81 b1       	in	r24, 0x01	; 1
    1678:	8c 7f       	andi	r24, 0xFC	; 252
    167a:	81 b9       	out	0x01, r24	; 1
    167c:	81 b1       	in	r24, 0x01	; 1
    167e:	83 60       	ori	r24, 0x03	; 3
    1680:	81 b9       	out	0x01, r24	; 1
    1682:	80 e0       	ldi	r24, 0x00	; 0
    1684:	64 e0       	ldi	r22, 0x04	; 4
    1686:	70 e0       	ldi	r23, 0x00	; 0
    1688:	08 c0       	rjmp	.+16     	; 0x169a <I2C_Init+0x24>
    168a:	9b 01       	movw	r18, r22
    168c:	22 9f       	mul	r18, r18
    168e:	b0 01       	movw	r22, r0
    1690:	23 9f       	mul	r18, r19
    1692:	70 0d       	add	r23, r0
    1694:	70 0d       	add	r23, r0
    1696:	11 24       	eor	r1, r1
    1698:	8f 5f       	subi	r24, 0xFF	; 255
    169a:	83 30       	cpi	r24, 0x03	; 3
    169c:	b0 f3       	brcs	.-20     	; 0x168a <I2C_Init+0x14>
    169e:	66 0f       	add	r22, r22
    16a0:	77 1f       	adc	r23, r23
    16a2:	80 e4       	ldi	r24, 0x40	; 64
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <__udivmodhi4>
    16aa:	60 b9       	out	0x00, r22	; 0
    16ac:	85 e0       	ldi	r24, 0x05	; 5
    16ae:	82 b9       	out	0x02, r24	; 2
    16b0:	86 b7       	in	r24, 0x36	; 54
    16b2:	80 64       	ori	r24, 0x40	; 64
    16b4:	86 bf       	out	0x36, r24	; 54
    16b6:	86 b7       	in	r24, 0x36	; 54
    16b8:	80 68       	ori	r24, 0x80	; 128
    16ba:	86 bf       	out	0x36, r24	; 54
    16bc:	86 b7       	in	r24, 0x36	; 54
    16be:	84 60       	ori	r24, 0x04	; 4
    16c0:	86 bf       	out	0x36, r24	; 54
    16c2:	81 e0       	ldi	r24, 0x01	; 1
    16c4:	08 95       	ret

000016c6 <I2C_Start>:
    16c6:	84 ea       	ldi	r24, 0xA4	; 164
    16c8:	86 bf       	out	0x36, r24	; 54
    16ca:	06 b6       	in	r0, 0x36	; 54
    16cc:	07 fe       	sbrs	r0, 7
    16ce:	fd cf       	rjmp	.-6      	; 0x16ca <I2C_Start+0x4>
    16d0:	0e 94 38 0b 	call	0x1670	; 0x1670 <I2C_GetStatus>
    16d4:	88 30       	cpi	r24, 0x08	; 8
    16d6:	11 f4       	brne	.+4      	; 0x16dc <I2C_Start+0x16>
    16d8:	81 e0       	ldi	r24, 0x01	; 1
    16da:	08 95       	ret
    16dc:	80 e0       	ldi	r24, 0x00	; 0
    16de:	08 95       	ret

000016e0 <I2C_Repeated_Start>:
    16e0:	84 ea       	ldi	r24, 0xA4	; 164
    16e2:	86 bf       	out	0x36, r24	; 54
    16e4:	06 b6       	in	r0, 0x36	; 54
    16e6:	07 fe       	sbrs	r0, 7
    16e8:	fd cf       	rjmp	.-6      	; 0x16e4 <I2C_Repeated_Start+0x4>
    16ea:	0e 94 38 0b 	call	0x1670	; 0x1670 <I2C_GetStatus>
    16ee:	80 31       	cpi	r24, 0x10	; 16
    16f0:	11 f0       	breq	.+4      	; 0x16f6 <I2C_Repeated_Start+0x16>
    16f2:	80 e0       	ldi	r24, 0x00	; 0
    16f4:	08 95       	ret
    16f6:	81 e0       	ldi	r24, 0x01	; 1
    16f8:	08 95       	ret

000016fa <I2C_Stop>:
    16fa:	84 e9       	ldi	r24, 0x94	; 148
    16fc:	86 bf       	out	0x36, r24	; 54
    16fe:	81 e0       	ldi	r24, 0x01	; 1
    1700:	08 95       	ret

00001702 <I2C_SendAddressFrame>:
    1702:	62 30       	cpi	r22, 0x02	; 2
    1704:	f0 f4       	brcc	.+60     	; 0x1742 <I2C_SendAddressFrame+0x40>
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	88 0f       	add	r24, r24
    170a:	99 1f       	adc	r25, r25
    170c:	86 2b       	or	r24, r22
    170e:	83 b9       	out	0x03, r24	; 3
    1710:	84 e8       	ldi	r24, 0x84	; 132
    1712:	86 bf       	out	0x36, r24	; 54
    1714:	06 b6       	in	r0, 0x36	; 54
    1716:	07 fe       	sbrs	r0, 7
    1718:	fd cf       	rjmp	.-6      	; 0x1714 <I2C_SendAddressFrame+0x12>
    171a:	61 30       	cpi	r22, 0x01	; 1
    171c:	41 f4       	brne	.+16     	; 0x172e <I2C_SendAddressFrame+0x2c>
    171e:	0e 94 38 0b 	call	0x1670	; 0x1670 <I2C_GetStatus>
    1722:	80 34       	cpi	r24, 0x40	; 64
    1724:	81 f0       	breq	.+32     	; 0x1746 <I2C_SendAddressFrame+0x44>
    1726:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <I2C_Stop>
    172a:	80 e0       	ldi	r24, 0x00	; 0
    172c:	08 95       	ret
    172e:	61 11       	cpse	r22, r1
    1730:	0c c0       	rjmp	.+24     	; 0x174a <I2C_SendAddressFrame+0x48>
    1732:	0e 94 38 0b 	call	0x1670	; 0x1670 <I2C_GetStatus>
    1736:	88 31       	cpi	r24, 0x18	; 24
    1738:	51 f0       	breq	.+20     	; 0x174e <I2C_SendAddressFrame+0x4c>
    173a:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <I2C_Stop>
    173e:	80 e0       	ldi	r24, 0x00	; 0
    1740:	08 95       	ret
    1742:	80 e0       	ldi	r24, 0x00	; 0
    1744:	08 95       	ret
    1746:	81 e0       	ldi	r24, 0x01	; 1
    1748:	08 95       	ret
    174a:	81 e0       	ldi	r24, 0x01	; 1
    174c:	08 95       	ret
    174e:	81 e0       	ldi	r24, 0x01	; 1
    1750:	08 95       	ret

00001752 <I2C_SendDataFrame>:
    1752:	06 b6       	in	r0, 0x36	; 54
    1754:	07 fe       	sbrs	r0, 7
    1756:	fd cf       	rjmp	.-6      	; 0x1752 <I2C_SendDataFrame>
    1758:	83 b9       	out	0x03, r24	; 3
    175a:	84 e8       	ldi	r24, 0x84	; 132
    175c:	86 bf       	out	0x36, r24	; 54
    175e:	06 b6       	in	r0, 0x36	; 54
    1760:	07 fe       	sbrs	r0, 7
    1762:	fd cf       	rjmp	.-6      	; 0x175e <I2C_SendDataFrame+0xc>
    1764:	0e 94 38 0b 	call	0x1670	; 0x1670 <I2C_GetStatus>
    1768:	88 32       	cpi	r24, 0x28	; 40
    176a:	31 f0       	breq	.+12     	; 0x1778 <I2C_SendDataFrame+0x26>
    176c:	88 3b       	cpi	r24, 0xB8	; 184
    176e:	31 f0       	breq	.+12     	; 0x177c <I2C_SendDataFrame+0x2a>
    1770:	88 3c       	cpi	r24, 0xC8	; 200
    1772:	31 f4       	brne	.+12     	; 0x1780 <I2C_SendDataFrame+0x2e>
    1774:	81 e0       	ldi	r24, 0x01	; 1
    1776:	08 95       	ret
    1778:	81 e0       	ldi	r24, 0x01	; 1
    177a:	08 95       	ret
    177c:	81 e0       	ldi	r24, 0x01	; 1
    177e:	08 95       	ret
    1780:	80 e0       	ldi	r24, 0x00	; 0
    1782:	08 95       	ret

00001784 <I2C_RecieveDataFrame>:
    1784:	0f 93       	push	r16
    1786:	1f 93       	push	r17
    1788:	cf 93       	push	r28
    178a:	00 97       	sbiw	r24, 0x00	; 0
    178c:	39 f1       	breq	.+78     	; 0x17dc <I2C_RecieveDataFrame+0x58>
    178e:	06 b6       	in	r0, 0x36	; 54
    1790:	07 fe       	sbrs	r0, 7
    1792:	fd cf       	rjmp	.-6      	; 0x178e <I2C_RecieveDataFrame+0xa>
    1794:	66 23       	and	r22, r22
    1796:	19 f0       	breq	.+6      	; 0x179e <I2C_RecieveDataFrame+0x1a>
    1798:	61 30       	cpi	r22, 0x01	; 1
    179a:	21 f0       	breq	.+8      	; 0x17a4 <I2C_RecieveDataFrame+0x20>
    179c:	21 c0       	rjmp	.+66     	; 0x17e0 <I2C_RecieveDataFrame+0x5c>
    179e:	24 ec       	ldi	r18, 0xC4	; 196
    17a0:	26 bf       	out	0x36, r18	; 54
    17a2:	02 c0       	rjmp	.+4      	; 0x17a8 <I2C_RecieveDataFrame+0x24>
    17a4:	24 e8       	ldi	r18, 0x84	; 132
    17a6:	26 bf       	out	0x36, r18	; 54
    17a8:	06 b6       	in	r0, 0x36	; 54
    17aa:	07 fe       	sbrs	r0, 7
    17ac:	fd cf       	rjmp	.-6      	; 0x17a8 <I2C_RecieveDataFrame+0x24>
    17ae:	c6 2f       	mov	r28, r22
    17b0:	8c 01       	movw	r16, r24
    17b2:	0e 94 38 0b 	call	0x1670	; 0x1670 <I2C_GetStatus>
    17b6:	cc 23       	and	r28, r28
    17b8:	19 f0       	breq	.+6      	; 0x17c0 <I2C_RecieveDataFrame+0x3c>
    17ba:	c1 30       	cpi	r28, 0x01	; 1
    17bc:	31 f0       	breq	.+12     	; 0x17ca <I2C_RecieveDataFrame+0x46>
    17be:	09 c0       	rjmp	.+18     	; 0x17d2 <I2C_RecieveDataFrame+0x4e>
    17c0:	80 35       	cpi	r24, 0x50	; 80
    17c2:	39 f0       	breq	.+14     	; 0x17d2 <I2C_RecieveDataFrame+0x4e>
    17c4:	80 38       	cpi	r24, 0x80	; 128
    17c6:	71 f4       	brne	.+28     	; 0x17e4 <I2C_RecieveDataFrame+0x60>
    17c8:	04 c0       	rjmp	.+8      	; 0x17d2 <I2C_RecieveDataFrame+0x4e>
    17ca:	88 35       	cpi	r24, 0x58	; 88
    17cc:	11 f0       	breq	.+4      	; 0x17d2 <I2C_RecieveDataFrame+0x4e>
    17ce:	88 38       	cpi	r24, 0x88	; 136
    17d0:	59 f4       	brne	.+22     	; 0x17e8 <I2C_RecieveDataFrame+0x64>
    17d2:	83 b1       	in	r24, 0x03	; 3
    17d4:	f8 01       	movw	r30, r16
    17d6:	80 83       	st	Z, r24
    17d8:	81 e0       	ldi	r24, 0x01	; 1
    17da:	07 c0       	rjmp	.+14     	; 0x17ea <I2C_RecieveDataFrame+0x66>
    17dc:	80 e0       	ldi	r24, 0x00	; 0
    17de:	05 c0       	rjmp	.+10     	; 0x17ea <I2C_RecieveDataFrame+0x66>
    17e0:	80 e0       	ldi	r24, 0x00	; 0
    17e2:	03 c0       	rjmp	.+6      	; 0x17ea <I2C_RecieveDataFrame+0x66>
    17e4:	80 e0       	ldi	r24, 0x00	; 0
    17e6:	01 c0       	rjmp	.+2      	; 0x17ea <I2C_RecieveDataFrame+0x66>
    17e8:	80 e0       	ldi	r24, 0x00	; 0
    17ea:	cf 91       	pop	r28
    17ec:	1f 91       	pop	r17
    17ee:	0f 91       	pop	r16
    17f0:	08 95       	ret

000017f2 <__vector_19>:
* Parameters (out): void
* Return value: void
* Description: I2C event interrupt service routine
************************************************************************************/
ISR(TWI_vect)
{
    17f2:	1f 92       	push	r1
    17f4:	0f 92       	push	r0
    17f6:	0f b6       	in	r0, 0x3f	; 63
    17f8:	0f 92       	push	r0
    17fa:	11 24       	eor	r1, r1
    17fc:	2f 93       	push	r18
    17fe:	3f 93       	push	r19
    1800:	4f 93       	push	r20
    1802:	5f 93       	push	r21
    1804:	6f 93       	push	r22
    1806:	7f 93       	push	r23
    1808:	8f 93       	push	r24
    180a:	9f 93       	push	r25
    180c:	af 93       	push	r26
    180e:	bf 93       	push	r27
    1810:	ef 93       	push	r30
    1812:	ff 93       	push	r31
   //check if callback function pointer points to a valid function
   if(I2C_Callback != NULLPTR)
    1814:	e0 91 3a 07 	lds	r30, 0x073A	; 0x80073a <I2C_Callback>
    1818:	f0 91 3b 07 	lds	r31, 0x073B	; 0x80073b <I2C_Callback+0x1>
    181c:	30 97       	sbiw	r30, 0x00	; 0
    181e:	09 f0       	breq	.+2      	; 0x1822 <__vector_19+0x30>
   {
      //call the callback function
      I2C_Callback();
    1820:	09 95       	icall
   }
}
    1822:	ff 91       	pop	r31
    1824:	ef 91       	pop	r30
    1826:	bf 91       	pop	r27
    1828:	af 91       	pop	r26
    182a:	9f 91       	pop	r25
    182c:	8f 91       	pop	r24
    182e:	7f 91       	pop	r23
    1830:	6f 91       	pop	r22
    1832:	5f 91       	pop	r21
    1834:	4f 91       	pop	r20
    1836:	3f 91       	pop	r19
    1838:	2f 91       	pop	r18
    183a:	0f 90       	pop	r0
    183c:	0f be       	out	0x3f, r0	; 63
    183e:	0f 90       	pop	r0
    1840:	1f 90       	pop	r1
    1842:	18 95       	reti

00001844 <SPI_initMaster>:
    	SPI_sendData(*(pu8Data+u8i));
    }

    SPI_sendData('\0');
//    SPI_sendData('\n');
}
    1844:	40 e0       	ldi	r20, 0x00	; 0
    1846:	61 e0       	ldi	r22, 0x01	; 1
    1848:	8c e0       	ldi	r24, 0x0C	; 12
    184a:	0e 94 39 09 	call	0x1272	; 0x1272 <DIO_PinInit>
    184e:	40 e0       	ldi	r20, 0x00	; 0
    1850:	61 e0       	ldi	r22, 0x01	; 1
    1852:	8d e0       	ldi	r24, 0x0D	; 13
    1854:	0e 94 39 09 	call	0x1272	; 0x1272 <DIO_PinInit>
    1858:	40 e0       	ldi	r20, 0x00	; 0
    185a:	60 e0       	ldi	r22, 0x00	; 0
    185c:	8e e0       	ldi	r24, 0x0E	; 14
    185e:	0e 94 39 09 	call	0x1272	; 0x1272 <DIO_PinInit>
    1862:	40 e0       	ldi	r20, 0x00	; 0
    1864:	61 e0       	ldi	r22, 0x01	; 1
    1866:	8f e0       	ldi	r24, 0x0F	; 15
    1868:	0e 94 39 09 	call	0x1272	; 0x1272 <DIO_PinInit>
    186c:	85 e5       	ldi	r24, 0x55	; 85
    186e:	8d b9       	out	0x0d, r24	; 13
    1870:	08 95       	ret

00001872 <SPI_init>:
    1872:	0e 94 22 0c 	call	0x1844	; 0x1844 <SPI_initMaster>
    1876:	08 95       	ret

00001878 <SPI_receiveData>:
    1878:	cf 93       	push	r28
    187a:	df 93       	push	r29
    187c:	ec 01       	movw	r28, r24
    187e:	60 e0       	ldi	r22, 0x00	; 0
    1880:	8c e0       	ldi	r24, 0x0C	; 12
    1882:	0e 94 77 09 	call	0x12ee	; 0x12ee <DIO_PinWrite>
    1886:	88 81       	ld	r24, Y
    1888:	8f b9       	out	0x0f, r24	; 15
    188a:	77 9b       	sbis	0x0e, 7	; 14
    188c:	fe cf       	rjmp	.-4      	; 0x188a <SPI_receiveData+0x12>
    188e:	8f b1       	in	r24, 0x0f	; 15
    1890:	88 83       	st	Y, r24
    1892:	61 e0       	ldi	r22, 0x01	; 1
    1894:	8c e0       	ldi	r24, 0x0C	; 12
    1896:	0e 94 77 09 	call	0x12ee	; 0x12ee <DIO_PinWrite>
    189a:	df 91       	pop	r29
    189c:	cf 91       	pop	r28
    189e:	08 95       	ret

000018a0 <SPI_receiveString>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to receive String via SPI
************************************************************************************************/
void SPI_receiveString(uint8_t *pu8Data, uint8_t u8BufferMaxSize)
{
    18a0:	ef 92       	push	r14
    18a2:	ff 92       	push	r15
    18a4:	0f 93       	push	r16
    18a6:	1f 93       	push	r17
    18a8:	cf 93       	push	r28
    18aa:	df 93       	push	r29
    18ac:	7c 01       	movw	r14, r24
    18ae:	d6 2f       	mov	r29, r22
    uint8_t u8i;
    for (u8i=0; u8i < u8BufferMaxSize;u8i++)
    18b0:	c0 e0       	ldi	r28, 0x00	; 0
    18b2:	0b c0       	rjmp	.+22     	; 0x18ca <SPI_receiveString+0x2a>
    {

    	SPI_receiveData(&pu8Data[u8i]);
    18b4:	87 01       	movw	r16, r14
    18b6:	0c 0f       	add	r16, r28
    18b8:	11 1d       	adc	r17, r1
    18ba:	c8 01       	movw	r24, r16
    18bc:	0e 94 3c 0c 	call	0x1878	; 0x1878 <SPI_receiveData>
        if (*(pu8Data+u8i)==0)
    18c0:	f8 01       	movw	r30, r16
    18c2:	80 81       	ld	r24, Z
    18c4:	88 23       	and	r24, r24
    18c6:	19 f0       	breq	.+6      	; 0x18ce <SPI_receiveString+0x2e>
* Description     : A function to receive String via SPI
************************************************************************************************/
void SPI_receiveString(uint8_t *pu8Data, uint8_t u8BufferMaxSize)
{
    uint8_t u8i;
    for (u8i=0; u8i < u8BufferMaxSize;u8i++)
    18c8:	cf 5f       	subi	r28, 0xFF	; 255
    18ca:	cd 17       	cp	r28, r29
    18cc:	98 f3       	brcs	.-26     	; 0x18b4 <SPI_receiveString+0x14>
           break;
        }
    }
    //end the string with null
    //pu8Data[u8i]='\0';
}
    18ce:	df 91       	pop	r29
    18d0:	cf 91       	pop	r28
    18d2:	1f 91       	pop	r17
    18d4:	0f 91       	pop	r16
    18d6:	ff 90       	pop	r15
    18d8:	ef 90       	pop	r14
    18da:	08 95       	ret

000018dc <UART_Init>:
	//check if the sent pointer points to a valid position
	if (local_fptr== NULLPTR)     return E_ERROR;
	//if so, store the pointer address in the global pointer to function
	RXC_Callback=local_fptr;
	return E_OK;
}
    18dc:	10 bc       	out	0x20, r1	; 32
    18de:	83 e3       	ldi	r24, 0x33	; 51
    18e0:	89 b9       	out	0x09, r24	; 9
    18e2:	88 e1       	ldi	r24, 0x18	; 24
    18e4:	8a b9       	out	0x0a, r24	; 10
    18e6:	86 e8       	ldi	r24, 0x86	; 134
    18e8:	80 bd       	out	0x20, r24	; 32
    18ea:	80 b5       	in	r24, 0x20	; 32
    18ec:	8f 77       	andi	r24, 0x7F	; 127
    18ee:	80 bd       	out	0x20, r24	; 32
    18f0:	81 e0       	ldi	r24, 0x01	; 1
    18f2:	80 93 40 07 	sts	0x0740, r24	; 0x800740 <gError>
    18f6:	08 95       	ret

000018f8 <UART_SendData>:
    18f8:	98 2f       	mov	r25, r24
    18fa:	80 91 40 07 	lds	r24, 0x0740	; 0x800740 <gError>
    18fe:	88 23       	and	r24, r24
    1900:	41 f0       	breq	.+16     	; 0x1912 <UART_SendData+0x1a>
    1902:	81 e0       	ldi	r24, 0x01	; 1
    1904:	80 93 40 07 	sts	0x0740, r24	; 0x800740 <gError>
    1908:	5d 9b       	sbis	0x0b, 5	; 11
    190a:	fe cf       	rjmp	.-4      	; 0x1908 <UART_SendData+0x10>
    190c:	9c b9       	out	0x0c, r25	; 12
    190e:	80 91 40 07 	lds	r24, 0x0740	; 0x800740 <gError>
    1912:	08 95       	ret

00001914 <UART_ReceiveData>:
    1914:	fc 01       	movw	r30, r24
    1916:	80 91 40 07 	lds	r24, 0x0740	; 0x800740 <gError>
    191a:	88 23       	and	r24, r24
    191c:	59 f0       	breq	.+22     	; 0x1934 <UART_ReceiveData+0x20>
    191e:	81 e0       	ldi	r24, 0x01	; 1
    1920:	80 93 40 07 	sts	0x0740, r24	; 0x800740 <gError>
    1924:	5f 9b       	sbis	0x0b, 7	; 11
    1926:	fe cf       	rjmp	.-4      	; 0x1924 <UART_ReceiveData+0x10>
    1928:	2c b1       	in	r18, 0x0c	; 12
    192a:	30 e0       	ldi	r19, 0x00	; 0
    192c:	31 83       	std	Z+1, r19	; 0x01
    192e:	20 83       	st	Z, r18
    1930:	80 91 40 07 	lds	r24, 0x0740	; 0x800740 <gError>
    1934:	08 95       	ret

00001936 <UART_SendString>:
    1936:	ef 92       	push	r14
    1938:	ff 92       	push	r15
    193a:	0f 93       	push	r16
    193c:	1f 93       	push	r17
    193e:	cf 93       	push	r28
    1940:	7c 01       	movw	r14, r24
    1942:	80 91 40 07 	lds	r24, 0x0740	; 0x800740 <gError>
    1946:	88 23       	and	r24, r24
    1948:	b1 f0       	breq	.+44     	; 0x1976 <UART_SendString+0x40>
    194a:	81 e0       	ldi	r24, 0x01	; 1
    194c:	80 93 40 07 	sts	0x0740, r24	; 0x800740 <gError>
    1950:	c0 e0       	ldi	r28, 0x00	; 0
    1952:	0d c0       	rjmp	.+26     	; 0x196e <UART_SendString+0x38>
    1954:	87 01       	movw	r16, r14
    1956:	0c 0f       	add	r16, r28
    1958:	11 1d       	adc	r17, r1
    195a:	f8 01       	movw	r30, r16
    195c:	80 81       	ld	r24, Z
    195e:	90 e0       	ldi	r25, 0x00	; 0
    1960:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <UART_SendData>
    1964:	f8 01       	movw	r30, r16
    1966:	90 81       	ld	r25, Z
    1968:	99 23       	and	r25, r25
    196a:	19 f0       	breq	.+6      	; 0x1972 <UART_SendString+0x3c>
    196c:	cf 5f       	subi	r28, 0xFF	; 255
    196e:	cf 3f       	cpi	r28, 0xFF	; 255
    1970:	89 f7       	brne	.-30     	; 0x1954 <UART_SendString+0x1e>
    1972:	80 91 40 07 	lds	r24, 0x0740	; 0x800740 <gError>
    1976:	cf 91       	pop	r28
    1978:	1f 91       	pop	r17
    197a:	0f 91       	pop	r16
    197c:	ff 90       	pop	r15
    197e:	ef 90       	pop	r14
    1980:	08 95       	ret

00001982 <UART_ReceiveString>:
    1982:	ef 92       	push	r14
    1984:	ff 92       	push	r15
    1986:	0f 93       	push	r16
    1988:	1f 93       	push	r17
    198a:	cf 93       	push	r28
    198c:	df 93       	push	r29
    198e:	7c 01       	movw	r14, r24
    1990:	80 91 40 07 	lds	r24, 0x0740	; 0x800740 <gError>
    1994:	88 23       	and	r24, r24
    1996:	d1 f0       	breq	.+52     	; 0x19cc <UART_ReceiveString+0x4a>
    1998:	d6 2f       	mov	r29, r22
    199a:	81 e0       	ldi	r24, 0x01	; 1
    199c:	80 93 40 07 	sts	0x0740, r24	; 0x800740 <gError>
    19a0:	c0 e0       	ldi	r28, 0x00	; 0
    19a2:	10 c0       	rjmp	.+32     	; 0x19c4 <UART_ReceiveString+0x42>
    19a4:	87 01       	movw	r16, r14
    19a6:	0c 0f       	add	r16, r28
    19a8:	11 1d       	adc	r17, r1
    19aa:	c8 01       	movw	r24, r16
    19ac:	0e 94 8a 0c 	call	0x1914	; 0x1914 <UART_ReceiveData>
    19b0:	f8 01       	movw	r30, r16
    19b2:	90 81       	ld	r25, Z
    19b4:	9d 30       	cpi	r25, 0x0D	; 13
    19b6:	11 f0       	breq	.+4      	; 0x19bc <UART_ReceiveString+0x3a>
    19b8:	9a 30       	cpi	r25, 0x0A	; 10
    19ba:	19 f4       	brne	.+6      	; 0x19c2 <UART_ReceiveString+0x40>
    19bc:	f8 01       	movw	r30, r16
    19be:	10 82       	st	Z, r1
    19c0:	03 c0       	rjmp	.+6      	; 0x19c8 <UART_ReceiveString+0x46>
    19c2:	cf 5f       	subi	r28, 0xFF	; 255
    19c4:	cd 17       	cp	r28, r29
    19c6:	70 f3       	brcs	.-36     	; 0x19a4 <UART_ReceiveString+0x22>
    19c8:	80 91 40 07 	lds	r24, 0x0740	; 0x800740 <gError>
    19cc:	df 91       	pop	r29
    19ce:	cf 91       	pop	r28
    19d0:	1f 91       	pop	r17
    19d2:	0f 91       	pop	r16
    19d4:	ff 90       	pop	r15
    19d6:	ef 90       	pop	r14
    19d8:	08 95       	ret

000019da <__vector_13>:


/* ISRs----------------------------------------------------------*/

ISR(UART_RX_vect)
{
    19da:	1f 92       	push	r1
    19dc:	0f 92       	push	r0
    19de:	0f b6       	in	r0, 0x3f	; 63
    19e0:	0f 92       	push	r0
    19e2:	11 24       	eor	r1, r1
    19e4:	2f 93       	push	r18
    19e6:	3f 93       	push	r19
    19e8:	4f 93       	push	r20
    19ea:	5f 93       	push	r21
    19ec:	6f 93       	push	r22
    19ee:	7f 93       	push	r23
    19f0:	8f 93       	push	r24
    19f2:	9f 93       	push	r25
    19f4:	af 93       	push	r26
    19f6:	bf 93       	push	r27
    19f8:	ef 93       	push	r30
    19fa:	ff 93       	push	r31
	//if the global pointer to function points to a valid position
	if (RXC_Callback!=NULLPTR)
    19fc:	e0 91 3e 07 	lds	r30, 0x073E	; 0x80073e <RXC_Callback>
    1a00:	f0 91 3f 07 	lds	r31, 0x073F	; 0x80073f <RXC_Callback+0x1>
    1a04:	30 97       	sbiw	r30, 0x00	; 0
    1a06:	09 f0       	breq	.+2      	; 0x1a0a <__vector_13+0x30>
	{
		//call the function
		RXC_Callback();
    1a08:	09 95       	icall
	}
}
    1a0a:	ff 91       	pop	r31
    1a0c:	ef 91       	pop	r30
    1a0e:	bf 91       	pop	r27
    1a10:	af 91       	pop	r26
    1a12:	9f 91       	pop	r25
    1a14:	8f 91       	pop	r24
    1a16:	7f 91       	pop	r23
    1a18:	6f 91       	pop	r22
    1a1a:	5f 91       	pop	r21
    1a1c:	4f 91       	pop	r20
    1a1e:	3f 91       	pop	r19
    1a20:	2f 91       	pop	r18
    1a22:	0f 90       	pop	r0
    1a24:	0f be       	out	0x3f, r0	; 63
    1a26:	0f 90       	pop	r0
    1a28:	1f 90       	pop	r1
    1a2a:	18 95       	reti

00001a2c <__vector_15>:
ISR(UART_TX_vect)
{
    1a2c:	1f 92       	push	r1
    1a2e:	0f 92       	push	r0
    1a30:	0f b6       	in	r0, 0x3f	; 63
    1a32:	0f 92       	push	r0
    1a34:	11 24       	eor	r1, r1
    1a36:	2f 93       	push	r18
    1a38:	3f 93       	push	r19
    1a3a:	4f 93       	push	r20
    1a3c:	5f 93       	push	r21
    1a3e:	6f 93       	push	r22
    1a40:	7f 93       	push	r23
    1a42:	8f 93       	push	r24
    1a44:	9f 93       	push	r25
    1a46:	af 93       	push	r26
    1a48:	bf 93       	push	r27
    1a4a:	ef 93       	push	r30
    1a4c:	ff 93       	push	r31
	//if the global pointer to function points to a valid position
	if (TXC_Callback!=NULLPTR)
    1a4e:	e0 91 3c 07 	lds	r30, 0x073C	; 0x80073c <TXC_Callback>
    1a52:	f0 91 3d 07 	lds	r31, 0x073D	; 0x80073d <TXC_Callback+0x1>
    1a56:	30 97       	sbiw	r30, 0x00	; 0
    1a58:	09 f0       	breq	.+2      	; 0x1a5c <__vector_15+0x30>
	{
		//call the function
		TXC_Callback();
    1a5a:	09 95       	icall
	}
}
    1a5c:	ff 91       	pop	r31
    1a5e:	ef 91       	pop	r30
    1a60:	bf 91       	pop	r27
    1a62:	af 91       	pop	r26
    1a64:	9f 91       	pop	r25
    1a66:	8f 91       	pop	r24
    1a68:	7f 91       	pop	r23
    1a6a:	6f 91       	pop	r22
    1a6c:	5f 91       	pop	r21
    1a6e:	4f 91       	pop	r20
    1a70:	3f 91       	pop	r19
    1a72:	2f 91       	pop	r18
    1a74:	0f 90       	pop	r0
    1a76:	0f be       	out	0x3f, r0	; 63
    1a78:	0f 90       	pop	r0
    1a7a:	1f 90       	pop	r1
    1a7c:	18 95       	reti

00001a7e <__subsf3>:
    1a7e:	50 58       	subi	r21, 0x80	; 128

00001a80 <__addsf3>:
    1a80:	bb 27       	eor	r27, r27
    1a82:	aa 27       	eor	r26, r26
    1a84:	0e 94 57 0d 	call	0x1aae	; 0x1aae <__addsf3x>
    1a88:	0c 94 a8 0e 	jmp	0x1d50	; 0x1d50 <__fp_round>
    1a8c:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <__fp_pscA>
    1a90:	38 f0       	brcs	.+14     	; 0x1aa0 <__addsf3+0x20>
    1a92:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <__fp_pscB>
    1a96:	20 f0       	brcs	.+8      	; 0x1aa0 <__addsf3+0x20>
    1a98:	39 f4       	brne	.+14     	; 0x1aa8 <__addsf3+0x28>
    1a9a:	9f 3f       	cpi	r25, 0xFF	; 255
    1a9c:	19 f4       	brne	.+6      	; 0x1aa4 <__addsf3+0x24>
    1a9e:	26 f4       	brtc	.+8      	; 0x1aa8 <__addsf3+0x28>
    1aa0:	0c 94 97 0e 	jmp	0x1d2e	; 0x1d2e <__fp_nan>
    1aa4:	0e f4       	brtc	.+2      	; 0x1aa8 <__addsf3+0x28>
    1aa6:	e0 95       	com	r30
    1aa8:	e7 fb       	bst	r30, 7
    1aaa:	0c 94 91 0e 	jmp	0x1d22	; 0x1d22 <__fp_inf>

00001aae <__addsf3x>:
    1aae:	e9 2f       	mov	r30, r25
    1ab0:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <__fp_split3>
    1ab4:	58 f3       	brcs	.-42     	; 0x1a8c <__addsf3+0xc>
    1ab6:	ba 17       	cp	r27, r26
    1ab8:	62 07       	cpc	r22, r18
    1aba:	73 07       	cpc	r23, r19
    1abc:	84 07       	cpc	r24, r20
    1abe:	95 07       	cpc	r25, r21
    1ac0:	20 f0       	brcs	.+8      	; 0x1aca <__addsf3x+0x1c>
    1ac2:	79 f4       	brne	.+30     	; 0x1ae2 <__addsf3x+0x34>
    1ac4:	a6 f5       	brtc	.+104    	; 0x1b2e <__addsf3x+0x80>
    1ac6:	0c 94 db 0e 	jmp	0x1db6	; 0x1db6 <__fp_zero>
    1aca:	0e f4       	brtc	.+2      	; 0x1ace <__addsf3x+0x20>
    1acc:	e0 95       	com	r30
    1ace:	0b 2e       	mov	r0, r27
    1ad0:	ba 2f       	mov	r27, r26
    1ad2:	a0 2d       	mov	r26, r0
    1ad4:	0b 01       	movw	r0, r22
    1ad6:	b9 01       	movw	r22, r18
    1ad8:	90 01       	movw	r18, r0
    1ada:	0c 01       	movw	r0, r24
    1adc:	ca 01       	movw	r24, r20
    1ade:	a0 01       	movw	r20, r0
    1ae0:	11 24       	eor	r1, r1
    1ae2:	ff 27       	eor	r31, r31
    1ae4:	59 1b       	sub	r21, r25
    1ae6:	99 f0       	breq	.+38     	; 0x1b0e <__addsf3x+0x60>
    1ae8:	59 3f       	cpi	r21, 0xF9	; 249
    1aea:	50 f4       	brcc	.+20     	; 0x1b00 <__addsf3x+0x52>
    1aec:	50 3e       	cpi	r21, 0xE0	; 224
    1aee:	68 f1       	brcs	.+90     	; 0x1b4a <__addsf3x+0x9c>
    1af0:	1a 16       	cp	r1, r26
    1af2:	f0 40       	sbci	r31, 0x00	; 0
    1af4:	a2 2f       	mov	r26, r18
    1af6:	23 2f       	mov	r18, r19
    1af8:	34 2f       	mov	r19, r20
    1afa:	44 27       	eor	r20, r20
    1afc:	58 5f       	subi	r21, 0xF8	; 248
    1afe:	f3 cf       	rjmp	.-26     	; 0x1ae6 <__addsf3x+0x38>
    1b00:	46 95       	lsr	r20
    1b02:	37 95       	ror	r19
    1b04:	27 95       	ror	r18
    1b06:	a7 95       	ror	r26
    1b08:	f0 40       	sbci	r31, 0x00	; 0
    1b0a:	53 95       	inc	r21
    1b0c:	c9 f7       	brne	.-14     	; 0x1b00 <__addsf3x+0x52>
    1b0e:	7e f4       	brtc	.+30     	; 0x1b2e <__addsf3x+0x80>
    1b10:	1f 16       	cp	r1, r31
    1b12:	ba 0b       	sbc	r27, r26
    1b14:	62 0b       	sbc	r22, r18
    1b16:	73 0b       	sbc	r23, r19
    1b18:	84 0b       	sbc	r24, r20
    1b1a:	ba f0       	brmi	.+46     	; 0x1b4a <__addsf3x+0x9c>
    1b1c:	91 50       	subi	r25, 0x01	; 1
    1b1e:	a1 f0       	breq	.+40     	; 0x1b48 <__addsf3x+0x9a>
    1b20:	ff 0f       	add	r31, r31
    1b22:	bb 1f       	adc	r27, r27
    1b24:	66 1f       	adc	r22, r22
    1b26:	77 1f       	adc	r23, r23
    1b28:	88 1f       	adc	r24, r24
    1b2a:	c2 f7       	brpl	.-16     	; 0x1b1c <__addsf3x+0x6e>
    1b2c:	0e c0       	rjmp	.+28     	; 0x1b4a <__addsf3x+0x9c>
    1b2e:	ba 0f       	add	r27, r26
    1b30:	62 1f       	adc	r22, r18
    1b32:	73 1f       	adc	r23, r19
    1b34:	84 1f       	adc	r24, r20
    1b36:	48 f4       	brcc	.+18     	; 0x1b4a <__addsf3x+0x9c>
    1b38:	87 95       	ror	r24
    1b3a:	77 95       	ror	r23
    1b3c:	67 95       	ror	r22
    1b3e:	b7 95       	ror	r27
    1b40:	f7 95       	ror	r31
    1b42:	9e 3f       	cpi	r25, 0xFE	; 254
    1b44:	08 f0       	brcs	.+2      	; 0x1b48 <__addsf3x+0x9a>
    1b46:	b0 cf       	rjmp	.-160    	; 0x1aa8 <__addsf3+0x28>
    1b48:	93 95       	inc	r25
    1b4a:	88 0f       	add	r24, r24
    1b4c:	08 f0       	brcs	.+2      	; 0x1b50 <__addsf3x+0xa2>
    1b4e:	99 27       	eor	r25, r25
    1b50:	ee 0f       	add	r30, r30
    1b52:	97 95       	ror	r25
    1b54:	87 95       	ror	r24
    1b56:	08 95       	ret

00001b58 <__divsf3>:
    1b58:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <__divsf3x>
    1b5c:	0c 94 a8 0e 	jmp	0x1d50	; 0x1d50 <__fp_round>
    1b60:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <__fp_pscB>
    1b64:	58 f0       	brcs	.+22     	; 0x1b7c <__divsf3+0x24>
    1b66:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <__fp_pscA>
    1b6a:	40 f0       	brcs	.+16     	; 0x1b7c <__divsf3+0x24>
    1b6c:	29 f4       	brne	.+10     	; 0x1b78 <__divsf3+0x20>
    1b6e:	5f 3f       	cpi	r21, 0xFF	; 255
    1b70:	29 f0       	breq	.+10     	; 0x1b7c <__divsf3+0x24>
    1b72:	0c 94 91 0e 	jmp	0x1d22	; 0x1d22 <__fp_inf>
    1b76:	51 11       	cpse	r21, r1
    1b78:	0c 94 dc 0e 	jmp	0x1db8	; 0x1db8 <__fp_szero>
    1b7c:	0c 94 97 0e 	jmp	0x1d2e	; 0x1d2e <__fp_nan>

00001b80 <__divsf3x>:
    1b80:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <__fp_split3>
    1b84:	68 f3       	brcs	.-38     	; 0x1b60 <__divsf3+0x8>

00001b86 <__divsf3_pse>:
    1b86:	99 23       	and	r25, r25
    1b88:	b1 f3       	breq	.-20     	; 0x1b76 <__divsf3+0x1e>
    1b8a:	55 23       	and	r21, r21
    1b8c:	91 f3       	breq	.-28     	; 0x1b72 <__divsf3+0x1a>
    1b8e:	95 1b       	sub	r25, r21
    1b90:	55 0b       	sbc	r21, r21
    1b92:	bb 27       	eor	r27, r27
    1b94:	aa 27       	eor	r26, r26
    1b96:	62 17       	cp	r22, r18
    1b98:	73 07       	cpc	r23, r19
    1b9a:	84 07       	cpc	r24, r20
    1b9c:	38 f0       	brcs	.+14     	; 0x1bac <__divsf3_pse+0x26>
    1b9e:	9f 5f       	subi	r25, 0xFF	; 255
    1ba0:	5f 4f       	sbci	r21, 0xFF	; 255
    1ba2:	22 0f       	add	r18, r18
    1ba4:	33 1f       	adc	r19, r19
    1ba6:	44 1f       	adc	r20, r20
    1ba8:	aa 1f       	adc	r26, r26
    1baa:	a9 f3       	breq	.-22     	; 0x1b96 <__divsf3_pse+0x10>
    1bac:	35 d0       	rcall	.+106    	; 0x1c18 <__divsf3_pse+0x92>
    1bae:	0e 2e       	mov	r0, r30
    1bb0:	3a f0       	brmi	.+14     	; 0x1bc0 <__divsf3_pse+0x3a>
    1bb2:	e0 e8       	ldi	r30, 0x80	; 128
    1bb4:	32 d0       	rcall	.+100    	; 0x1c1a <__divsf3_pse+0x94>
    1bb6:	91 50       	subi	r25, 0x01	; 1
    1bb8:	50 40       	sbci	r21, 0x00	; 0
    1bba:	e6 95       	lsr	r30
    1bbc:	00 1c       	adc	r0, r0
    1bbe:	ca f7       	brpl	.-14     	; 0x1bb2 <__divsf3_pse+0x2c>
    1bc0:	2b d0       	rcall	.+86     	; 0x1c18 <__divsf3_pse+0x92>
    1bc2:	fe 2f       	mov	r31, r30
    1bc4:	29 d0       	rcall	.+82     	; 0x1c18 <__divsf3_pse+0x92>
    1bc6:	66 0f       	add	r22, r22
    1bc8:	77 1f       	adc	r23, r23
    1bca:	88 1f       	adc	r24, r24
    1bcc:	bb 1f       	adc	r27, r27
    1bce:	26 17       	cp	r18, r22
    1bd0:	37 07       	cpc	r19, r23
    1bd2:	48 07       	cpc	r20, r24
    1bd4:	ab 07       	cpc	r26, r27
    1bd6:	b0 e8       	ldi	r27, 0x80	; 128
    1bd8:	09 f0       	breq	.+2      	; 0x1bdc <__divsf3_pse+0x56>
    1bda:	bb 0b       	sbc	r27, r27
    1bdc:	80 2d       	mov	r24, r0
    1bde:	bf 01       	movw	r22, r30
    1be0:	ff 27       	eor	r31, r31
    1be2:	93 58       	subi	r25, 0x83	; 131
    1be4:	5f 4f       	sbci	r21, 0xFF	; 255
    1be6:	3a f0       	brmi	.+14     	; 0x1bf6 <__divsf3_pse+0x70>
    1be8:	9e 3f       	cpi	r25, 0xFE	; 254
    1bea:	51 05       	cpc	r21, r1
    1bec:	78 f0       	brcs	.+30     	; 0x1c0c <__divsf3_pse+0x86>
    1bee:	0c 94 91 0e 	jmp	0x1d22	; 0x1d22 <__fp_inf>
    1bf2:	0c 94 dc 0e 	jmp	0x1db8	; 0x1db8 <__fp_szero>
    1bf6:	5f 3f       	cpi	r21, 0xFF	; 255
    1bf8:	e4 f3       	brlt	.-8      	; 0x1bf2 <__divsf3_pse+0x6c>
    1bfa:	98 3e       	cpi	r25, 0xE8	; 232
    1bfc:	d4 f3       	brlt	.-12     	; 0x1bf2 <__divsf3_pse+0x6c>
    1bfe:	86 95       	lsr	r24
    1c00:	77 95       	ror	r23
    1c02:	67 95       	ror	r22
    1c04:	b7 95       	ror	r27
    1c06:	f7 95       	ror	r31
    1c08:	9f 5f       	subi	r25, 0xFF	; 255
    1c0a:	c9 f7       	brne	.-14     	; 0x1bfe <__divsf3_pse+0x78>
    1c0c:	88 0f       	add	r24, r24
    1c0e:	91 1d       	adc	r25, r1
    1c10:	96 95       	lsr	r25
    1c12:	87 95       	ror	r24
    1c14:	97 f9       	bld	r25, 7
    1c16:	08 95       	ret
    1c18:	e1 e0       	ldi	r30, 0x01	; 1
    1c1a:	66 0f       	add	r22, r22
    1c1c:	77 1f       	adc	r23, r23
    1c1e:	88 1f       	adc	r24, r24
    1c20:	bb 1f       	adc	r27, r27
    1c22:	62 17       	cp	r22, r18
    1c24:	73 07       	cpc	r23, r19
    1c26:	84 07       	cpc	r24, r20
    1c28:	ba 07       	cpc	r27, r26
    1c2a:	20 f0       	brcs	.+8      	; 0x1c34 <__divsf3_pse+0xae>
    1c2c:	62 1b       	sub	r22, r18
    1c2e:	73 0b       	sbc	r23, r19
    1c30:	84 0b       	sbc	r24, r20
    1c32:	ba 0b       	sbc	r27, r26
    1c34:	ee 1f       	adc	r30, r30
    1c36:	88 f7       	brcc	.-30     	; 0x1c1a <__divsf3_pse+0x94>
    1c38:	e0 95       	com	r30
    1c3a:	08 95       	ret

00001c3c <__fixsfsi>:
    1c3c:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <__fixunssfsi>
    1c40:	68 94       	set
    1c42:	b1 11       	cpse	r27, r1
    1c44:	0c 94 dc 0e 	jmp	0x1db8	; 0x1db8 <__fp_szero>
    1c48:	08 95       	ret

00001c4a <__fixunssfsi>:
    1c4a:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <__fp_splitA>
    1c4e:	88 f0       	brcs	.+34     	; 0x1c72 <__fixunssfsi+0x28>
    1c50:	9f 57       	subi	r25, 0x7F	; 127
    1c52:	98 f0       	brcs	.+38     	; 0x1c7a <__fixunssfsi+0x30>
    1c54:	b9 2f       	mov	r27, r25
    1c56:	99 27       	eor	r25, r25
    1c58:	b7 51       	subi	r27, 0x17	; 23
    1c5a:	b0 f0       	brcs	.+44     	; 0x1c88 <__fixunssfsi+0x3e>
    1c5c:	e1 f0       	breq	.+56     	; 0x1c96 <__fixunssfsi+0x4c>
    1c5e:	66 0f       	add	r22, r22
    1c60:	77 1f       	adc	r23, r23
    1c62:	88 1f       	adc	r24, r24
    1c64:	99 1f       	adc	r25, r25
    1c66:	1a f0       	brmi	.+6      	; 0x1c6e <__fixunssfsi+0x24>
    1c68:	ba 95       	dec	r27
    1c6a:	c9 f7       	brne	.-14     	; 0x1c5e <__fixunssfsi+0x14>
    1c6c:	14 c0       	rjmp	.+40     	; 0x1c96 <__fixunssfsi+0x4c>
    1c6e:	b1 30       	cpi	r27, 0x01	; 1
    1c70:	91 f0       	breq	.+36     	; 0x1c96 <__fixunssfsi+0x4c>
    1c72:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <__fp_zero>
    1c76:	b1 e0       	ldi	r27, 0x01	; 1
    1c78:	08 95       	ret
    1c7a:	0c 94 db 0e 	jmp	0x1db6	; 0x1db6 <__fp_zero>
    1c7e:	67 2f       	mov	r22, r23
    1c80:	78 2f       	mov	r23, r24
    1c82:	88 27       	eor	r24, r24
    1c84:	b8 5f       	subi	r27, 0xF8	; 248
    1c86:	39 f0       	breq	.+14     	; 0x1c96 <__fixunssfsi+0x4c>
    1c88:	b9 3f       	cpi	r27, 0xF9	; 249
    1c8a:	cc f3       	brlt	.-14     	; 0x1c7e <__fixunssfsi+0x34>
    1c8c:	86 95       	lsr	r24
    1c8e:	77 95       	ror	r23
    1c90:	67 95       	ror	r22
    1c92:	b3 95       	inc	r27
    1c94:	d9 f7       	brne	.-10     	; 0x1c8c <__fixunssfsi+0x42>
    1c96:	3e f4       	brtc	.+14     	; 0x1ca6 <__fixunssfsi+0x5c>
    1c98:	90 95       	com	r25
    1c9a:	80 95       	com	r24
    1c9c:	70 95       	com	r23
    1c9e:	61 95       	neg	r22
    1ca0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ca2:	8f 4f       	sbci	r24, 0xFF	; 255
    1ca4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ca6:	08 95       	ret

00001ca8 <__floatunsisf>:
    1ca8:	e8 94       	clt
    1caa:	09 c0       	rjmp	.+18     	; 0x1cbe <__floatsisf+0x12>

00001cac <__floatsisf>:
    1cac:	97 fb       	bst	r25, 7
    1cae:	3e f4       	brtc	.+14     	; 0x1cbe <__floatsisf+0x12>
    1cb0:	90 95       	com	r25
    1cb2:	80 95       	com	r24
    1cb4:	70 95       	com	r23
    1cb6:	61 95       	neg	r22
    1cb8:	7f 4f       	sbci	r23, 0xFF	; 255
    1cba:	8f 4f       	sbci	r24, 0xFF	; 255
    1cbc:	9f 4f       	sbci	r25, 0xFF	; 255
    1cbe:	99 23       	and	r25, r25
    1cc0:	a9 f0       	breq	.+42     	; 0x1cec <__floatsisf+0x40>
    1cc2:	f9 2f       	mov	r31, r25
    1cc4:	96 e9       	ldi	r25, 0x96	; 150
    1cc6:	bb 27       	eor	r27, r27
    1cc8:	93 95       	inc	r25
    1cca:	f6 95       	lsr	r31
    1ccc:	87 95       	ror	r24
    1cce:	77 95       	ror	r23
    1cd0:	67 95       	ror	r22
    1cd2:	b7 95       	ror	r27
    1cd4:	f1 11       	cpse	r31, r1
    1cd6:	f8 cf       	rjmp	.-16     	; 0x1cc8 <__floatsisf+0x1c>
    1cd8:	fa f4       	brpl	.+62     	; 0x1d18 <__floatsisf+0x6c>
    1cda:	bb 0f       	add	r27, r27
    1cdc:	11 f4       	brne	.+4      	; 0x1ce2 <__floatsisf+0x36>
    1cde:	60 ff       	sbrs	r22, 0
    1ce0:	1b c0       	rjmp	.+54     	; 0x1d18 <__floatsisf+0x6c>
    1ce2:	6f 5f       	subi	r22, 0xFF	; 255
    1ce4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ce6:	8f 4f       	sbci	r24, 0xFF	; 255
    1ce8:	9f 4f       	sbci	r25, 0xFF	; 255
    1cea:	16 c0       	rjmp	.+44     	; 0x1d18 <__floatsisf+0x6c>
    1cec:	88 23       	and	r24, r24
    1cee:	11 f0       	breq	.+4      	; 0x1cf4 <__floatsisf+0x48>
    1cf0:	96 e9       	ldi	r25, 0x96	; 150
    1cf2:	11 c0       	rjmp	.+34     	; 0x1d16 <__floatsisf+0x6a>
    1cf4:	77 23       	and	r23, r23
    1cf6:	21 f0       	breq	.+8      	; 0x1d00 <__floatsisf+0x54>
    1cf8:	9e e8       	ldi	r25, 0x8E	; 142
    1cfa:	87 2f       	mov	r24, r23
    1cfc:	76 2f       	mov	r23, r22
    1cfe:	05 c0       	rjmp	.+10     	; 0x1d0a <__floatsisf+0x5e>
    1d00:	66 23       	and	r22, r22
    1d02:	71 f0       	breq	.+28     	; 0x1d20 <__floatsisf+0x74>
    1d04:	96 e8       	ldi	r25, 0x86	; 134
    1d06:	86 2f       	mov	r24, r22
    1d08:	70 e0       	ldi	r23, 0x00	; 0
    1d0a:	60 e0       	ldi	r22, 0x00	; 0
    1d0c:	2a f0       	brmi	.+10     	; 0x1d18 <__floatsisf+0x6c>
    1d0e:	9a 95       	dec	r25
    1d10:	66 0f       	add	r22, r22
    1d12:	77 1f       	adc	r23, r23
    1d14:	88 1f       	adc	r24, r24
    1d16:	da f7       	brpl	.-10     	; 0x1d0e <__floatsisf+0x62>
    1d18:	88 0f       	add	r24, r24
    1d1a:	96 95       	lsr	r25
    1d1c:	87 95       	ror	r24
    1d1e:	97 f9       	bld	r25, 7
    1d20:	08 95       	ret

00001d22 <__fp_inf>:
    1d22:	97 f9       	bld	r25, 7
    1d24:	9f 67       	ori	r25, 0x7F	; 127
    1d26:	80 e8       	ldi	r24, 0x80	; 128
    1d28:	70 e0       	ldi	r23, 0x00	; 0
    1d2a:	60 e0       	ldi	r22, 0x00	; 0
    1d2c:	08 95       	ret

00001d2e <__fp_nan>:
    1d2e:	9f ef       	ldi	r25, 0xFF	; 255
    1d30:	80 ec       	ldi	r24, 0xC0	; 192
    1d32:	08 95       	ret

00001d34 <__fp_pscA>:
    1d34:	00 24       	eor	r0, r0
    1d36:	0a 94       	dec	r0
    1d38:	16 16       	cp	r1, r22
    1d3a:	17 06       	cpc	r1, r23
    1d3c:	18 06       	cpc	r1, r24
    1d3e:	09 06       	cpc	r0, r25
    1d40:	08 95       	ret

00001d42 <__fp_pscB>:
    1d42:	00 24       	eor	r0, r0
    1d44:	0a 94       	dec	r0
    1d46:	12 16       	cp	r1, r18
    1d48:	13 06       	cpc	r1, r19
    1d4a:	14 06       	cpc	r1, r20
    1d4c:	05 06       	cpc	r0, r21
    1d4e:	08 95       	ret

00001d50 <__fp_round>:
    1d50:	09 2e       	mov	r0, r25
    1d52:	03 94       	inc	r0
    1d54:	00 0c       	add	r0, r0
    1d56:	11 f4       	brne	.+4      	; 0x1d5c <__fp_round+0xc>
    1d58:	88 23       	and	r24, r24
    1d5a:	52 f0       	brmi	.+20     	; 0x1d70 <__fp_round+0x20>
    1d5c:	bb 0f       	add	r27, r27
    1d5e:	40 f4       	brcc	.+16     	; 0x1d70 <__fp_round+0x20>
    1d60:	bf 2b       	or	r27, r31
    1d62:	11 f4       	brne	.+4      	; 0x1d68 <__fp_round+0x18>
    1d64:	60 ff       	sbrs	r22, 0
    1d66:	04 c0       	rjmp	.+8      	; 0x1d70 <__fp_round+0x20>
    1d68:	6f 5f       	subi	r22, 0xFF	; 255
    1d6a:	7f 4f       	sbci	r23, 0xFF	; 255
    1d6c:	8f 4f       	sbci	r24, 0xFF	; 255
    1d6e:	9f 4f       	sbci	r25, 0xFF	; 255
    1d70:	08 95       	ret

00001d72 <__fp_split3>:
    1d72:	57 fd       	sbrc	r21, 7
    1d74:	90 58       	subi	r25, 0x80	; 128
    1d76:	44 0f       	add	r20, r20
    1d78:	55 1f       	adc	r21, r21
    1d7a:	59 f0       	breq	.+22     	; 0x1d92 <__fp_splitA+0x10>
    1d7c:	5f 3f       	cpi	r21, 0xFF	; 255
    1d7e:	71 f0       	breq	.+28     	; 0x1d9c <__fp_splitA+0x1a>
    1d80:	47 95       	ror	r20

00001d82 <__fp_splitA>:
    1d82:	88 0f       	add	r24, r24
    1d84:	97 fb       	bst	r25, 7
    1d86:	99 1f       	adc	r25, r25
    1d88:	61 f0       	breq	.+24     	; 0x1da2 <__fp_splitA+0x20>
    1d8a:	9f 3f       	cpi	r25, 0xFF	; 255
    1d8c:	79 f0       	breq	.+30     	; 0x1dac <__fp_splitA+0x2a>
    1d8e:	87 95       	ror	r24
    1d90:	08 95       	ret
    1d92:	12 16       	cp	r1, r18
    1d94:	13 06       	cpc	r1, r19
    1d96:	14 06       	cpc	r1, r20
    1d98:	55 1f       	adc	r21, r21
    1d9a:	f2 cf       	rjmp	.-28     	; 0x1d80 <__fp_split3+0xe>
    1d9c:	46 95       	lsr	r20
    1d9e:	f1 df       	rcall	.-30     	; 0x1d82 <__fp_splitA>
    1da0:	08 c0       	rjmp	.+16     	; 0x1db2 <__fp_splitA+0x30>
    1da2:	16 16       	cp	r1, r22
    1da4:	17 06       	cpc	r1, r23
    1da6:	18 06       	cpc	r1, r24
    1da8:	99 1f       	adc	r25, r25
    1daa:	f1 cf       	rjmp	.-30     	; 0x1d8e <__fp_splitA+0xc>
    1dac:	86 95       	lsr	r24
    1dae:	71 05       	cpc	r23, r1
    1db0:	61 05       	cpc	r22, r1
    1db2:	08 94       	sec
    1db4:	08 95       	ret

00001db6 <__fp_zero>:
    1db6:	e8 94       	clt

00001db8 <__fp_szero>:
    1db8:	bb 27       	eor	r27, r27
    1dba:	66 27       	eor	r22, r22
    1dbc:	77 27       	eor	r23, r23
    1dbe:	cb 01       	movw	r24, r22
    1dc0:	97 f9       	bld	r25, 7
    1dc2:	08 95       	ret

00001dc4 <__gesf2>:
    1dc4:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <__fp_cmp>
    1dc8:	08 f4       	brcc	.+2      	; 0x1dcc <__gesf2+0x8>
    1dca:	8f ef       	ldi	r24, 0xFF	; 255
    1dcc:	08 95       	ret

00001dce <__mulsf3>:
    1dce:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <__mulsf3x>
    1dd2:	0c 94 a8 0e 	jmp	0x1d50	; 0x1d50 <__fp_round>
    1dd6:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <__fp_pscA>
    1dda:	38 f0       	brcs	.+14     	; 0x1dea <__mulsf3+0x1c>
    1ddc:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <__fp_pscB>
    1de0:	20 f0       	brcs	.+8      	; 0x1dea <__mulsf3+0x1c>
    1de2:	95 23       	and	r25, r21
    1de4:	11 f0       	breq	.+4      	; 0x1dea <__mulsf3+0x1c>
    1de6:	0c 94 91 0e 	jmp	0x1d22	; 0x1d22 <__fp_inf>
    1dea:	0c 94 97 0e 	jmp	0x1d2e	; 0x1d2e <__fp_nan>
    1dee:	11 24       	eor	r1, r1
    1df0:	0c 94 dc 0e 	jmp	0x1db8	; 0x1db8 <__fp_szero>

00001df4 <__mulsf3x>:
    1df4:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <__fp_split3>
    1df8:	70 f3       	brcs	.-36     	; 0x1dd6 <__mulsf3+0x8>

00001dfa <__mulsf3_pse>:
    1dfa:	95 9f       	mul	r25, r21
    1dfc:	c1 f3       	breq	.-16     	; 0x1dee <__mulsf3+0x20>
    1dfe:	95 0f       	add	r25, r21
    1e00:	50 e0       	ldi	r21, 0x00	; 0
    1e02:	55 1f       	adc	r21, r21
    1e04:	62 9f       	mul	r22, r18
    1e06:	f0 01       	movw	r30, r0
    1e08:	72 9f       	mul	r23, r18
    1e0a:	bb 27       	eor	r27, r27
    1e0c:	f0 0d       	add	r31, r0
    1e0e:	b1 1d       	adc	r27, r1
    1e10:	63 9f       	mul	r22, r19
    1e12:	aa 27       	eor	r26, r26
    1e14:	f0 0d       	add	r31, r0
    1e16:	b1 1d       	adc	r27, r1
    1e18:	aa 1f       	adc	r26, r26
    1e1a:	64 9f       	mul	r22, r20
    1e1c:	66 27       	eor	r22, r22
    1e1e:	b0 0d       	add	r27, r0
    1e20:	a1 1d       	adc	r26, r1
    1e22:	66 1f       	adc	r22, r22
    1e24:	82 9f       	mul	r24, r18
    1e26:	22 27       	eor	r18, r18
    1e28:	b0 0d       	add	r27, r0
    1e2a:	a1 1d       	adc	r26, r1
    1e2c:	62 1f       	adc	r22, r18
    1e2e:	73 9f       	mul	r23, r19
    1e30:	b0 0d       	add	r27, r0
    1e32:	a1 1d       	adc	r26, r1
    1e34:	62 1f       	adc	r22, r18
    1e36:	83 9f       	mul	r24, r19
    1e38:	a0 0d       	add	r26, r0
    1e3a:	61 1d       	adc	r22, r1
    1e3c:	22 1f       	adc	r18, r18
    1e3e:	74 9f       	mul	r23, r20
    1e40:	33 27       	eor	r19, r19
    1e42:	a0 0d       	add	r26, r0
    1e44:	61 1d       	adc	r22, r1
    1e46:	23 1f       	adc	r18, r19
    1e48:	84 9f       	mul	r24, r20
    1e4a:	60 0d       	add	r22, r0
    1e4c:	21 1d       	adc	r18, r1
    1e4e:	82 2f       	mov	r24, r18
    1e50:	76 2f       	mov	r23, r22
    1e52:	6a 2f       	mov	r22, r26
    1e54:	11 24       	eor	r1, r1
    1e56:	9f 57       	subi	r25, 0x7F	; 127
    1e58:	50 40       	sbci	r21, 0x00	; 0
    1e5a:	9a f0       	brmi	.+38     	; 0x1e82 <__mulsf3_pse+0x88>
    1e5c:	f1 f0       	breq	.+60     	; 0x1e9a <__mulsf3_pse+0xa0>
    1e5e:	88 23       	and	r24, r24
    1e60:	4a f0       	brmi	.+18     	; 0x1e74 <__mulsf3_pse+0x7a>
    1e62:	ee 0f       	add	r30, r30
    1e64:	ff 1f       	adc	r31, r31
    1e66:	bb 1f       	adc	r27, r27
    1e68:	66 1f       	adc	r22, r22
    1e6a:	77 1f       	adc	r23, r23
    1e6c:	88 1f       	adc	r24, r24
    1e6e:	91 50       	subi	r25, 0x01	; 1
    1e70:	50 40       	sbci	r21, 0x00	; 0
    1e72:	a9 f7       	brne	.-22     	; 0x1e5e <__mulsf3_pse+0x64>
    1e74:	9e 3f       	cpi	r25, 0xFE	; 254
    1e76:	51 05       	cpc	r21, r1
    1e78:	80 f0       	brcs	.+32     	; 0x1e9a <__mulsf3_pse+0xa0>
    1e7a:	0c 94 91 0e 	jmp	0x1d22	; 0x1d22 <__fp_inf>
    1e7e:	0c 94 dc 0e 	jmp	0x1db8	; 0x1db8 <__fp_szero>
    1e82:	5f 3f       	cpi	r21, 0xFF	; 255
    1e84:	e4 f3       	brlt	.-8      	; 0x1e7e <__mulsf3_pse+0x84>
    1e86:	98 3e       	cpi	r25, 0xE8	; 232
    1e88:	d4 f3       	brlt	.-12     	; 0x1e7e <__mulsf3_pse+0x84>
    1e8a:	86 95       	lsr	r24
    1e8c:	77 95       	ror	r23
    1e8e:	67 95       	ror	r22
    1e90:	b7 95       	ror	r27
    1e92:	f7 95       	ror	r31
    1e94:	e7 95       	ror	r30
    1e96:	9f 5f       	subi	r25, 0xFF	; 255
    1e98:	c1 f7       	brne	.-16     	; 0x1e8a <__mulsf3_pse+0x90>
    1e9a:	fe 2b       	or	r31, r30
    1e9c:	88 0f       	add	r24, r24
    1e9e:	91 1d       	adc	r25, r1
    1ea0:	96 95       	lsr	r25
    1ea2:	87 95       	ror	r24
    1ea4:	97 f9       	bld	r25, 7
    1ea6:	08 95       	ret

00001ea8 <__fp_cmp>:
    1ea8:	99 0f       	add	r25, r25
    1eaa:	00 08       	sbc	r0, r0
    1eac:	55 0f       	add	r21, r21
    1eae:	aa 0b       	sbc	r26, r26
    1eb0:	e0 e8       	ldi	r30, 0x80	; 128
    1eb2:	fe ef       	ldi	r31, 0xFE	; 254
    1eb4:	16 16       	cp	r1, r22
    1eb6:	17 06       	cpc	r1, r23
    1eb8:	e8 07       	cpc	r30, r24
    1eba:	f9 07       	cpc	r31, r25
    1ebc:	c0 f0       	brcs	.+48     	; 0x1eee <__fp_cmp+0x46>
    1ebe:	12 16       	cp	r1, r18
    1ec0:	13 06       	cpc	r1, r19
    1ec2:	e4 07       	cpc	r30, r20
    1ec4:	f5 07       	cpc	r31, r21
    1ec6:	98 f0       	brcs	.+38     	; 0x1eee <__fp_cmp+0x46>
    1ec8:	62 1b       	sub	r22, r18
    1eca:	73 0b       	sbc	r23, r19
    1ecc:	84 0b       	sbc	r24, r20
    1ece:	95 0b       	sbc	r25, r21
    1ed0:	39 f4       	brne	.+14     	; 0x1ee0 <__fp_cmp+0x38>
    1ed2:	0a 26       	eor	r0, r26
    1ed4:	61 f0       	breq	.+24     	; 0x1eee <__fp_cmp+0x46>
    1ed6:	23 2b       	or	r18, r19
    1ed8:	24 2b       	or	r18, r20
    1eda:	25 2b       	or	r18, r21
    1edc:	21 f4       	brne	.+8      	; 0x1ee6 <__fp_cmp+0x3e>
    1ede:	08 95       	ret
    1ee0:	0a 26       	eor	r0, r26
    1ee2:	09 f4       	brne	.+2      	; 0x1ee6 <__fp_cmp+0x3e>
    1ee4:	a1 40       	sbci	r26, 0x01	; 1
    1ee6:	a6 95       	lsr	r26
    1ee8:	8f ef       	ldi	r24, 0xFF	; 255
    1eea:	81 1d       	adc	r24, r1
    1eec:	81 1d       	adc	r24, r1
    1eee:	08 95       	ret

00001ef0 <__udivmodhi4>:
    1ef0:	aa 1b       	sub	r26, r26
    1ef2:	bb 1b       	sub	r27, r27
    1ef4:	51 e1       	ldi	r21, 0x11	; 17
    1ef6:	07 c0       	rjmp	.+14     	; 0x1f06 <__udivmodhi4_ep>

00001ef8 <__udivmodhi4_loop>:
    1ef8:	aa 1f       	adc	r26, r26
    1efa:	bb 1f       	adc	r27, r27
    1efc:	a6 17       	cp	r26, r22
    1efe:	b7 07       	cpc	r27, r23
    1f00:	10 f0       	brcs	.+4      	; 0x1f06 <__udivmodhi4_ep>
    1f02:	a6 1b       	sub	r26, r22
    1f04:	b7 0b       	sbc	r27, r23

00001f06 <__udivmodhi4_ep>:
    1f06:	88 1f       	adc	r24, r24
    1f08:	99 1f       	adc	r25, r25
    1f0a:	5a 95       	dec	r21
    1f0c:	a9 f7       	brne	.-22     	; 0x1ef8 <__udivmodhi4_loop>
    1f0e:	80 95       	com	r24
    1f10:	90 95       	com	r25
    1f12:	bc 01       	movw	r22, r24
    1f14:	cd 01       	movw	r24, r26
    1f16:	08 95       	ret

00001f18 <__divmodhi4>:
    1f18:	97 fb       	bst	r25, 7
    1f1a:	07 2e       	mov	r0, r23
    1f1c:	16 f4       	brtc	.+4      	; 0x1f22 <__divmodhi4+0xa>
    1f1e:	00 94       	com	r0
    1f20:	07 d0       	rcall	.+14     	; 0x1f30 <__divmodhi4_neg1>
    1f22:	77 fd       	sbrc	r23, 7
    1f24:	09 d0       	rcall	.+18     	; 0x1f38 <__divmodhi4_neg2>
    1f26:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <__udivmodhi4>
    1f2a:	07 fc       	sbrc	r0, 7
    1f2c:	05 d0       	rcall	.+10     	; 0x1f38 <__divmodhi4_neg2>
    1f2e:	3e f4       	brtc	.+14     	; 0x1f3e <__divmodhi4_exit>

00001f30 <__divmodhi4_neg1>:
    1f30:	90 95       	com	r25
    1f32:	81 95       	neg	r24
    1f34:	9f 4f       	sbci	r25, 0xFF	; 255
    1f36:	08 95       	ret

00001f38 <__divmodhi4_neg2>:
    1f38:	70 95       	com	r23
    1f3a:	61 95       	neg	r22
    1f3c:	7f 4f       	sbci	r23, 0xFF	; 255

00001f3e <__divmodhi4_exit>:
    1f3e:	08 95       	ret

00001f40 <__divmodsi4>:
    1f40:	05 2e       	mov	r0, r21
    1f42:	97 fb       	bst	r25, 7
    1f44:	1e f4       	brtc	.+6      	; 0x1f4c <__divmodsi4+0xc>
    1f46:	00 94       	com	r0
    1f48:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <__negsi2>
    1f4c:	57 fd       	sbrc	r21, 7
    1f4e:	07 d0       	rcall	.+14     	; 0x1f5e <__divmodsi4_neg2>
    1f50:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <__udivmodsi4>
    1f54:	07 fc       	sbrc	r0, 7
    1f56:	03 d0       	rcall	.+6      	; 0x1f5e <__divmodsi4_neg2>
    1f58:	4e f4       	brtc	.+18     	; 0x1f6c <__divmodsi4_exit>
    1f5a:	0c 94 b7 0f 	jmp	0x1f6e	; 0x1f6e <__negsi2>

00001f5e <__divmodsi4_neg2>:
    1f5e:	50 95       	com	r21
    1f60:	40 95       	com	r20
    1f62:	30 95       	com	r19
    1f64:	21 95       	neg	r18
    1f66:	3f 4f       	sbci	r19, 0xFF	; 255
    1f68:	4f 4f       	sbci	r20, 0xFF	; 255
    1f6a:	5f 4f       	sbci	r21, 0xFF	; 255

00001f6c <__divmodsi4_exit>:
    1f6c:	08 95       	ret

00001f6e <__negsi2>:
    1f6e:	90 95       	com	r25
    1f70:	80 95       	com	r24
    1f72:	70 95       	com	r23
    1f74:	61 95       	neg	r22
    1f76:	7f 4f       	sbci	r23, 0xFF	; 255
    1f78:	8f 4f       	sbci	r24, 0xFF	; 255
    1f7a:	9f 4f       	sbci	r25, 0xFF	; 255
    1f7c:	08 95       	ret

00001f7e <__tablejump2__>:
    1f7e:	ee 0f       	add	r30, r30
    1f80:	ff 1f       	adc	r31, r31
    1f82:	05 90       	lpm	r0, Z+
    1f84:	f4 91       	lpm	r31, Z
    1f86:	e0 2d       	mov	r30, r0
    1f88:	09 94       	ijmp

00001f8a <__udivmodsi4>:
    1f8a:	a1 e2       	ldi	r26, 0x21	; 33
    1f8c:	1a 2e       	mov	r1, r26
    1f8e:	aa 1b       	sub	r26, r26
    1f90:	bb 1b       	sub	r27, r27
    1f92:	fd 01       	movw	r30, r26
    1f94:	0d c0       	rjmp	.+26     	; 0x1fb0 <__udivmodsi4_ep>

00001f96 <__udivmodsi4_loop>:
    1f96:	aa 1f       	adc	r26, r26
    1f98:	bb 1f       	adc	r27, r27
    1f9a:	ee 1f       	adc	r30, r30
    1f9c:	ff 1f       	adc	r31, r31
    1f9e:	a2 17       	cp	r26, r18
    1fa0:	b3 07       	cpc	r27, r19
    1fa2:	e4 07       	cpc	r30, r20
    1fa4:	f5 07       	cpc	r31, r21
    1fa6:	20 f0       	brcs	.+8      	; 0x1fb0 <__udivmodsi4_ep>
    1fa8:	a2 1b       	sub	r26, r18
    1faa:	b3 0b       	sbc	r27, r19
    1fac:	e4 0b       	sbc	r30, r20
    1fae:	f5 0b       	sbc	r31, r21

00001fb0 <__udivmodsi4_ep>:
    1fb0:	66 1f       	adc	r22, r22
    1fb2:	77 1f       	adc	r23, r23
    1fb4:	88 1f       	adc	r24, r24
    1fb6:	99 1f       	adc	r25, r25
    1fb8:	1a 94       	dec	r1
    1fba:	69 f7       	brne	.-38     	; 0x1f96 <__udivmodsi4_loop>
    1fbc:	60 95       	com	r22
    1fbe:	70 95       	com	r23
    1fc0:	80 95       	com	r24
    1fc2:	90 95       	com	r25
    1fc4:	9b 01       	movw	r18, r22
    1fc6:	ac 01       	movw	r20, r24
    1fc8:	bd 01       	movw	r22, r26
    1fca:	cf 01       	movw	r24, r30
    1fcc:	08 95       	ret

00001fce <atof>:
    1fce:	66 27       	eor	r22, r22
    1fd0:	77 27       	eor	r23, r23
    1fd2:	0c 94 10 10 	jmp	0x2020	; 0x2020 <strtod>

00001fd6 <__itoa_ncheck>:
    1fd6:	bb 27       	eor	r27, r27
    1fd8:	4a 30       	cpi	r20, 0x0A	; 10
    1fda:	31 f4       	brne	.+12     	; 0x1fe8 <__itoa_ncheck+0x12>
    1fdc:	99 23       	and	r25, r25
    1fde:	22 f4       	brpl	.+8      	; 0x1fe8 <__itoa_ncheck+0x12>
    1fe0:	bd e2       	ldi	r27, 0x2D	; 45
    1fe2:	90 95       	com	r25
    1fe4:	81 95       	neg	r24
    1fe6:	9f 4f       	sbci	r25, 0xFF	; 255
    1fe8:	0c 94 f7 0f 	jmp	0x1fee	; 0x1fee <__utoa_common>

00001fec <__utoa_ncheck>:
    1fec:	bb 27       	eor	r27, r27

00001fee <__utoa_common>:
    1fee:	fb 01       	movw	r30, r22
    1ff0:	55 27       	eor	r21, r21
    1ff2:	aa 27       	eor	r26, r26
    1ff4:	88 0f       	add	r24, r24
    1ff6:	99 1f       	adc	r25, r25
    1ff8:	aa 1f       	adc	r26, r26
    1ffa:	a4 17       	cp	r26, r20
    1ffc:	10 f0       	brcs	.+4      	; 0x2002 <__utoa_common+0x14>
    1ffe:	a4 1b       	sub	r26, r20
    2000:	83 95       	inc	r24
    2002:	50 51       	subi	r21, 0x10	; 16
    2004:	b9 f7       	brne	.-18     	; 0x1ff4 <__utoa_common+0x6>
    2006:	a0 5d       	subi	r26, 0xD0	; 208
    2008:	aa 33       	cpi	r26, 0x3A	; 58
    200a:	08 f0       	brcs	.+2      	; 0x200e <__utoa_common+0x20>
    200c:	a9 5d       	subi	r26, 0xD9	; 217
    200e:	a1 93       	st	Z+, r26
    2010:	00 97       	sbiw	r24, 0x00	; 0
    2012:	79 f7       	brne	.-34     	; 0x1ff2 <__utoa_common+0x4>
    2014:	b1 11       	cpse	r27, r1
    2016:	b1 93       	st	Z+, r27
    2018:	11 92       	st	Z+, r1
    201a:	cb 01       	movw	r24, r22
    201c:	0c 94 7f 11 	jmp	0x22fe	; 0x22fe <strrev>

00002020 <strtod>:
    2020:	a0 e0       	ldi	r26, 0x00	; 0
    2022:	b0 e0       	ldi	r27, 0x00	; 0
    2024:	e6 e1       	ldi	r30, 0x16	; 22
    2026:	f0 e1       	ldi	r31, 0x10	; 16
    2028:	0c 94 a8 11 	jmp	0x2350	; 0x2350 <__prologue_saves__+0xc>
    202c:	ec 01       	movw	r28, r24
    202e:	6b 01       	movw	r12, r22
    2030:	61 15       	cp	r22, r1
    2032:	71 05       	cpc	r23, r1
    2034:	19 f0       	breq	.+6      	; 0x203c <strtod+0x1c>
    2036:	fb 01       	movw	r30, r22
    2038:	91 83       	std	Z+1, r25	; 0x01
    203a:	80 83       	st	Z, r24
    203c:	7e 01       	movw	r14, r28
    203e:	ff ef       	ldi	r31, 0xFF	; 255
    2040:	ef 1a       	sub	r14, r31
    2042:	ff 0a       	sbc	r15, r31
    2044:	08 81       	ld	r16, Y
    2046:	80 2f       	mov	r24, r16
    2048:	90 e0       	ldi	r25, 0x00	; 0
    204a:	0e 94 5e 11 	call	0x22bc	; 0x22bc <isspace>
    204e:	89 2b       	or	r24, r25
    2050:	11 f0       	breq	.+4      	; 0x2056 <strtod+0x36>
    2052:	e7 01       	movw	r28, r14
    2054:	f3 cf       	rjmp	.-26     	; 0x203c <strtod+0x1c>
    2056:	0d 32       	cpi	r16, 0x2D	; 45
    2058:	39 f4       	brne	.+14     	; 0x2068 <strtod+0x48>
    205a:	7e 01       	movw	r14, r28
    205c:	82 e0       	ldi	r24, 0x02	; 2
    205e:	e8 0e       	add	r14, r24
    2060:	f1 1c       	adc	r15, r1
    2062:	09 81       	ldd	r16, Y+1	; 0x01
    2064:	11 e0       	ldi	r17, 0x01	; 1
    2066:	08 c0       	rjmp	.+16     	; 0x2078 <strtod+0x58>
    2068:	0b 32       	cpi	r16, 0x2B	; 43
    206a:	29 f4       	brne	.+10     	; 0x2076 <strtod+0x56>
    206c:	7e 01       	movw	r14, r28
    206e:	92 e0       	ldi	r25, 0x02	; 2
    2070:	e9 0e       	add	r14, r25
    2072:	f1 1c       	adc	r15, r1
    2074:	09 81       	ldd	r16, Y+1	; 0x01
    2076:	10 e0       	ldi	r17, 0x00	; 0
    2078:	e7 01       	movw	r28, r14
    207a:	21 97       	sbiw	r28, 0x01	; 1
    207c:	43 e0       	ldi	r20, 0x03	; 3
    207e:	50 e0       	ldi	r21, 0x00	; 0
    2080:	66 e7       	ldi	r22, 0x76	; 118
    2082:	70 e0       	ldi	r23, 0x00	; 0
    2084:	ce 01       	movw	r24, r28
    2086:	0e 94 67 11 	call	0x22ce	; 0x22ce <strncasecmp_P>
    208a:	89 2b       	or	r24, r25
    208c:	c1 f4       	brne	.+48     	; 0x20be <strtod+0x9e>
    208e:	23 96       	adiw	r28, 0x03	; 3
    2090:	45 e0       	ldi	r20, 0x05	; 5
    2092:	50 e0       	ldi	r21, 0x00	; 0
    2094:	61 e7       	ldi	r22, 0x71	; 113
    2096:	70 e0       	ldi	r23, 0x00	; 0
    2098:	ce 01       	movw	r24, r28
    209a:	0e 94 67 11 	call	0x22ce	; 0x22ce <strncasecmp_P>
    209e:	89 2b       	or	r24, r25
    20a0:	09 f4       	brne	.+2      	; 0x20a4 <strtod+0x84>
    20a2:	25 96       	adiw	r28, 0x05	; 5
    20a4:	c1 14       	cp	r12, r1
    20a6:	d1 04       	cpc	r13, r1
    20a8:	19 f0       	breq	.+6      	; 0x20b0 <strtod+0x90>
    20aa:	f6 01       	movw	r30, r12
    20ac:	d1 83       	std	Z+1, r29	; 0x01
    20ae:	c0 83       	st	Z, r28
    20b0:	11 11       	cpse	r17, r1
    20b2:	f6 c0       	rjmp	.+492    	; 0x22a0 <strtod+0x280>
    20b4:	60 e0       	ldi	r22, 0x00	; 0
    20b6:	70 e0       	ldi	r23, 0x00	; 0
    20b8:	80 e8       	ldi	r24, 0x80	; 128
    20ba:	9f e7       	ldi	r25, 0x7F	; 127
    20bc:	fa c0       	rjmp	.+500    	; 0x22b2 <strtod+0x292>
    20be:	43 e0       	ldi	r20, 0x03	; 3
    20c0:	50 e0       	ldi	r21, 0x00	; 0
    20c2:	6e e6       	ldi	r22, 0x6E	; 110
    20c4:	70 e0       	ldi	r23, 0x00	; 0
    20c6:	ce 01       	movw	r24, r28
    20c8:	0e 94 67 11 	call	0x22ce	; 0x22ce <strncasecmp_P>
    20cc:	89 2b       	or	r24, r25
    20ce:	59 f4       	brne	.+22     	; 0x20e6 <strtod+0xc6>
    20d0:	c1 14       	cp	r12, r1
    20d2:	d1 04       	cpc	r13, r1
    20d4:	09 f4       	brne	.+2      	; 0x20d8 <strtod+0xb8>
    20d6:	e9 c0       	rjmp	.+466    	; 0x22aa <strtod+0x28a>
    20d8:	f2 e0       	ldi	r31, 0x02	; 2
    20da:	ef 0e       	add	r14, r31
    20dc:	f1 1c       	adc	r15, r1
    20de:	f6 01       	movw	r30, r12
    20e0:	f1 82       	std	Z+1, r15	; 0x01
    20e2:	e0 82       	st	Z, r14
    20e4:	e2 c0       	rjmp	.+452    	; 0x22aa <strtod+0x28a>
    20e6:	20 e0       	ldi	r18, 0x00	; 0
    20e8:	30 e0       	ldi	r19, 0x00	; 0
    20ea:	a9 01       	movw	r20, r18
    20ec:	c0 e0       	ldi	r28, 0x00	; 0
    20ee:	d0 e0       	ldi	r29, 0x00	; 0
    20f0:	f7 01       	movw	r30, r14
    20f2:	80 ed       	ldi	r24, 0xD0	; 208
    20f4:	a8 2e       	mov	r10, r24
    20f6:	a0 0e       	add	r10, r16
    20f8:	89 e0       	ldi	r24, 0x09	; 9
    20fa:	8a 15       	cp	r24, r10
    20fc:	30 f1       	brcs	.+76     	; 0x214a <strtod+0x12a>
    20fe:	91 2f       	mov	r25, r17
    2100:	92 60       	ori	r25, 0x02	; 2
    2102:	b9 2e       	mov	r11, r25
    2104:	81 2f       	mov	r24, r17
    2106:	88 70       	andi	r24, 0x08	; 8
    2108:	12 ff       	sbrs	r17, 2
    210a:	04 c0       	rjmp	.+8      	; 0x2114 <strtod+0xf4>
    210c:	81 11       	cpse	r24, r1
    210e:	24 c0       	rjmp	.+72     	; 0x2158 <strtod+0x138>
    2110:	21 96       	adiw	r28, 0x01	; 1
    2112:	22 c0       	rjmp	.+68     	; 0x2158 <strtod+0x138>
    2114:	81 11       	cpse	r24, r1
    2116:	21 97       	sbiw	r28, 0x01	; 1
    2118:	a5 e0       	ldi	r26, 0x05	; 5
    211a:	b0 e0       	ldi	r27, 0x00	; 0
    211c:	0e 94 97 11 	call	0x232e	; 0x232e <__muluhisi3>
    2120:	dc 01       	movw	r26, r24
    2122:	cb 01       	movw	r24, r22
    2124:	88 0f       	add	r24, r24
    2126:	99 1f       	adc	r25, r25
    2128:	aa 1f       	adc	r26, r26
    212a:	bb 1f       	adc	r27, r27
    212c:	9c 01       	movw	r18, r24
    212e:	ad 01       	movw	r20, r26
    2130:	2a 0d       	add	r18, r10
    2132:	31 1d       	adc	r19, r1
    2134:	41 1d       	adc	r20, r1
    2136:	51 1d       	adc	r21, r1
    2138:	28 39       	cpi	r18, 0x98	; 152
    213a:	89 e9       	ldi	r24, 0x99	; 153
    213c:	38 07       	cpc	r19, r24
    213e:	48 07       	cpc	r20, r24
    2140:	89 e1       	ldi	r24, 0x19	; 25
    2142:	58 07       	cpc	r21, r24
    2144:	48 f0       	brcs	.+18     	; 0x2158 <strtod+0x138>
    2146:	16 60       	ori	r17, 0x06	; 6
    2148:	06 c0       	rjmp	.+12     	; 0x2156 <strtod+0x136>
    214a:	9e ef       	ldi	r25, 0xFE	; 254
    214c:	a9 12       	cpse	r10, r25
    214e:	0a c0       	rjmp	.+20     	; 0x2164 <strtod+0x144>
    2150:	13 fd       	sbrc	r17, 3
    2152:	40 c0       	rjmp	.+128    	; 0x21d4 <strtod+0x1b4>
    2154:	18 60       	ori	r17, 0x08	; 8
    2156:	b1 2e       	mov	r11, r17
    2158:	8f ef       	ldi	r24, 0xFF	; 255
    215a:	e8 1a       	sub	r14, r24
    215c:	f8 0a       	sbc	r15, r24
    215e:	00 81       	ld	r16, Z
    2160:	1b 2d       	mov	r17, r11
    2162:	c6 cf       	rjmp	.-116    	; 0x20f0 <strtod+0xd0>
    2164:	80 2f       	mov	r24, r16
    2166:	8f 7d       	andi	r24, 0xDF	; 223
    2168:	85 34       	cpi	r24, 0x45	; 69
    216a:	a1 f5       	brne	.+104    	; 0x21d4 <strtod+0x1b4>
    216c:	80 81       	ld	r24, Z
    216e:	8d 32       	cpi	r24, 0x2D	; 45
    2170:	11 f4       	brne	.+4      	; 0x2176 <strtod+0x156>
    2172:	10 61       	ori	r17, 0x10	; 16
    2174:	06 c0       	rjmp	.+12     	; 0x2182 <strtod+0x162>
    2176:	8b 32       	cpi	r24, 0x2B	; 43
    2178:	21 f0       	breq	.+8      	; 0x2182 <strtod+0x162>
    217a:	31 96       	adiw	r30, 0x01	; 1
    217c:	61 e0       	ldi	r22, 0x01	; 1
    217e:	70 e0       	ldi	r23, 0x00	; 0
    2180:	04 c0       	rjmp	.+8      	; 0x218a <strtod+0x16a>
    2182:	81 81       	ldd	r24, Z+1	; 0x01
    2184:	32 96       	adiw	r30, 0x02	; 2
    2186:	62 e0       	ldi	r22, 0x02	; 2
    2188:	70 e0       	ldi	r23, 0x00	; 0
    218a:	80 53       	subi	r24, 0x30	; 48
    218c:	8a 30       	cpi	r24, 0x0A	; 10
    218e:	18 f0       	brcs	.+6      	; 0x2196 <strtod+0x176>
    2190:	e6 1b       	sub	r30, r22
    2192:	f7 0b       	sbc	r31, r23
    2194:	1f c0       	rjmp	.+62     	; 0x21d4 <strtod+0x1b4>
    2196:	60 e0       	ldi	r22, 0x00	; 0
    2198:	70 e0       	ldi	r23, 0x00	; 0
    219a:	60 38       	cpi	r22, 0x80	; 128
    219c:	9c e0       	ldi	r25, 0x0C	; 12
    219e:	79 07       	cpc	r23, r25
    21a0:	5c f4       	brge	.+22     	; 0x21b8 <strtod+0x198>
    21a2:	db 01       	movw	r26, r22
    21a4:	aa 0f       	add	r26, r26
    21a6:	bb 1f       	adc	r27, r27
    21a8:	aa 0f       	add	r26, r26
    21aa:	bb 1f       	adc	r27, r27
    21ac:	6a 0f       	add	r22, r26
    21ae:	7b 1f       	adc	r23, r27
    21b0:	66 0f       	add	r22, r22
    21b2:	77 1f       	adc	r23, r23
    21b4:	68 0f       	add	r22, r24
    21b6:	71 1d       	adc	r23, r1
    21b8:	31 96       	adiw	r30, 0x01	; 1
    21ba:	df 01       	movw	r26, r30
    21bc:	11 97       	sbiw	r26, 0x01	; 1
    21be:	8c 91       	ld	r24, X
    21c0:	80 53       	subi	r24, 0x30	; 48
    21c2:	8a 30       	cpi	r24, 0x0A	; 10
    21c4:	50 f3       	brcs	.-44     	; 0x219a <strtod+0x17a>
    21c6:	14 ff       	sbrs	r17, 4
    21c8:	03 c0       	rjmp	.+6      	; 0x21d0 <strtod+0x1b0>
    21ca:	71 95       	neg	r23
    21cc:	61 95       	neg	r22
    21ce:	71 09       	sbc	r23, r1
    21d0:	c6 0f       	add	r28, r22
    21d2:	d7 1f       	adc	r29, r23
    21d4:	11 ff       	sbrs	r17, 1
    21d6:	08 c0       	rjmp	.+16     	; 0x21e8 <strtod+0x1c8>
    21d8:	c1 14       	cp	r12, r1
    21da:	d1 04       	cpc	r13, r1
    21dc:	29 f0       	breq	.+10     	; 0x21e8 <strtod+0x1c8>
    21de:	cf 01       	movw	r24, r30
    21e0:	01 97       	sbiw	r24, 0x01	; 1
    21e2:	f6 01       	movw	r30, r12
    21e4:	91 83       	std	Z+1, r25	; 0x01
    21e6:	80 83       	st	Z, r24
    21e8:	ca 01       	movw	r24, r20
    21ea:	b9 01       	movw	r22, r18
    21ec:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <__floatunsisf>
    21f0:	21 2f       	mov	r18, r17
    21f2:	23 70       	andi	r18, 0x03	; 3
    21f4:	23 30       	cpi	r18, 0x03	; 3
    21f6:	19 f0       	breq	.+6      	; 0x21fe <strtod+0x1de>
    21f8:	4b 01       	movw	r8, r22
    21fa:	5c 01       	movw	r10, r24
    21fc:	06 c0       	rjmp	.+12     	; 0x220a <strtod+0x1ea>
    21fe:	4b 01       	movw	r8, r22
    2200:	5c 01       	movw	r10, r24
    2202:	b7 fa       	bst	r11, 7
    2204:	b0 94       	com	r11
    2206:	b7 f8       	bld	r11, 7
    2208:	b0 94       	com	r11
    220a:	20 e0       	ldi	r18, 0x00	; 0
    220c:	30 e0       	ldi	r19, 0x00	; 0
    220e:	a9 01       	movw	r20, r18
    2210:	c5 01       	movw	r24, r10
    2212:	b4 01       	movw	r22, r8
    2214:	0e 94 8f 11 	call	0x231e	; 0x231e <__cmpsf2>
    2218:	88 23       	and	r24, r24
    221a:	09 f4       	brne	.+2      	; 0x221e <strtod+0x1fe>
    221c:	3e c0       	rjmp	.+124    	; 0x229a <strtod+0x27a>
    221e:	d7 ff       	sbrs	r29, 7
    2220:	06 c0       	rjmp	.+12     	; 0x222e <strtod+0x20e>
    2222:	d1 95       	neg	r29
    2224:	c1 95       	neg	r28
    2226:	d1 09       	sbc	r29, r1
    2228:	0d e8       	ldi	r16, 0x8D	; 141
    222a:	10 e0       	ldi	r17, 0x00	; 0
    222c:	02 c0       	rjmp	.+4      	; 0x2232 <strtod+0x212>
    222e:	05 ea       	ldi	r16, 0xA5	; 165
    2230:	10 e0       	ldi	r17, 0x00	; 0
    2232:	68 01       	movw	r12, r16
    2234:	f8 e1       	ldi	r31, 0x18	; 24
    2236:	cf 1a       	sub	r12, r31
    2238:	d1 08       	sbc	r13, r1
    223a:	90 e2       	ldi	r25, 0x20	; 32
    223c:	e9 2e       	mov	r14, r25
    223e:	f1 2c       	mov	r15, r1
    2240:	ce 15       	cp	r28, r14
    2242:	df 05       	cpc	r29, r15
    2244:	74 f0       	brlt	.+28     	; 0x2262 <strtod+0x242>
    2246:	f8 01       	movw	r30, r16
    2248:	25 91       	lpm	r18, Z+
    224a:	35 91       	lpm	r19, Z+
    224c:	45 91       	lpm	r20, Z+
    224e:	54 91       	lpm	r21, Z
    2250:	c5 01       	movw	r24, r10
    2252:	b4 01       	movw	r22, r8
    2254:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <__mulsf3>
    2258:	4b 01       	movw	r8, r22
    225a:	5c 01       	movw	r10, r24
    225c:	ce 19       	sub	r28, r14
    225e:	df 09       	sbc	r29, r15
    2260:	ef cf       	rjmp	.-34     	; 0x2240 <strtod+0x220>
    2262:	04 50       	subi	r16, 0x04	; 4
    2264:	11 09       	sbc	r17, r1
    2266:	f5 94       	asr	r15
    2268:	e7 94       	ror	r14
    226a:	0c 15       	cp	r16, r12
    226c:	1d 05       	cpc	r17, r13
    226e:	41 f7       	brne	.-48     	; 0x2240 <strtod+0x220>
    2270:	8a 2d       	mov	r24, r10
    2272:	88 0f       	add	r24, r24
    2274:	8b 2d       	mov	r24, r11
    2276:	88 1f       	adc	r24, r24
    2278:	8f 3f       	cpi	r24, 0xFF	; 255
    227a:	49 f0       	breq	.+18     	; 0x228e <strtod+0x26e>
    227c:	20 e0       	ldi	r18, 0x00	; 0
    227e:	30 e0       	ldi	r19, 0x00	; 0
    2280:	a9 01       	movw	r20, r18
    2282:	c5 01       	movw	r24, r10
    2284:	b4 01       	movw	r22, r8
    2286:	0e 94 8f 11 	call	0x231e	; 0x231e <__cmpsf2>
    228a:	81 11       	cpse	r24, r1
    228c:	06 c0       	rjmp	.+12     	; 0x229a <strtod+0x27a>
    228e:	82 e2       	ldi	r24, 0x22	; 34
    2290:	90 e0       	ldi	r25, 0x00	; 0
    2292:	90 93 48 07 	sts	0x0748, r25	; 0x800748 <errno+0x1>
    2296:	80 93 47 07 	sts	0x0747, r24	; 0x800747 <errno>
    229a:	c5 01       	movw	r24, r10
    229c:	b4 01       	movw	r22, r8
    229e:	09 c0       	rjmp	.+18     	; 0x22b2 <strtod+0x292>
    22a0:	60 e0       	ldi	r22, 0x00	; 0
    22a2:	70 e0       	ldi	r23, 0x00	; 0
    22a4:	80 e8       	ldi	r24, 0x80	; 128
    22a6:	9f ef       	ldi	r25, 0xFF	; 255
    22a8:	04 c0       	rjmp	.+8      	; 0x22b2 <strtod+0x292>
    22aa:	60 e0       	ldi	r22, 0x00	; 0
    22ac:	70 e0       	ldi	r23, 0x00	; 0
    22ae:	80 ec       	ldi	r24, 0xC0	; 192
    22b0:	9f e7       	ldi	r25, 0x7F	; 127
    22b2:	cd b7       	in	r28, 0x3d	; 61
    22b4:	de b7       	in	r29, 0x3e	; 62
    22b6:	ec e0       	ldi	r30, 0x0C	; 12
    22b8:	0c 94 c4 11 	jmp	0x2388	; 0x2388 <__epilogue_restores__+0xc>

000022bc <isspace>:
    22bc:	91 11       	cpse	r25, r1
    22be:	0c 94 94 11 	jmp	0x2328	; 0x2328 <__ctype_isfalse>
    22c2:	80 32       	cpi	r24, 0x20	; 32
    22c4:	19 f0       	breq	.+6      	; 0x22cc <isspace+0x10>
    22c6:	89 50       	subi	r24, 0x09	; 9
    22c8:	85 50       	subi	r24, 0x05	; 5
    22ca:	c8 f7       	brcc	.-14     	; 0x22be <isspace+0x2>
    22cc:	08 95       	ret

000022ce <strncasecmp_P>:
    22ce:	fb 01       	movw	r30, r22
    22d0:	dc 01       	movw	r26, r24
    22d2:	41 50       	subi	r20, 0x01	; 1
    22d4:	50 40       	sbci	r21, 0x00	; 0
    22d6:	88 f0       	brcs	.+34     	; 0x22fa <strncasecmp_P+0x2c>
    22d8:	8d 91       	ld	r24, X+
    22da:	81 34       	cpi	r24, 0x41	; 65
    22dc:	1c f0       	brlt	.+6      	; 0x22e4 <strncasecmp_P+0x16>
    22de:	8b 35       	cpi	r24, 0x5B	; 91
    22e0:	0c f4       	brge	.+2      	; 0x22e4 <strncasecmp_P+0x16>
    22e2:	80 5e       	subi	r24, 0xE0	; 224
    22e4:	65 91       	lpm	r22, Z+
    22e6:	61 34       	cpi	r22, 0x41	; 65
    22e8:	1c f0       	brlt	.+6      	; 0x22f0 <strncasecmp_P+0x22>
    22ea:	6b 35       	cpi	r22, 0x5B	; 91
    22ec:	0c f4       	brge	.+2      	; 0x22f0 <strncasecmp_P+0x22>
    22ee:	60 5e       	subi	r22, 0xE0	; 224
    22f0:	86 1b       	sub	r24, r22
    22f2:	61 11       	cpse	r22, r1
    22f4:	71 f3       	breq	.-36     	; 0x22d2 <strncasecmp_P+0x4>
    22f6:	99 0b       	sbc	r25, r25
    22f8:	08 95       	ret
    22fa:	88 1b       	sub	r24, r24
    22fc:	fc cf       	rjmp	.-8      	; 0x22f6 <strncasecmp_P+0x28>

000022fe <strrev>:
    22fe:	dc 01       	movw	r26, r24
    2300:	fc 01       	movw	r30, r24
    2302:	67 2f       	mov	r22, r23
    2304:	71 91       	ld	r23, Z+
    2306:	77 23       	and	r23, r23
    2308:	e1 f7       	brne	.-8      	; 0x2302 <strrev+0x4>
    230a:	32 97       	sbiw	r30, 0x02	; 2
    230c:	04 c0       	rjmp	.+8      	; 0x2316 <strrev+0x18>
    230e:	7c 91       	ld	r23, X
    2310:	6d 93       	st	X+, r22
    2312:	70 83       	st	Z, r23
    2314:	62 91       	ld	r22, -Z
    2316:	ae 17       	cp	r26, r30
    2318:	bf 07       	cpc	r27, r31
    231a:	c8 f3       	brcs	.-14     	; 0x230e <strrev+0x10>
    231c:	08 95       	ret

0000231e <__cmpsf2>:
    231e:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <__fp_cmp>
    2322:	08 f4       	brcc	.+2      	; 0x2326 <__cmpsf2+0x8>
    2324:	81 e0       	ldi	r24, 0x01	; 1
    2326:	08 95       	ret

00002328 <__ctype_isfalse>:
    2328:	99 27       	eor	r25, r25
    232a:	88 27       	eor	r24, r24

0000232c <__ctype_istrue>:
    232c:	08 95       	ret

0000232e <__muluhisi3>:
    232e:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <__umulhisi3>
    2332:	a5 9f       	mul	r26, r21
    2334:	90 0d       	add	r25, r0
    2336:	b4 9f       	mul	r27, r20
    2338:	90 0d       	add	r25, r0
    233a:	a4 9f       	mul	r26, r20
    233c:	80 0d       	add	r24, r0
    233e:	91 1d       	adc	r25, r1
    2340:	11 24       	eor	r1, r1
    2342:	08 95       	ret

00002344 <__prologue_saves__>:
    2344:	2f 92       	push	r2
    2346:	3f 92       	push	r3
    2348:	4f 92       	push	r4
    234a:	5f 92       	push	r5
    234c:	6f 92       	push	r6
    234e:	7f 92       	push	r7
    2350:	8f 92       	push	r8
    2352:	9f 92       	push	r9
    2354:	af 92       	push	r10
    2356:	bf 92       	push	r11
    2358:	cf 92       	push	r12
    235a:	df 92       	push	r13
    235c:	ef 92       	push	r14
    235e:	ff 92       	push	r15
    2360:	0f 93       	push	r16
    2362:	1f 93       	push	r17
    2364:	cf 93       	push	r28
    2366:	df 93       	push	r29
    2368:	cd b7       	in	r28, 0x3d	; 61
    236a:	de b7       	in	r29, 0x3e	; 62
    236c:	ca 1b       	sub	r28, r26
    236e:	db 0b       	sbc	r29, r27
    2370:	0f b6       	in	r0, 0x3f	; 63
    2372:	f8 94       	cli
    2374:	de bf       	out	0x3e, r29	; 62
    2376:	0f be       	out	0x3f, r0	; 63
    2378:	cd bf       	out	0x3d, r28	; 61
    237a:	09 94       	ijmp

0000237c <__epilogue_restores__>:
    237c:	2a 88       	ldd	r2, Y+18	; 0x12
    237e:	39 88       	ldd	r3, Y+17	; 0x11
    2380:	48 88       	ldd	r4, Y+16	; 0x10
    2382:	5f 84       	ldd	r5, Y+15	; 0x0f
    2384:	6e 84       	ldd	r6, Y+14	; 0x0e
    2386:	7d 84       	ldd	r7, Y+13	; 0x0d
    2388:	8c 84       	ldd	r8, Y+12	; 0x0c
    238a:	9b 84       	ldd	r9, Y+11	; 0x0b
    238c:	aa 84       	ldd	r10, Y+10	; 0x0a
    238e:	b9 84       	ldd	r11, Y+9	; 0x09
    2390:	c8 84       	ldd	r12, Y+8	; 0x08
    2392:	df 80       	ldd	r13, Y+7	; 0x07
    2394:	ee 80       	ldd	r14, Y+6	; 0x06
    2396:	fd 80       	ldd	r15, Y+5	; 0x05
    2398:	0c 81       	ldd	r16, Y+4	; 0x04
    239a:	1b 81       	ldd	r17, Y+3	; 0x03
    239c:	aa 81       	ldd	r26, Y+2	; 0x02
    239e:	b9 81       	ldd	r27, Y+1	; 0x01
    23a0:	ce 0f       	add	r28, r30
    23a2:	d1 1d       	adc	r29, r1
    23a4:	0f b6       	in	r0, 0x3f	; 63
    23a6:	f8 94       	cli
    23a8:	de bf       	out	0x3e, r29	; 62
    23aa:	0f be       	out	0x3f, r0	; 63
    23ac:	cd bf       	out	0x3d, r28	; 61
    23ae:	ed 01       	movw	r28, r26
    23b0:	08 95       	ret

000023b2 <__umulhisi3>:
    23b2:	a2 9f       	mul	r26, r18
    23b4:	b0 01       	movw	r22, r0
    23b6:	b3 9f       	mul	r27, r19
    23b8:	c0 01       	movw	r24, r0
    23ba:	a3 9f       	mul	r26, r19
    23bc:	70 0d       	add	r23, r0
    23be:	81 1d       	adc	r24, r1
    23c0:	11 24       	eor	r1, r1
    23c2:	91 1d       	adc	r25, r1
    23c4:	b2 9f       	mul	r27, r18
    23c6:	70 0d       	add	r23, r0
    23c8:	81 1d       	adc	r24, r1
    23ca:	11 24       	eor	r1, r1
    23cc:	91 1d       	adc	r25, r1
    23ce:	08 95       	ret

000023d0 <_exit>:
    23d0:	f8 94       	cli

000023d2 <__stop_program>:
    23d2:	ff cf       	rjmp	.-2      	; 0x23d2 <__stop_program>
